[
    {
        "chapter": 14,
        "kind": "single",
        "stem": "HTTPでテキストを取得してUTF-8としてデコードする基本コードとして最も適切なものを1つ選べ。",
        "choices": [
            {
                "text": "with urllib.request.urlopen(url, timeout=5) as r: text = r.read().decode('utf-8')",
                "correct": true
            },
            {
                "text": "text = urllib.request.urlopen(url).text",
                "correct": false
            },
            {
                "text": "with urllib.request.urlopen(url) as r: text = str(r.read())",
                "correct": false
            },
            {
                "text": "with urllib.request.urlopen(url) as r: text = r.decode('utf-8')",
                "correct": false
            }
        ],
        "note": "urlopenのread()はbytesを返す。テキスト化には明示的にdecodeする。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "URLを構成要素に分解する関数として正しいものを1つ選べ。",
        "choices": [
            {
                "text": "urllib.parse.urlparse(url)",
                "correct": true
            },
            {
                "text": "urllib.request.urlsplit(url)",
                "correct": false
            },
            {
                "text": "urllib.parse.urlencode(url)",
                "correct": false
            },
            {
                "text": "urllib.error.urlparse(url)",
                "correct": false
            }
        ],
        "note": "urlparseはscheme/netloc/path/query/fragmentなどを分解してParseResultを返す。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "辞書 params をクエリ文字列にする。値にリストが含まれ複数キー展開したいときの正しい指定を1つ選べ。",
        "choices": [
            {
                "text": "urllib.parse.urlencode(params, doseq=True)",
                "correct": true
            },
            {
                "text": "urllib.parse.quote(params, multiple=True)",
                "correct": false
            },
            {
                "text": "urllib.parse.urlencode_list(params)",
                "correct": false
            },
            {
                "text": "urllib.parse.urljoin(base, params)",
                "correct": false
            }
        ],
        "note": "doseq=Trueで{'a':[1,2]}→'a=1&a=2'のように展開される。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "クエリ文字列を辞書に戻す関数として正しいものを1つ選べ。",
        "choices": [
            {
                "text": "urllib.parse.parse_qs('a=1&a=2&b=3')",
                "correct": true
            },
            {
                "text": "urllib.parse.urlparse('a=1&a=2&b=3')",
                "correct": false
            },
            {
                "text": "urllib.parse.parse_url('a=1&a=2&b=3')",
                "correct": false
            },
            {
                "text": "urllib.request.parse_qs('a=1&a=2&b=3')",
                "correct": false
            }
        ],
        "note": "parse_qsは値をリストで返す。タプル列が欲しければparse_qsl。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "ベースURLと相対パスから絶対URLを得る正しい関数を1つ選べ。",
        "choices": [
            {
                "text": "urllib.parse.urljoin('https://example.com/a/b/', '../c')",
                "correct": true
            },
            {
                "text": "urllib.parse.urlunparse('https://example.com', '../c')",
                "correct": false
            },
            {
                "text": "urllib.request.urlmerge('https://example.com/a/b/', '../c')",
                "correct": false
            },
            {
                "text": "urllib.parse.join('https://example.com/a/b/', '../c')",
                "correct": false
            }
        ],
        "note": "urljoinは相対参照を解決して新しいURLを返す。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "スペースを'+'で表現するフォーム用エンコードを行う関数として正しいものを1つ選べ。",
        "choices": [
            {
                "text": "urllib.parse.quote_plus('a b')",
                "correct": true
            },
            {
                "text": "urllib.parse.quote('a b')",
                "correct": false
            },
            {
                "text": "urllib.parse.unquote_plus('a b')",
                "correct": false
            },
            {
                "text": "urllib.parse.encode_plus('a b')",
                "correct": false
            }
        ],
        "note": "quote_plusは空白→'+'に、quoteは'%20'にエンコードする。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "User-Agentを付けてGETする最も標準的な例を1つ選べ。",
        "choices": [
            {
                "text": "req = urllib.request.Request(url, headers={'User-Agent':'MyApp/1.0'}); urllib.request.urlopen(req)",
                "correct": true
            },
            {
                "text": "urllib.request.urlopen(url, user_agent='MyApp/1.0')",
                "correct": false
            },
            {
                "text": "urllib.parse.urlencode({'User-Agent':'MyApp/1.0'})",
                "correct": false
            },
            {
                "text": "urllib.request.add_header(url, 'User-Agent', 'MyApp/1.0')",
                "correct": false
            }
        ],
        "note": "Requestオブジェクトにheadersを渡す。urlopenにuser_agent引数はない。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "HTTPエラー発生時にステータスコードを取得したい。適切な例を1つ選べ。",
        "choices": [
            {
                "text": "try:\n    urllib.request.urlopen(url)\nexcept urllib.error.HTTPError as e:\n    code = e.code",
                "correct": true
            },
            {
                "text": "except urllib.error.URLError as e:\n    code = e.status",
                "correct": false
            },
            {
                "text": "except Exception as e:\n    code = e.http_status",
                "correct": false
            },
            {
                "text": "code = urllib.request.status_code(url)",
                "correct": false
            }
        ],
        "note": "HTTPErrorはURLErrorのサブクラスで、code属性にステータスが入る。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "robots.txtの規則を解釈してアクセス可否を判定する標準モジュールを1つ選べ。",
        "choices": [
            {
                "text": "urllib.robotparser",
                "correct": true
            },
            {
                "text": "urllib.robots",
                "correct": false
            },
            {
                "text": "http.robotparser",
                "correct": false
            },
            {
                "text": "robotparser",
                "correct": false
            }
        ],
        "note": "RobotFileParser().set_url(...); read(); can_fetch(agent, url) で判定できる。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "http.clientでHTTPSアクセスを行う基本的なクラスを1つ選べ。",
        "choices": [
            {
                "text": "http.client.HTTPSConnection",
                "correct": true
            },
            {
                "text": "http.client.HTTPSSession",
                "correct": false
            },
            {
                "text": "urllib.request.HTTPSession",
                "correct": false
            },
            {
                "text": "http.client.TLSConnection",
                "correct": false
            }
        ],
        "note": "hostを渡してHTTPSConnectionを作成し、request/sendで操作する。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "証明書検証を有効にしたデフォルトのSSLコンテキストを作る正しい方法を1つ選べ。",
        "choices": [
            {
                "text": "ssl.create_default_context()",
                "correct": true
            },
            {
                "text": "ssl.SSLContext(ssl.CERT_NONE)",
                "correct": false
            },
            {
                "text": "ssl.default_context(verify=True)",
                "correct": false
            },
            {
                "text": "ssl.wrap_socket(verify=True)",
                "correct": false
            }
        ],
        "note": "create_default_contextは検証有効・システムCAでの一般的な推奨設定を返す。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "クッキーを自動処理しながらHTTPアクセスしたい。適切な構成を1つ選べ。",
        "choices": [
            {
                "text": "cj = http.cookiejar.CookieJar(); opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj)); opener.open(url)",
                "correct": true
            },
            {
                "text": "urllib.request.urlopen(url, cookies=True)",
                "correct": false
            },
            {
                "text": "http.cookies.SimpleCookie().open(url)",
                "correct": false
            },
            {
                "text": "urllib.parse.cookieopen(url)",
                "correct": false
            }
        ],
        "note": "CookieJarとHTTPCookieProcessorをopenerに組み込むと自動送受信される。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "HTTPプロキシを使ってアクセスしたい。環境変数以外の標準的な指定として正しいものを1つ選べ。",
        "choices": [
            {
                "text": "opener = urllib.request.build_opener(urllib.request.ProxyHandler({'http':'http://proxy:8080'})); opener.open(url)",
                "correct": true
            },
            {
                "text": "urllib.request.urlopen(url, proxy='http://proxy:8080')",
                "correct": false
            },
            {
                "text": "urllib.parse.Proxy('http://proxy:8080').open(url)",
                "correct": false
            },
            {
                "text": "http.client.HTTPConnection(proxy='http://proxy:8080')",
                "correct": false
            }
        ],
        "note": "ProxyHandlerをopenerに組み込む。環境変数HTTP_PROXYでも可。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "application/x-www-form-urlencoded でPOSTする基本コードとして正しいものを1つ選べ。",
        "choices": [
            {
                "text": "data = urllib.parse.urlencode(params).encode(); req = urllib.request.Request(url, data=data); urllib.request.urlopen(req)",
                "correct": true
            },
            {
                "text": "data = urllib.parse.quote(params); urllib.request.urlopen(url, data=data)",
                "correct": false
            },
            {
                "text": "urllib.request.post(url, json=params)",
                "correct": false
            },
            {
                "text": "urllib.parse.urlencode(params); urllib.request.urlopen(url, method='POST')",
                "correct": false
            }
        ],
        "note": "POSTデータはbytesで渡す。必要ならContent-Typeヘッダを明示する。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "レスポンスのContent-Typeが示す文字コードを取得してデコードに使いたい。適切な記述を1つ選べ。",
        "choices": [
            {
                "text": "enc = r.headers.get_content_charset('utf-8'); text = r.read().decode(enc)",
                "correct": true
            },
            {
                "text": "enc = r.getheader('charset', 'utf-8'); text = r.decode(enc)",
                "correct": false
            },
            {
                "text": "text = r.text(encoding='detect')",
                "correct": false
            },
            {
                "text": "enc = r.info().charset or 'utf-8'; text = r.read().decode(enc)",
                "correct": false
            }
        ],
        "note": "HTTPResponse.headersはemail.message.Message互換でget_content_charsetを持つ。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "タイムアウト時に発生する例外として最も適切なものを1つ選べ。",
        "choices": [
            {
                "text": "urllib.error.URLError（内部のreasonにsocket.timeout）",
                "correct": true
            },
            {
                "text": "urllib.error.TimeoutErrorのみ",
                "correct": false
            },
            {
                "text": "http.client.TimeoutExceptionのみ",
                "correct": false
            },
            {
                "text": "ValueError('timeout')",
                "correct": false
            }
        ],
        "note": "多くの場合URLErrorが送出され、そのreasonにsocket.timeoutが入る。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "urlopenをwith文で使う利点として最も適切なものを1つ選べ。",
        "choices": [
            {
                "text": "レスポンスが自動的にクローズされ、リソースリークを防げる",
                "correct": true
            },
            {
                "text": "自動でリトライされる",
                "correct": false
            },
            {
                "text": "自動で文字コード判定される",
                "correct": false
            },
            {
                "text": "自動でキャッシュに保存される",
                "correct": false
            }
        ],
        "note": "context managerでcloseを保証できる。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "既定のWebブラウザでURLを開く標準関数を1つ選べ。",
        "choices": [
            {
                "text": "webbrowser.open(url)",
                "correct": true
            },
            {
                "text": "urllib.request.open(url)",
                "correct": false
            },
            {
                "text": "http.client.open(url)",
                "correct": false
            },
            {
                "text": "urllib.parse.open(url)",
                "correct": false
            }
        ],
        "note": "webbrowserモジュールはOS既定のブラウザ起動を抽象化する。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "XML-RPCのクライアントを標準ライブラリで作る。適切なクラスを1つ選べ。",
        "choices": [
            {
                "text": "xmlrpc.client.ServerProxy",
                "correct": true
            },
            {
                "text": "xmlrpc.client.Client",
                "correct": false
            },
            {
                "text": "xmlrpc.server.ClientProxy",
                "correct": false
            },
            {
                "text": "urllib.request.XMLRPCProxy",
                "correct": false
            }
        ],
        "note": "ServerProxy('https://example.com/RPC2').method(args) のように呼び出す。",
        "is_excluded": false
    },
    {
        "chapter": 14,
        "kind": "single",
        "stem": "URLエンコード対象外のセーフ文字集合を指定してパス断片をエンコードしたい。正しい使い方を1つ選べ。",
        "choices": [
            {
                "text": "urllib.parse.quote(path, safe='/')",
                "correct": true
            },
            {
                "text": "urllib.parse.urlencode(path, safe='/')",
                "correct": false
            },
            {
                "text": "urllib.parse.quote_plus(path, keep='/')",
                "correct": false
            },
            {
                "text": "urllib.parse.escape(path, safe='/')",
                "correct": false
            }
        ],
        "note": "quoteのsafeでエンコードしない文字を追加できる（既定は'/'を含まない）。",
        "is_excluded": false
    }
]