# exam_preparation/exam/migrations/0001_initial.py
# Generated by Django 5.2.6 on 2025-09-27 05:10
# Djangoのバージョン5.2.6で自動生成されたマイグレーションファイル、生成日時付き

import django.db.models.deletion  # Djangoの削除動作（CASCADEなど）を扱うモジュールをインポート
from django.conf import settings  # Django設定からAUTH_USER_MODELなどの設定を読み込むためのモジュール
from django.db import migrations, models  # マイグレーションとモデルの定義に必要なモジュールをインポート


class Migration(migrations.Migration):
    # このクラスがマイグレーション定義の本体

    initial = True  # 初期マイグレーションであることを示すフラグ

    dependencies = [
        # マイグレーション適用の前提となる依存マイグレーション。ここではユーザモデルを指定
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # 以下、実行されるDB操作のリスト（テーブル作成やインデックス作成）

        migrations.CreateModel(
            name='Chapter',  # モデル名 Chapter（章）
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # 主キーID。BigAutoFieldは64bit整数の自動採番
                ('num', models.PositiveSmallIntegerField(unique=True)),
                # 章番号。正の小さい整数。ユニーク制約あり（重複不可）
                ('title', models.CharField(max_length=100)),
                # 章タイトル。最大100文字の文字列
                ('official_quota', models.PositiveSmallIntegerField(default=0)),
                # 公式出題数。0以上の整数。デフォルトは0
            ],
            options={
                'ordering': ['num'],  # デフォルトの並び順は章番号順
                'indexes': [models.Index(fields=['num'], name='exam_chapte_num_ffe0cb_idx')],
                # numフィールドにインデックスを作成し、高速検索を可能に
            },
        ),

        migrations.CreateModel(
            name='Question',  # モデル名 Question（問題）
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # 主キーID
                ('kind', models.CharField(
                    choices=[('single', 'single'), ('multi', 'multi'), ('judge', 'judge')],
                    default='single',
                    max_length=10)),
                # 問題の種類。選択肢(single/multi)か判定(judge)かを区別。最大10文字
                ('stem', models.TextField()),
                # 問題文テキスト
                ('note', models.TextField(blank=True, default='')),
                # 備考欄。空欄OK、デフォルトは空文字
                ('is_excluded', models.BooleanField(default=False)),
                # 出題除外フラグ。Falseが通常出題対象
                ('created_at', models.DateTimeField(auto_now_add=True)),
                # 作成日時。レコード生成時に自動設定
                ('chapter', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='exam.chapter')),
                # Chapterモデルへの外部キー。章が削除されると紐づく問題も削除される
            ],
        ),

        migrations.CreateModel(
            name='Choice',  # モデル名 Choice（選択肢）
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # 主キーID
                ('text', models.TextField()),
                # 選択肢のテキスト
                ('is_correct', models.BooleanField(default=False)),
                # 正解かどうかのフラグ。Falseがデフォルト
                ('question', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='choices',  # Questionからchoicesで参照可能
                    to='exam.question')),
                # Questionモデルへの外部キー。問題削除で紐づく選択肢も削除
            ],
        ),

        migrations.CreateModel(
            name='Attempt',  # モデル名 Attempt（回答履歴）
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # 主キーID
                ('is_correct', models.BooleanField()),
                # 回答が正解かどうか
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                # 回答日時。自動で作成時の日時を入れる
                ('mode', models.CharField(
                    choices=[('mock', 'mock'), ('rehab', 'rehab'), ('srs', 'srs')],
                    max_length=16)),
                # 回答モード。模試(mock)、リハビリ(rehab)、SRS(srs)のいずれか
                ('box', models.PositiveSmallIntegerField(default=0)),
                # SRS用のボックス番号（レベル管理用？）。0が初期値
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to=settings.AUTH_USER_MODEL)),
                # 回答者ユーザーへの外部キー。ユーザー削除時は回答も削除
                ('question', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    to='exam.question')),
                # 回答した問題への外部キー。問題削除時に回答も削除
            ],
        ),

        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['chapter'], name='exam_questi_chapter_99eb2c_idx'),
            # Questionのchapterフィールドにインデックス追加（高速検索用）
        ),

        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['is_excluded'], name='exam_questi_is_excl_4a858b_idx'),
            # Questionのis_excludedフィールドにインデックス追加（除外フラグ検索用）
        ),

        migrations.AddIndex(
            model_name='choice',
            index=models.Index(fields=['question'], name='exam_choice_questio_a635c3_idx'),
            # Choiceのquestionフィールドにインデックス追加（問題に紐づく選択肢検索用）
        ),

        migrations.AddIndex(
            model_name='choice',
            index=models.Index(fields=['is_correct'], name='exam_choice_is_corr_3a85e9_idx'),
            # Choiceのis_correctフィールドにインデックス追加（正解選択肢検索用）
        ),

        migrations.AddIndex(
            model_name='attempt',
            index=models.Index(fields=['user', 'answered_at'], name='exam_attemp_user_id_5f0ba9_idx'),
            # Attemptのuserとanswered_at複合インデックス。ユーザーの回答履歴の時間順検索用
        ),

        migrations.AddIndex(
            model_name='attempt',
            index=models.Index(fields=['question', 'answered_at'], name='exam_attemp_questio_c021a4_idx'),
            # Attemptのquestionとanswered_at複合インデックス。問題ごとの回答履歴時間順検索用
        ),

        migrations.AddIndex(
            model_name='attempt',
            index=models.Index(fields=['mode'], name='exam_attemp_mode_b68b73_idx'),
            # Attemptのmodeフィールドにインデックス追加。モード別検索の高速化
        ),
    ]
