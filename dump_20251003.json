[
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$600000$2RutMqbHsxQCKDIfprrQSC$rSiNSk9g6RcZqmjzGZTeC/Qqla2ZSM2R1KhuZ52ACE0=",
    "last_login": "2025-10-02T01:17:57.773Z",
    "is_superuser": true,
    "username": "admin",
    "first_name": "a",
    "last_name": "admin",
    "email": "admin@gmail.com",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2025-09-27T05:23:49Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$600000$1zeNyNfhmVcBTE5DMPnTVl$B8fH/3gE4DwM4onFeyoBmFLS60WG8uE/Q4uHFOcrkY4=",
    "last_login": "2025-10-02T01:16:03.629Z",
    "is_superuser": false,
    "username": "guest",
    "first_name": "a",
    "last_name": "guest",
    "email": "guest@gmail.com",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T01:01:26Z",
    "groups": [],
    "user_permissions": [
      [
        "view_logentry",
        "admin",
        "logentry"
      ],
      [
        "view_group",
        "auth",
        "group"
      ],
      [
        "view_permission",
        "auth",
        "permission"
      ],
      [
        "view_user",
        "auth",
        "user"
      ],
      [
        "view_contenttype",
        "contenttypes",
        "contenttype"
      ],
      [
        "view_attempt",
        "exam",
        "attempt"
      ],
      [
        "view_chapter",
        "exam",
        "chapter"
      ],
      [
        "view_choice",
        "exam",
        "choice"
      ],
      [
        "view_question",
        "exam",
        "question"
      ],
      [
        "view_session",
        "sessions",
        "session"
      ]
    ]
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$600000$j4hoR7iq3pqHM3IXGLYUNV$STUy/3HSsUGnpaMebsH128P/phyhNSTd6p5hfICri3g=",
    "last_login": null,
    "is_superuser": false,
    "username": "guest1",
    "first_name": "guest",
    "last_name": "1",
    "email": "guest1@gmail.com",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T05:19:48Z",
    "groups": [],
    "user_permissions": [
      [
        "view_logentry",
        "admin",
        "logentry"
      ],
      [
        "view_group",
        "auth",
        "group"
      ],
      [
        "view_permission",
        "auth",
        "permission"
      ],
      [
        "view_user",
        "auth",
        "user"
      ],
      [
        "view_contenttype",
        "contenttypes",
        "contenttype"
      ],
      [
        "view_attempt",
        "exam",
        "attempt"
      ],
      [
        "view_chapter",
        "exam",
        "chapter"
      ],
      [
        "view_choice",
        "exam",
        "choice"
      ],
      [
        "view_question",
        "exam",
        "question"
      ],
      [
        "view_session",
        "sessions",
        "session"
      ]
    ]
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$600000$2UfUECI2gUvYuacWgS695I$1iaq8ysunOzLnd/MaFYxOdMpq6ECfZ/s1b2MBJs2mPE=",
    "last_login": null,
    "is_superuser": false,
    "username": "guest2",
    "first_name": "guest",
    "last_name": "2",
    "email": "guest2@gmail.com",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T05:21:15Z",
    "groups": [],
    "user_permissions": [
      [
        "view_logentry",
        "admin",
        "logentry"
      ],
      [
        "view_group",
        "auth",
        "group"
      ],
      [
        "view_permission",
        "auth",
        "permission"
      ],
      [
        "view_user",
        "auth",
        "user"
      ],
      [
        "view_contenttype",
        "contenttypes",
        "contenttype"
      ],
      [
        "view_attempt",
        "exam",
        "attempt"
      ],
      [
        "view_chapter",
        "exam",
        "chapter"
      ],
      [
        "view_choice",
        "exam",
        "choice"
      ],
      [
        "view_question",
        "exam",
        "question"
      ],
      [
        "view_session",
        "sessions",
        "session"
      ]
    ]
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$600000$ZH9I59ZeyJ4Jp9kVOQ3PK1$wpgN6SXU6KdHV0dc+tcQ4uQqVWnK/MJ4HRLyI40o+7E=",
    "last_login": null,
    "is_superuser": false,
    "username": "guest3",
    "first_name": "guest",
    "last_name": "3",
    "email": "guest3@gmail.com",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T05:22:18Z",
    "groups": [],
    "user_permissions": [
      [
        "view_logentry",
        "admin",
        "logentry"
      ],
      [
        "view_group",
        "auth",
        "group"
      ],
      [
        "view_permission",
        "auth",
        "permission"
      ],
      [
        "view_user",
        "auth",
        "user"
      ],
      [
        "view_contenttype",
        "contenttypes",
        "contenttype"
      ],
      [
        "view_attempt",
        "exam",
        "attempt"
      ],
      [
        "view_chapter",
        "exam",
        "chapter"
      ],
      [
        "view_choice",
        "exam",
        "choice"
      ],
      [
        "view_question",
        "exam",
        "question"
      ],
      [
        "view_session",
        "sessions",
        "session"
      ]
    ]
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$600000$JiF5jozdy7OwCWZh7PCnto$yLxc/QblcjQxBqro4Lb02UDdKVdop7qhUkoRe0PuYck=",
    "last_login": null,
    "is_superuser": false,
    "username": "guest4",
    "first_name": "guest",
    "last_name": "4",
    "email": "guest4@gmail.com",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T05:27:03Z",
    "groups": [],
    "user_permissions": [
      [
        "view_logentry",
        "admin",
        "logentry"
      ],
      [
        "view_group",
        "auth",
        "group"
      ],
      [
        "view_permission",
        "auth",
        "permission"
      ],
      [
        "view_user",
        "auth",
        "user"
      ],
      [
        "view_contenttype",
        "contenttypes",
        "contenttype"
      ],
      [
        "view_attempt",
        "exam",
        "attempt"
      ],
      [
        "view_chapter",
        "exam",
        "chapter"
      ],
      [
        "view_choice",
        "exam",
        "choice"
      ],
      [
        "view_question",
        "exam",
        "question"
      ],
      [
        "view_session",
        "sessions",
        "session"
      ]
    ]
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$600000$2HYICmiT1vhrKlqj4FsFWo$7ejOgH9t8RUN0h8g505L/+cIdJ2XJXDoDHMiCedNJmM=",
    "last_login": null,
    "is_superuser": false,
    "username": "guest5",
    "first_name": "guest",
    "last_name": "5",
    "email": "guest5@gmail.com",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T05:27:56Z",
    "groups": [],
    "user_permissions": [
      [
        "view_logentry",
        "admin",
        "logentry"
      ],
      [
        "view_group",
        "auth",
        "group"
      ],
      [
        "view_permission",
        "auth",
        "permission"
      ],
      [
        "view_user",
        "auth",
        "user"
      ],
      [
        "view_contenttype",
        "contenttypes",
        "contenttype"
      ],
      [
        "view_attempt",
        "exam",
        "attempt"
      ],
      [
        "view_chapter",
        "exam",
        "chapter"
      ],
      [
        "view_choice",
        "exam",
        "choice"
      ],
      [
        "view_question",
        "exam",
        "question"
      ],
      [
        "view_session",
        "sessions",
        "session"
      ]
    ]
  }
},
{
  "model": "exam.chapter",
  "pk": 2,
  "fields": {
    "num": 1,
    "title": "Pythonの環境",
    "official_quota": 1
  }
},
{
  "model": "exam.chapter",
  "pk": 3,
  "fields": {
    "num": 2,
    "title": "コーディング規約",
    "official_quota": 2
  }
},
{
  "model": "exam.chapter",
  "pk": 4,
  "fields": {
    "num": 3,
    "title": "Pythonの言語仕様",
    "official_quota": 7
  }
},
{
  "model": "exam.chapter",
  "pk": 5,
  "fields": {
    "num": 4,
    "title": "Pythonのクラス",
    "official_quota": 3
  }
},
{
  "model": "exam.chapter",
  "pk": 6,
  "fields": {
    "num": 5,
    "title": "タイプヒント",
    "official_quota": 2
  }
},
{
  "model": "exam.chapter",
  "pk": 7,
  "fields": {
    "num": 6,
    "title": "テキストの処理",
    "official_quota": 4
  }
},
{
  "model": "exam.chapter",
  "pk": 8,
  "fields": {
    "num": 7,
    "title": "数値の処理",
    "official_quota": 0
  }
},
{
  "model": "exam.chapter",
  "pk": 9,
  "fields": {
    "num": 8,
    "title": "日付と時刻の処理",
    "official_quota": 2
  }
},
{
  "model": "exam.chapter",
  "pk": 10,
  "fields": {
    "num": 9,
    "title": "データ型とアルゴリズム",
    "official_quota": 5
  }
},
{
  "model": "exam.chapter",
  "pk": 11,
  "fields": {
    "num": 10,
    "title": "汎用OS・ランタイムサービス",
    "official_quota": 2
  }
},
{
  "model": "exam.chapter",
  "pk": 12,
  "fields": {
    "num": 11,
    "title": "ファイルとディレクトリへのアクセス",
    "official_quota": 2
  }
},
{
  "model": "exam.chapter",
  "pk": 13,
  "fields": {
    "num": 12,
    "title": "データ圧縮とアーカイブと永続化",
    "official_quota": 0
  }
},
{
  "model": "exam.chapter",
  "pk": 14,
  "fields": {
    "num": 13,
    "title": "特定のデータフォーマットを扱う",
    "official_quota": 2
  }
},
{
  "model": "exam.chapter",
  "pk": 15,
  "fields": {
    "num": 14,
    "title": "インターネット上のデータを扱う",
    "official_quota": 2
  }
},
{
  "model": "exam.chapter",
  "pk": 16,
  "fields": {
    "num": 15,
    "title": "HTML/XMLを扱う",
    "official_quota": 0
  }
},
{
  "model": "exam.chapter",
  "pk": 17,
  "fields": {
    "num": 16,
    "title": "テスト",
    "official_quota": 3
  }
},
{
  "model": "exam.chapter",
  "pk": 18,
  "fields": {
    "num": 17,
    "title": "デバッグ",
    "official_quota": 2
  }
},
{
  "model": "exam.chapter",
  "pk": 19,
  "fields": {
    "num": 18,
    "title": "暗号関連",
    "official_quota": 1
  }
},
{
  "model": "exam.chapter",
  "pk": 20,
  "fields": {
    "num": 19,
    "title": "並行処理、並列処理",
    "official_quota": 0
  }
},
{
  "model": "exam.question",
  "pk": 579,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "推奨される仮想環境の作成コマンドとして正しいものを1つ選べ。",
    "note": "標準ライブラリのvenvモジュールをpython -m venv で呼び出す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.147Z"
  }
},
{
  "model": "exam.question",
  "pk": 580,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "WindowsのPowerShellで、.venvを有効化するコマンドとして正しいものを1つ選べ。",
    "note": "PowerShellではScripts\\Activate.ps1。cmd.exeはScripts\\activate.bat、Linux/macOSはbin/activate。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.148Z"
  }
},
{
  "model": "exam.question",
  "pk": 581,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "pipでパッケージをプロジェクトにインストールする適切な方法として正しいものを1つ選べ。",
    "note": "プロジェクトごとに仮想環境を分離し、その中でpip installするのが基本。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.148Z"
  }
},
{
  "model": "exam.question",
  "pk": 582,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "requirements.txt を生成する一般的なコマンドを1つ選べ。",
    "note": "pip freeze は環境にインストールされたバージョンを固定した一覧を出力する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.149Z"
  }
},
{
  "model": "exam.question",
  "pk": 583,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "UNIX系でスクリプトに実行権限を付け、直接実行可能にする方法として正しいものを1つ選べ。",
    "note": "shebangと実行権限で直接実行できる。env経由にするとパスに依存せずpython3が呼ばれる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.149Z"
  }
},
{
  "model": "exam.question",
  "pk": 584,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "pyproject.toml の目的に関して最も適切な説明を1つ選べ。",
    "note": "PEP 518/621で定義。プロジェクトのビルドバックエンドやメタデータを記述する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.150Z"
  }
},
{
  "model": "exam.question",
  "pk": 585,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "pipx の用途として正しいものを1つ選べ。",
    "note": "pipxはグローバルに入れずに、各CLIを隔離実行するためのツール。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.151Z"
  }
},
{
  "model": "exam.question",
  "pk": 586,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "次のうち、複数のPythonバージョンを切り替える目的で使われることがあるものを1つ選べ。",
    "note": "pyenvはユーザー環境でのPython複数バージョン管理に使われる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.151Z"
  }
},
{
  "model": "exam.question",
  "pk": 587,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "仮想環境を有効化せずに python -m pip を使う意図として適切な説明を1つ選べ。",
    "note": "python -m pip は、実行しているPythonに対応するpipを確実に呼び出す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.152Z"
  }
},
{
  "model": "exam.question",
  "pk": 588,
  "fields": {
    "chapter": 2,
    "kind": "single",
    "stem": "pip list と pip freeze の違いとして正しいものを1つ選べ。",
    "note": "pip list は読みやすい一覧、pip freeze は要件ファイル用の厳密な==固定出力。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.153Z"
  }
},
{
  "model": "exam.question",
  "pk": 589,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "PEP 8で推奨されるインデント幅として正しいものを1つ選べ。",
    "note": "PEP 8はタブよりスペース優先、幅は4スペースを推奨。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.154Z"
  }
},
{
  "model": "exam.question",
  "pk": 590,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "インデントのスタイルとしてPEP 8で推奨されるものを1つ選べ。",
    "note": "インデントはスペース4個、タブ混在は避けるのが基本。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.155Z"
  }
},
{
  "model": "exam.question",
  "pk": 591,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "行の最大長としてPEP 8で推奨される値に最も近いものを1つ選べ。",
    "note": "コード79、コメント/ドキュメント72を目安にして折り返すのが伝統的推奨。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.155Z"
  }
},
{
  "model": "exam.question",
  "pk": 592,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "インポートの並べ方として正しいものを1つ選べ。",
    "note": "インポートは3グループに分け、空行で区切るのが定石。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.156Z"
  }
},
{
  "model": "exam.question",
  "pk": 593,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "インポートの書き方としてPEP 8で推奨されるものを1つ選べ。",
    "note": "ワイルドカードは名前空間を不明瞭にするため避ける。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.156Z"
  }
},
{
  "model": "exam.question",
  "pk": 594,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "絶対インポートと相対インポートについてPEP 8の推奨に合致するものを1つ選べ。",
    "note": "可読性とツール互換性の面で絶対インポートが優先。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.157Z"
  }
},
{
  "model": "exam.question",
  "pk": 595,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "二項演算子の前後の空白に関して正しいものを1つ選べ。",
    "note": "ただし優先順位の明確化など例外もあり得る（PEP 8参照）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.158Z"
  }
},
{
  "model": "exam.question",
  "pk": 596,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "キーワード引数の=の前後の空白に関して正しいものを1つ選べ。",
    "note": "代入文と区別するため、キーワード引数や注釈では空白なしが推奨。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.158Z"
  }
},
{
  "model": "exam.question",
  "pk": 597,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "トップレベルの関数やクラス定義の間隔として正しいものを1つ選べ。",
    "note": "クラス内メソッドは1行、トップレベルは2行が目安。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.159Z"
  }
},
{
  "model": "exam.question",
  "pk": 598,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "命名規約として正しい対応を1つ選べ。",
    "note": "PEP 8の基本的な命名規則に従う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.160Z"
  }
},
{
  "model": "exam.question",
  "pk": 599,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "**all** の役割として最も適切な説明を1つ選べ。",
    "note": "__all__は名前の露出を明示するためのリスト。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.160Z"
  }
},
{
  "model": "exam.question",
  "pk": 600,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "Noneとの比較として推奨される書き方を1つ選べ。",
    "note": "同一性比較にis/is notを用いる（==ではない）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.161Z"
  }
},
{
  "model": "exam.question",
  "pk": 601,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "真偽値の比較としてPEP 8に沿う書き方を1つ選べ。",
    "note": "真偽値の直接比較は避け、真偽値そのものを評価する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.162Z"
  }
},
{
  "model": "exam.question",
  "pk": 602,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "例外処理に関して推奨される方針を1つ選べ。",
    "note": "必要以上に広い捕捉はバグの隠蔽につながるため避ける。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.162Z"
  }
},
{
  "model": "exam.question",
  "pk": 603,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "ファイルなどのリソース解放に関する推奨を1つ選べ。",
    "note": "with文は例外時も確実にクリーンアップが行われるため推奨。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.163Z"
  }
},
{
  "model": "exam.question",
  "pk": 604,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "デフォルト引数に関して正しい方針を1つ選べ。",
    "note": "可変デフォルトは関数間で共有され予期しない副作用を生む。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.163Z"
  }
},
{
  "model": "exam.question",
  "pk": 605,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "ログ出力に関する推奨を1つ選べ。",
    "note": "loggingはレベル・ハンドラ・フォーマットの統制が可能で運用向き。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.164Z"
  }
},
{
  "model": "exam.question",
  "pk": 606,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "文字列のクォートに関する推奨に最も近いものを1つ選べ。",
    "note": "どちらでも良いがプロジェクト内の一貫性を重視する。docstringは三重引用符。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.165Z"
  }
},
{
  "model": "exam.question",
  "pk": 607,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "比較演算の書き方としてPEP 8に沿うものを1つ選べ。",
    "note": "Pythonの連鎖比較は可読性が高く評価される。等価比較にisは原則使わない（Noneなどは除く）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.165Z"
  }
},
{
  "model": "exam.question",
  "pk": 608,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "モジュールのエントリポイントに関する慣習として正しいものを1つ選べ。",
    "note": "スクリプト実行時とインポート時の振る舞いを分けるための定番パターン。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.166Z"
  }
},
{
  "model": "exam.question",
  "pk": 609,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "コメント・docstringの書き方として適切なものを1つ選べ。",
    "note": "1行目に要約、空行、以降に詳細という構成が一般的。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.167Z"
  }
},
{
  "model": "exam.question",
  "pk": 610,
  "fields": {
    "chapter": 3,
    "kind": "single",
    "stem": "型ヒントの取り扱いとして妥当な方針を1つ選べ。",
    "note": "型ヒントは可読性・静的解析の助けになるが、Anyの使い過ぎは避ける。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.167Z"
  }
},
{
  "model": "exam.question",
  "pk": 611,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(type(True) is bool, isinstance(True, int))",
    "note": "bool は int のサブクラス。type(True) is bool は True、isinstance(True, int) も True。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.168Z"
  }
},
{
  "model": "exam.question",
  "pk": 612,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\na = []\nprint(bool(a), len(a)==0)",
    "note": "空のシーケンスは偽。len(a)==0 は True。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.169Z"
  }
},
{
  "model": "exam.question",
  "pk": 613,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\ns = 'abcd'\nprint(s[1:3])",
    "note": "スライスは開始含み、終了非包含。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.170Z"
  }
},
{
  "model": "exam.question",
  "pk": 614,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "アンパック代入に関して正しいものを1つ選べ。\na, *b = [1,2,3,4] の結果は？",
    "note": "スター付きターゲットは残りをリストとして受け取る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.170Z"
  }
},
{
  "model": "exam.question",
  "pk": 615,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint([i*i for i in range(3)])",
    "note": "内包表記の基本。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.171Z"
  }
},
{
  "model": "exam.question",
  "pk": 616,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のうち、ラムダ式に関する説明として正しいものを1つ選べ。",
    "note": "lambda は式であり、式1つのみ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.172Z"
  }
},
{
  "model": "exam.question",
  "pk": 617,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "短絡評価に関して正しいものを1つ選べ。\n次の式で右辺が評価されないのはどれか。",
    "note": "and は左が False、or は左が True なら右を評価しない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.172Z"
  }
},
{
  "model": "exam.question",
  "pk": 618,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\na = [1]*3\na[0] = 9\nprint(a)",
    "note": "[1]*3 は独立な int の繰り返し。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.173Z"
  }
},
{
  "model": "exam.question",
  "pk": 619,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\na = [[0]]*3\na[0][0] = 1\nprint(a)",
    "note": "内側リスト参照が共有される。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.173Z"
  }
},
{
  "model": "exam.question",
  "pk": 620,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "dict のキーに関する説明として正しいものを1つ選べ。",
    "note": "キーは hashable である必要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.174Z"
  }
},
{
  "model": "exam.question",
  "pk": 621,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nd = {'a':1}\nprint(d.get('b', 5))",
    "note": "get は見つからなければデフォルト。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.175Z"
  }
},
{
  "model": "exam.question",
  "pk": 622,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\ns = {1,2,2,3}\nprint(len(s))",
    "note": "set は重複を持たない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.175Z"
  }
},
{
  "model": "exam.question",
  "pk": 623,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "イテレータに関する説明として正しいものを1つ選べ。",
    "note": "イテレータは一方向に消費。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.176Z"
  }
},
{
  "model": "exam.question",
  "pk": 624,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "range(5) に関する正しい説明を1つ選べ。",
    "note": "遅延評価されるシーケンス。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.177Z"
  }
},
{
  "model": "exam.question",
  "pk": 625,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "リストのソートに関して正しいものを1つ選べ。",
    "note": "Timsort は安定。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.177Z"
  }
},
{
  "model": "exam.question",
  "pk": 626,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(''.join(['a','b','c']))",
    "note": "join は要素を連結。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.178Z"
  }
},
{
  "model": "exam.question",
  "pk": 627,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "スライスに関して正しいものを1つ選べ。\ns='abcdef'; s[::-1] の結果は？",
    "note": "ステップ -1 で逆順。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.179Z"
  }
},
{
  "model": "exam.question",
  "pk": 628,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint({i:i*i for i in range(3)}[2])",
    "note": "辞書内包表記の基本。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.179Z"
  }
},
{
  "model": "exam.question",
  "pk": 629,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "例外処理について正しいものを1つ選べ。",
    "note": "必要最小限の例外を捕捉。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.180Z"
  }
},
{
  "model": "exam.question",
  "pk": 630,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "with 文の目的として正しいものを1つ選べ。",
    "note": "__enter__/__exit__ による資源管理。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.180Z"
  }
},
{
  "model": "exam.question",
  "pk": 631,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(bool('0'), bool(0))",
    "note": "非空文字列は True、0 は False。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.181Z"
  }
},
{
  "model": "exam.question",
  "pk": 632,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "リスト内包表記のループ変数リーク（Py3）について正しいものを1つ選べ。",
    "note": "Py3 の内包表記は独自スコープ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.182Z"
  }
},
{
  "model": "exam.question",
  "pk": 633,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint({1,2} | {2,3})",
    "note": "和集合。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.182Z"
  }
},
{
  "model": "exam.question",
  "pk": 634,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "シーケンスのアンパックでプレースホルダとしてよく使われる名前はどれか。",
    "note": "慣習的表記。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.183Z"
  }
},
{
  "model": "exam.question",
  "pk": 635,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint('py' * 3)",
    "note": "文字列の乗算。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.184Z"
  }
},
{
  "model": "exam.question",
  "pk": 636,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "float('nan') に関して正しいものを1つ選べ。",
    "note": "NaN != NaN。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.184Z"
  }
},
{
  "model": "exam.question",
  "pk": 637,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(list(zip([1,2,3],[10,20])))",
    "note": "zip は最短に揃う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.185Z"
  }
},
{
  "model": "exam.question",
  "pk": 638,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "enumerate に関する正しい説明を1つ選べ。",
    "note": "enumerate(seq, start=1)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.185Z"
  }
},
{
  "model": "exam.question",
  "pk": 639,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "タプルに関する正しい説明を1つ選べ。",
    "note": "不変容器。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.186Z"
  }
},
{
  "model": "exam.question",
  "pk": 640,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nd = {'x':1}\nd['y'] = d.get('y',0) + 2\nprint(d['y'])",
    "note": "デフォルト0に2を加算。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.187Z"
  }
},
{
  "model": "exam.question",
  "pk": 641,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "文字列オブジェクトの性質として正しいものを1つ選べ。",
    "note": "str は不変。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.187Z"
  }
},
{
  "model": "exam.question",
  "pk": 642,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "in 演算子に関して正しいものを1つ選べ。",
    "note": "dict の in はキー判定。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.188Z"
  }
},
{
  "model": "exam.question",
  "pk": 643,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint((1,2)+(3,))",
    "note": "タプル連結。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.188Z"
  }
},
{
  "model": "exam.question",
  "pk": 644,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint([i for i in range(5) if i%2==0])",
    "note": "条件付き内包表記。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.189Z"
  }
},
{
  "model": "exam.question",
  "pk": 645,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "is と == の違いとして正しいものを1つ選べ。",
    "note": "役割が異なる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.190Z"
  }
},
{
  "model": "exam.question",
  "pk": 646,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\na = 1\nb = 1\nprint(a == b, a is b)",
    "note": "小整数のインターンにより is が True の可能性。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.190Z"
  }
},
{
  "model": "exam.question",
  "pk": 647,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "内包表記で if-else を値側に使う正しい例を1つ選べ。",
    "note": "条件演算子は式内部。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.191Z"
  }
},
{
  "model": "exam.question",
  "pk": 648,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\ntry:\n    1/0\nexcept ZeroDivisionError:\n    print('A')\nelse:\n    print('B')\nfinally:\n    print('C')",
    "note": "except と finally が実行。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.192Z"
  }
},
{
  "model": "exam.question",
  "pk": 649,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "複数代入 a = b = [] の注意点として正しいものを1つ選べ。",
    "note": "同一参照。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.192Z"
  }
},
{
  "model": "exam.question",
  "pk": 650,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint({x for x in 'abca'})",
    "note": "集合で重複なし。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.193Z"
  }
},
{
  "model": "exam.question",
  "pk": 651,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "global 宣言に関して正しいものを1つ選べ。",
    "note": "代入でローカルと見なされるため。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.193Z"
  }
},
{
  "model": "exam.question",
  "pk": 652,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "nonlocal 宣言に関して正しいものを1つ選べ。",
    "note": "ネスト関数で利用。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.194Z"
  }
},
{
  "model": "exam.question",
  "pk": 653,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint({i for i in range(3)} <= {0,1,2,3})",
    "note": "部分集合判定。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.195Z"
  }
},
{
  "model": "exam.question",
  "pk": 654,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "sorted に key を与える使い方の正しいものを1つ選べ。",
    "note": "cmp は廃止。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.195Z"
  }
},
{
  "model": "exam.question",
  "pk": 655,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "文字列の replace の性質として正しいものを1つ選べ。",
    "note": "str は不変。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.196Z"
  }
},
{
  "model": "exam.question",
  "pk": 656,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint((0 or 5) and 7)",
    "note": "論理演算子は最後に評価したオペランドを返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.197Z"
  }
},
{
  "model": "exam.question",
  "pk": 657,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "f文字列に関して正しいものを1つ選べ。",
    "note": "導入は 3.6。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.197Z"
  }
},
{
  "model": "exam.question",
  "pk": 658,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "ウォルラス演算子（:=）に関して正しいものを1つ選べ。",
    "note": "条件式などで利用可。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.198Z"
  }
},
{
  "model": "exam.question",
  "pk": 659,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "match 文に関して正しいものを1つ選べ。",
    "note": "PEP 634–636。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.198Z"
  }
},
{
  "model": "exam.question",
  "pk": 660,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint((1,2,3)[-1])",
    "note": "負のインデックス。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.199Z"
  }
},
{
  "model": "exam.question",
  "pk": 661,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\na = {'x':1}\nprint('x' in a, 1 in a)",
    "note": "dict の in はキー判定。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.200Z"
  }
},
{
  "model": "exam.question",
  "pk": 662,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "リストのコピーとして正しいものを1つ選べ。",
    "note": "浅いコピー。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.200Z"
  }
},
{
  "model": "exam.question",
  "pk": 663,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\na = {'a':1}\nprint(a.setdefault('b', 10), a['b'])",
    "note": "setdefault は挿入して返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.201Z"
  }
},
{
  "model": "exam.question",
  "pk": 664,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(list(map(lambda x:x+1, [1,2,3])))",
    "note": "map はイテレータ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.202Z"
  }
},
{
  "model": "exam.question",
  "pk": 665,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nfrom math import sqrt\nprint(round(sqrt(2), 0))",
    "note": "round(…,0) は float を返しうる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.202Z"
  }
},
{
  "model": "exam.question",
  "pk": 666,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "bytes と str の関係として正しいものを1つ選べ。",
    "note": "bytearray が可変。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.203Z"
  }
},
{
  "model": "exam.question",
  "pk": 667,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(any([]), all([]))",
    "note": "空の all は真（真空真）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.203Z"
  }
},
{
  "model": "exam.question",
  "pk": 668,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "リストとタプルの使い分けで適切なものを1つ選べ。",
    "note": "不変の表現。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.204Z"
  }
},
{
  "model": "exam.question",
  "pk": 669,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint({}.get('x') is None)",
    "note": "get の既定値。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.205Z"
  }
},
{
  "model": "exam.question",
  "pk": 670,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "内包表記の順序として正しいものを1つ選べ。\n[x+y for x in [1,2] for y in [10,20]] の先頭は？",
    "note": "x=1, y=10。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.205Z"
  }
},
{
  "model": "exam.question",
  "pk": 671,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(tuple(range(0,5,2)))",
    "note": "step=2。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.206Z"
  }
},
{
  "model": "exam.question",
  "pk": 672,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "dict の順序性に関する正しい説明を1つ選べ。",
    "note": "仕様として保持。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.206Z"
  }
},
{
  "model": "exam.question",
  "pk": 673,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "in はどのメソッドで包含判定するか正しいものを1つ選べ。",
    "note": "set/dict はハッシュで高速。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.207Z"
  }
},
{
  "model": "exam.question",
  "pk": 674,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(''.join(map(str, [1,2,3])))",
    "note": "join は文字列の列。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.208Z"
  }
},
{
  "model": "exam.question",
  "pk": 675,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "イテラブルのアンパックに関して正しいものを1つ選べ。\n*a = (1,2,3) の挙動は？",
    "note": "少なくとも他のターゲットが必要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.208Z"
  }
},
{
  "model": "exam.question",
  "pk": 676,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint({True: 'T', 1: 'one'}[1])",
    "note": "True と 1 は等価でハッシュも同じ。後挿入が残る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.209Z"
  }
},
{
  "model": "exam.question",
  "pk": 677,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "生成式に関する正しい説明を1つ選べ。",
    "note": "ジェネレータは1要素ずつ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.210Z"
  }
},
{
  "model": "exam.question",
  "pk": 678,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint(sum([[]], []))",
    "note": "開始値 [] に対して空リストを足すと空。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.210Z"
  }
},
{
  "model": "exam.question",
  "pk": 679,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "スライス代入に関して正しいものを1つ選べ。\na=[1,2,3]; a[1:2]=[9,8]; a は？",
    "note": "1要素と置換しつつ2要素挿入で長くなる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.211Z"
  }
},
{
  "model": "exam.question",
  "pk": 680,
  "fields": {
    "chapter": 4,
    "kind": "single",
    "stem": "次のコードの出力を選べ。\nprint((x := 5) if (x := 0) else 10)",
    "note": "先に (x := 0) が False になり 10。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.212Z"
  }
},
{
  "model": "exam.question",
  "pk": 681,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "クラス定義の基本として正しいものを1つ選べ。",
    "note": "最小のクラス定義は `class Foo: pass`。`def` は関数定義に用いる。クラス本文はインデントされたブロックで記述し、空にしたい場合は `pass` を置く。Python 3 では旧式クラスは存在せず、すべて新式クラス。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.213Z"
  }
},
{
  "model": "exam.question",
  "pk": 682,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "**init** の役割として正しいものを1つ選べ。",
    "note": "`__init__(self, ...)` は既に生成されたインスタンスに対して属性の初期化を行う。生成（メモリ確保）は `__new__` が担当。`__init__` は戻り値を返さない（`None` を返すべき）点にも注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.214Z"
  }
},
{
  "model": "exam.question",
  "pk": 683,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "**new** の説明として正しいものを1つ選べ。",
    "note": "`__new__(cls, ...)` はオブジェクトを生成して返す（特に `tuple` など不変型のサブクラス化時に使う）。`__init__` より先に呼ばれる。`super().__new__(cls)` を返すのが典型。返り値がインスタンスでないと `__init__` は呼ばれない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.215Z"
  }
},
{
  "model": "exam.question",
  "pk": 684,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "インスタンス属性とクラス属性の違いとして正しいものを1つ選べ。",
    "note": "クラス本文で定義した変数はクラス属性であり全インスタンスで共有される。`self.x = ...` のように代入するとそのインスタンスの辞書（`__dict__`）に属性が作られ、他のインスタンスには影響しない。可変オブジェクトをクラス属性に置く際は共有による副作用に注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.215Z"
  }
},
{
  "model": "exam.question",
  "pk": 685,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "@staticmethod の説明として正しいものを1つ選べ。",
    "note": "`@staticmethod` はユーティリティ関数をクラスに関連付けたい時に使う。呼び出し時に self/cls は渡されない。対して `@classmethod` は `cls` を第1引数に受け取る。どちらも名称でのディスパッチやテスト時のモック容易性に寄与する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.216Z"
  }
},
{
  "model": "exam.question",
  "pk": 686,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "@classmethod の正しい使い所を1つ選べ。",
    "note": "`@classmethod` は `cls` を受け取り、現在のクラス（サブクラスの場合はサブクラス）へ動的にバインドされるため、継承階層で適切なクラスを返すファクトリの実装に向く。例：`@classmethod\ndef from_path(cls, p): return cls(open(p).read())`。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.217Z"
  }
},
{
  "model": "exam.question",
  "pk": 687,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "プロパティ（@property）の説明として正しいものを1つ選べ。",
    "note": "`@property` でゲッター、`@x.setter` でセッター、`@x.deleter` でデリーターを定義できる。内部表現を隠蔽し、API を安定化させる（後から検証やキャッシュ追加が可能）。ゲッターのみ実装すれば読み取り専用になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.217Z"
  }
},
{
  "model": "exam.question",
  "pk": 688,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "**repr** と **str** の使い分けとして正しいものを1つ選べ。",
    "note": "`__repr__` はデバッグやログで有用。可能なら `eval(repr(x)) == x` を目指す（実務では難しい場合も多い）。`__str__` が未実装の場合、`print(x)` などは `__repr__` がフォールバックされる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.218Z"
  }
},
{
  "model": "exam.question",
  "pk": 689,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "演算子のオーバーロードに関して正しいものを1つ選べ。",
    "note": "二項演算子は `__radd__` など右辺版との整合にも注意。`__eq__` を実装したら等価性の性質（対称性・推移性）を壊さないようにする。`__eq__` を定義した場合 `__hash__` の扱いが変わる（不整合回避のため `__hash__=None` となることがある）点に注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.218Z"
  }
},
{
  "model": "exam.question",
  "pk": 690,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "**slots** の効果として正しいものを1つ選べ。",
    "note": "`__slots__ = ('x','y')` のように列挙すると、その属性以外を動的に追加できなくなる（`__dict__` を含めれば例外）。多量の小オブジェクトを扱う場面で有効。多重継承との相性・ピックル可否などの挙動にも注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.219Z"
  }
},
{
  "model": "exam.question",
  "pk": 691,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "MRO（メソッド解決順序）に関して正しいものを1つ選べ。",
    "note": "MRO は `Class.mro()` または `obj.__class__.mro()` で確認できる。`super()` はこの MRO に従って次のクラスを参照するため、多重継承下でも協調的に動作する（直接の親固定ではない）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.220Z"
  }
},
{
  "model": "exam.question",
  "pk": 692,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "super() の正しい使い方を1つ選べ。",
    "note": "引数なしの `super()` は現在のクラスとインスタンスをコンパイラが埋め込む。複数の基底が同じメソッドを持つ場合でも、各クラスで `super()` を呼び出す「協調的継承」を行うことで一回ずつ連鎖的に実行される。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.220Z"
  }
},
{
  "model": "exam.question",
  "pk": 693,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "データモデルにおけるディスクリプタの定義として正しいものを1つ選べ。",
    "note": "プロパティはディスクリプタの高レベル API。データディスクリプタ（`__set__` あり）はインスタンス辞書よりも優先される。キャッシュ、検証、遅延ロードなどで活用できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.221Z"
  }
},
{
  "model": "exam.question",
  "pk": 694,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "等価性とハッシュの整合性として正しいものを1つ選べ。",
    "note": "ハッシュテーブルの不変条件。`__eq__` をオーバーライドすると `__hash__` が無効化される場合がある（`__hash__ = None`）。辞書キーや集合要素に使う型では等価とハッシュの整合性を保つことが重要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.222Z"
  }
},
{
  "model": "exam.question",
  "pk": 695,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "抽象基底クラス（ABC）の用途として正しいものを1つ選べ。",
    "note": "`abc.ABC` を継承し、`@abstractmethod` を付けたメソッドが実装されていなければ直接インスタンス化できない。`collections.abc` にはシーケンスやマッピング等の抽象インターフェイスが揃っている。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.222Z"
  }
},
{
  "model": "exam.question",
  "pk": 696,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "@dataclass の効果として正しいものを1つ選べ。",
    "note": "`@dataclass` は BOILERPLATE を削減。`frozen=True` で不変、`order=True` で比較順序メソッド生成。ミュータブルなデフォルト値には `field(default_factory=list)` のようにファクトリを使うのが定石。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.223Z"
  }
},
{
  "model": "exam.question",
  "pk": 697,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "**init_subclass** の説明として正しいものを1つ選べ。",
    "note": "`class Child(Base): ...` が評価された直後に `Base.__init_subclass__` が呼ばれる。プラグイン登録、抽象メソッド検査、デフォルト属性の付与などに活用できる（`**kwargs` を受けて柔軟に）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.223Z"
  }
},
{
  "model": "exam.question",
  "pk": 698,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "**getattr** と **getattribute** の違いとして正しいものを1つ選べ。",
    "note": "`__getattribute__` は強力だが無限再帰の危険があるため、内部で `object.__getattribute__(self, name)` を使って委譲するのが基本。`__getattr__` はフォールバック生成（遅延属性など）に便利。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.224Z"
  }
},
{
  "model": "exam.question",
  "pk": 699,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "イミュータブルな値オブジェクトをクラスで表現するときの推奨に最も近いものを1つ選べ。",
    "note": "不変オブジェクトはハッシュ計算や辞書キーに向く。`frozen=True` はフィールドの再代入を禁止し、`__hash__` も自動生成（`eq=True` のとき）される。内部に可変要素を持つと不変性・ハッシュ安定性が壊れる点に注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.225Z"
  }
},
{
  "model": "exam.question",
  "pk": 700,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "クラス変数とインスタンス変数のシャドーイング挙動として正しいものを1つ選べ。",
    "note": "属性探索はインスタンス辞書→クラス→基底クラスの順。`self.x = ...` によって同名のクラス属性 `x` はそのインスタンスからは見えなくなるが、他のインスタンスやクラスからは引き続き参照される。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.225Z"
  }
},
{
  "model": "exam.question",
  "pk": 701,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "多相性（ポリモーフィズム）に関する説明として最も適切なものを1つ選べ。",
    "note": "Python はダックタイピングの言語であり、明示的な共通親がなくても “同じメソッドを提供する” ことで多相性を獲得できる。必要なら ABC で形式化し、`isinstance`／`issubclass` と合わせて設計する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.226Z"
  }
},
{
  "model": "exam.question",
  "pk": 702,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "**call** の用途として正しいものを1つ選べ。",
    "note": "`obj()` の形で呼び出されたときに `obj.__call__` が実行される。関数オブジェクト、戦略オブジェクト、遅延評価、メトリクスのためのラッパなどに有用。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.227Z"
  }
},
{
  "model": "exam.question",
  "pk": 703,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "コンテキストマネージャをクラスで実装する際に必要なメソッドの組を1つ選べ。",
    "note": "`with obj as x:` で `__enter__` の戻り値が `x` に束縛され、ブロック終了時に `__exit__(exc_type, exc, tb)` が呼ばれる。例外を握りつぶすなら `__exit__` で True を返す（乱用は避ける）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.227Z"
  }
},
{
  "model": "exam.question",
  "pk": 704,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "イテレータをクラスで実装する最低条件として正しいものを1つ選べ。",
    "note": "イテレータプロトコルは `iter(obj)` → `obj.__iter__()`、`next(it)` → `it.__next__()`。コンテナは `__len__` と `__getitem__` だけでも “イテラブル” になりうるが、これはシーケンス風イテレーションでありイテレータそのものではない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.228Z"
  }
},
{
  "model": "exam.question",
  "pk": 705,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "コンテナのメンバーシップテスト `x in obj` をクラスでカスタマイズするには何を実装すべきか。",
    "note": "`in` はまず `__contains__` を参照し、未実装ならイテレーションで線形探索を行う。集合・辞書ではハッシュにより高速な包含判定が可能。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.229Z"
  }
},
{
  "model": "exam.question",
  "pk": 706,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "メタクラスの説明として正しいものを1つ選べ。",
    "note": "通常はデコレータや `__init_subclass__` で十分だが、属性自動付与・検証・登録などをクラス定義段階で強制したい場合にメタクラスが有効。指定は `class C(metaclass=Meta): ...` のように行う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.229Z"
  }
},
{
  "model": "exam.question",
  "pk": 707,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "クラスデコレータ（関数でクラスを受け取りクラスを返す）の用途として適切なものを1つ選べ。",
    "note": "クラスデコレータはメタクラスより軽量に挙動を変更できる。例えばレジストリへ自動登録、`__repr__` の注入、プロパティ一括生成など。副作用のスコープは意図的に限定することが重要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.230Z"
  }
},
{
  "model": "exam.question",
  "pk": 708,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "コンポジション（合成）と継承の選択指針として最も適切なものを1つ選べ。",
    "note": "継承は密結合を生みやすく、設計の柔軟性を損なうことがある。ふるまいの差し替えが主目的なら委譲／合成を検討。Python ではプロトコル中心設計（ダックタイピング）も強力。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.231Z"
  }
},
{
  "model": "exam.question",
  "pk": 709,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "**del**（デストラクタ）について正しい記述を1つ選べ。",
    "note": "循環参照や終了順序問題により `__del__` は実行されないことがある。確実な解放はコンテキストマネージャ（`with`）や明示的 close を推奨。`__del__` では例外を発生させないこと（無視されうる）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.231Z"
  }
},
{
  "model": "exam.question",
  "pk": 710,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "イミュータブル組込み型（tuple など）を継承する場合に `__new__` が重要な理由として正しいものを1つ選べ。",
    "note": "不変型の内容は生成時に決定される。サブクラスでフィールドを追加したい場合は `__new__` で `super().__new__(cls, 値...)` を返し、そこに付随情報を保持する（別属性やキャッシュなど）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.232Z"
  }
},
{
  "model": "exam.question",
  "pk": 711,
  "fields": {
    "chapter": 5,
    "kind": "single",
    "stem": "リッチ比較メソッドの実装方針として適切なものを1つ選べ。",
    "note": "`total_ordering` は `__eq__` と `__lt__`（または他の1つ）から残りの `<, <=, >, >=` を生成。`__cmp__` は Python 3 では廃止。比較の安定性（反射律・反対称性・推移性）を満たすように設計すること。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.232Z"
  }
},
{
  "model": "exam.question",
  "pk": 712,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "型ヒントの目的として最も適切な説明を1つ選べ。",
    "note": "型ヒントは型チェッカやIDEのためのメタ情報。Python本体は原則として実行時に強制しない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.233Z"
  }
},
{
  "model": "exam.question",
  "pk": 713,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Optional[int] の意味として正しいものを1つ選べ。",
    "note": "Optional[T] は T ∪ {None} を表す。None を取りうるときに使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.234Z"
  }
},
{
  "model": "exam.question",
  "pk": 714,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "PEP 604 の Union 構文として正しい例を1つ選べ。",
    "note": "Python 3.10+ では X | Y で Union を表現できる。従来の typing.Union[X, Y] と同義。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.235Z"
  }
},
{
  "model": "exam.question",
  "pk": 715,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Any と object の違いとして最も適切な説明を1つ選べ。",
    "note": "Any は安全網だが型安全性を弱める。object は最上位型で、使用側でダウンキャストが必要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.235Z"
  }
},
{
  "model": "exam.question",
  "pk": 716,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Callable の正しい注釈を1つ選べ（戻り値は int）。",
    "note": "Callable[[Arg1, Arg2, ...], Ret] の形式で書く。引数の型列と戻り値の型を指定する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.236Z"
  }
},
{
  "model": "exam.question",
  "pk": 717,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "TypeVar の主目的として正しいものを1つ選べ。",
    "note": "TypeVar('T') で型パラメータを定義。T を通じて入力と出力の型の関係を記述できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.237Z"
  }
},
{
  "model": "exam.question",
  "pk": 718,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Generic を使う場面として最も適切なものを1つ選べ。",
    "note": "class Box(Generic[T]) のように定義し、Box[int] や Box[str] の具体化を表現できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.237Z"
  }
},
{
  "model": "exam.question",
  "pk": 719,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Literal の正しい説明を1つ選べ。",
    "note": "例えば Literal['red', 'green']。列挙に近い“値の制約”を型で表現できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.238Z"
  }
},
{
  "model": "exam.question",
  "pk": 720,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Final の意味として正しいものを1つ選べ。",
    "note": "from typing import Final。変数や属性、メソッドにも用いられる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.239Z"
  }
},
{
  "model": "exam.question",
  "pk": 721,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "TypedDict の目的として正しいものを1つ選べ。",
    "note": "構造的型付けで dict の“形”を示す。必須/任意キーの指定も可能。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.239Z"
  }
},
{
  "model": "exam.question",
  "pk": 722,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Protocol の説明として正しいものを1つ選べ。",
    "note": "Protocol は“このメソッド群を持てばよい”を表す。明示的継承がなくても適合し得る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.240Z"
  }
},
{
  "model": "exam.question",
  "pk": 723,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Annotated の用途として正しいものを1つ選べ。",
    "note": "from typing import Annotated。サードパーティやバリデータ向けメタ情報を格納する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.240Z"
  }
},
{
  "model": "exam.question",
  "pk": 724,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "NewType の正しい説明を1つ選べ。",
    "note": "UserId = NewType('UserId', int) のように使用。実行時は元の型だが、型検査上は別型として扱われる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.241Z"
  }
},
{
  "model": "exam.question",
  "pk": 725,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "NoReturn / Never の説明として適切なものを1つ選べ。",
    "note": "from typing import NoReturn（3.11+ では Never も）。制御が呼び出し元へ返らないことを示す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.242Z"
  }
},
{
  "model": "exam.question",
  "pk": 726,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "Union と Optional の使い分けとして正しいものを1つ選べ。",
    "note": "Optional[T] は Union[T, None] の短縮形。None を含まない場合は Union を使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.242Z"
  }
},
{
  "model": "exam.question",
  "pk": 727,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "cast の正しい説明を1つ選べ。",
    "note": "from typing import cast。ランタイムは単なる恒等関数で副作用はない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.243Z"
  }
},
{
  "model": "exam.question",
  "pk": 728,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "get_type_hints の説明として正しいものを1つ選べ。",
    "note": "前方参照や文字列注釈を解決する。必要に応じてグローバル名前空間を渡す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.244Z"
  }
},
{
  "model": "exam.question",
  "pk": 729,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "前方参照（未定義名を注釈に使う）への対処として適切なものを1つ選べ。",
    "note": "評価時点で未定義な型名は文字列で記述できる。将来の評価に備えるための一般手法。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.244Z"
  }
},
{
  "model": "exam.question",
  "pk": 730,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "ParamSpec の用途として正しいものを1つ選べ。",
    "note": "デコレータなどで Callable の *args/**kwargs の型を保ったまま別シグネチャへ渡すのに使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.245Z"
  }
},
{
  "model": "exam.question",
  "pk": 731,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "overload デコレータの正しい説明を1つ選べ。",
    "note": "typing.overload で複数の宣言を並べ、最後に単一の実装関数を書く。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.245Z"
  }
},
{
  "model": "exam.question",
  "pk": 732,
  "fields": {
    "chapter": 6,
    "kind": "single",
    "stem": "型ヒントと実行時検証の関係として正しいものを1つ選べ。",
    "note": "ヒントは仕様上“非強制”。入力検証や例外処理は別途設計する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.246Z"
  }
},
{
  "model": "exam.question",
  "pk": 733,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列を空白で分割してリストにしたい。正しい方法を1つ選べ。",
    "note": "split() は空白（連続する空白も含む）で区切ってくれる。引数を省略すると空白全般が対象になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.247Z"
  }
},
{
  "model": "exam.question",
  "pk": 734,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "リストの文字列を「, 」で連結したい。正しいコードを1つ選べ。",
    "note": "join は“区切り文字”.join(イテラブル) の形で使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.248Z"
  }
},
{
  "model": "exam.question",
  "pk": 735,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "先頭と末尾の空白だけを取り除きたい。正しいメソッドを1つ選べ。",
    "note": "strip() は前後の空白を除去。lstrip()/rstrip() で片側だけ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.248Z"
  }
},
{
  "model": "exam.question",
  "pk": 736,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列が 'http' で始まるかを調べたい。正しい方法を1つ選べ。",
    "note": "startswith/endswith は読みやすく高速。find==0 でも可能だが意図が伝わりにくい。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.249Z"
  }
},
{
  "model": "exam.question",
  "pk": 737,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "大文字・小文字を無視して比較したい。最も簡単な方法を1つ選べ。",
    "note": "初心者向けには lower() 比較が分かりやすい。より厳密には casefold() が有用なこともある。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.250Z"
  }
},
{
  "model": "exam.question",
  "pk": 738,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列の中の 'cat' を 'dog' にすべて置換したい。正しい方法を1つ選べ。",
    "note": "str.replace(旧, 新)。元の文字列は不変なので新しい文字列を返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.250Z"
  }
},
{
  "model": "exam.question",
  "pk": 739,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "改行を含む長い文章を、70文字程度で自動的に折り返して表示したい。適切な関数を1つ選べ。",
    "note": "textwrap.fill は一行の文字列に整形して返す。折り返しのみのリストが欲しければ wrap を使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.251Z"
  }
},
{
  "model": "exam.question",
  "pk": 740,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "インデント付きの複数行文字列から、共通の先頭空白を一括で取り除きたい。適切な関数を1つ選べ。",
    "note": "textwrap.dedent は各行の共通インデントを除去して整形する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.252Z"
  }
},
{
  "model": "exam.question",
  "pk": 741,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "Unicode コードポイントから文字を作りたい。正しい関数を1つ選べ。",
    "note": "chr(n) はコードポイント n の文字を返す。逆は ord(ch)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.252Z"
  }
},
{
  "model": "exam.question",
  "pk": 742,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "パスや正規表現でバックスラッシュを多用する場合、エスケープを避けて読みやすくしたい。適切なリテラルを1つ選べ。",
    "note": "先頭に r を付ける raw 文字列はバックスラッシュをエスケープしない（末尾に単独の \\ は不可）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.253Z"
  }
},
{
  "model": "exam.question",
  "pk": 743,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "正規表現で 'abc' を文字列の先頭にだけマッチさせたい。適切なパターンを1つ選べ。",
    "note": "^ は行頭アンカー、$ は行末アンカーを表す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.253Z"
  }
},
{
  "model": "exam.question",
  "pk": 744,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "正規表現で数字3桁にマッチするパターンとして正しいものを1つ選べ。",
    "note": "\\d は数字。{3} はちょうど3回の繰り返し。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.254Z"
  }
},
{
  "model": "exam.question",
  "pk": 745,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "re モジュールで最初の1件だけマッチ結果を取りたい。正しい関数を1つ選べ。",
    "note": "search は最初の一致を返す。findall は全マッチのリスト、finditer はイテレータを返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.255Z"
  }
},
{
  "model": "exam.question",
  "pk": 746,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列全体が正規表現パターンに完全一致するか確認したい。最適な関数を1つ選べ。",
    "note": "fullmatch は文字列全体との一致を確認する。match は先頭一致。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.255Z"
  }
},
{
  "model": "exam.question",
  "pk": 747,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "正規表現で大文字小文字を区別せずに検索したい。適切な方法を1つ選べ。",
    "note": "flags に re.IGNORECASE（別名 re.I）を渡す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.256Z"
  }
},
{
  "model": "exam.question",
  "pk": 748,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "re.sub で括弧で囲んだ“キャプチャ”を使って置換したい。適切な置換文字列を1つ選べ（第1グループを参照）。",
    "note": "生文字列 r'\\1' を使うのが安全。\\g<1> 記法でも良い。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.257Z"
  }
},
{
  "model": "exam.question",
  "pk": 749,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "日本語を含む文字列 s を UTF-8 のバイト列にしたい。正しい方法を1つ選べ。",
    "note": "str はテキスト、bytes はバイト列。エンコードで変換する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.257Z"
  }
},
{
  "model": "exam.question",
  "pk": 750,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "UTF-8 のバイト列 b から Python の文字列に戻したい。適切な方法を1つ選べ。",
    "note": "bytes.decode('utf-8') でデコードする。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.258Z"
  }
},
{
  "model": "exam.question",
  "pk": 751,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "改行コードを統一したい。最も簡単な方法を1つ選べ。",
    "note": "Windows の CRLF や古い CR を LF にそろえる簡便な例。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.258Z"
  }
},
{
  "model": "exam.question",
  "pk": 752,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "複数行文字列を 1 行ずつ処理したい。改行を保持せずに分割する最も簡単な方法を1つ選べ。",
    "note": "splitlines() は \\r\\n なども安全に扱う。keepends=True で改行を残すこともできる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.259Z"
  }
},
{
  "model": "exam.question",
  "pk": 753,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "カンマ区切りの文字列 'a,b,,c' を空要素も含めて分割したい。正しい方法を1つ選べ。",
    "note": "区切り文字を明示すると空文字 '' も結果に含まれる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.260Z"
  }
},
{
  "model": "exam.question",
  "pk": 754,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列 'Hello' を中央寄せで幅10に整形したい。正しい方法を1つ選べ。",
    "note": "str.center(width, fillchar=' ') で中央寄せ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.260Z"
  }
},
{
  "model": "exam.question",
  "pk": 755,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "タブ文字をスペースに展開したい。適切なメソッドを1つ選べ。",
    "note": "expandtabs(n) はタブを n スペース相当に展開する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.261Z"
  }
},
{
  "model": "exam.question",
  "pk": 756,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列の一部だけを置換したい。最初の1回だけ 'a' を 'A' にしたい。正しい呼び出しを1つ選べ。",
    "note": "replace の第3引数に最大回数（count）を渡せる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.262Z"
  }
},
{
  "model": "exam.question",
  "pk": 757,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列から数字だけを取り出して結合したい。最も簡単な例を1つ選べ。",
    "note": "内包表記と str.isdigit() を組み合わせるのが手軽。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.262Z"
  }
},
{
  "model": "exam.question",
  "pk": 758,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "ユーザー入力が空文字かどうかを簡単に判定したい。適切な条件を1つ選べ。",
    "note": "空文字 '' は False と評価される。len(s) is 0 は誤り。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.263Z"
  }
},
{
  "model": "exam.question",
  "pk": 759,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "先頭だけ大文字、他を小文字にしたい。正しいメソッドを1つ選べ。",
    "note": "capitalize() は先頭1文字のみ大文字、他は小文字にする。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.263Z"
  }
},
{
  "model": "exam.question",
  "pk": 760,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "単語ごとに先頭を大文字にしたい。適切なメソッドを1つ選べ。",
    "note": "title() は語の先頭を大文字化する（例外もある）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.264Z"
  }
},
{
  "model": "exam.question",
  "pk": 761,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列が数字だけで構成されるか調べたい。適切なメソッドを1つ選べ。",
    "note": "初学者向けには isdigit() が分かりやすい。用途により isnumeric()/isdecimal() も使い分ける。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.265Z"
  }
},
{
  "model": "exam.question",
  "pk": 762,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "複数の置換を一度に行いたい。'&' を '&amp;'、'<' を '&lt;' に変換する簡単な方法を1つ選べ。",
    "note": "str.maketrans で変換表を作り translate に渡すと効率的。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.265Z"
  }
},
{
  "model": "exam.question",
  "pk": 763,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "正規表現で“できるだけ短く”マッチさせたい。量指定子の書き方を1つ選べ。",
    "note": "末尾の ? を付けると“非貪欲（最短一致）”になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.266Z"
  }
},
{
  "model": "exam.question",
  "pk": 764,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "re.compile を使う利点として正しいものを1つ選べ。",
    "note": "同じパターンで何度も検索する場合に読みやすく効率的。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.267Z"
  }
},
{
  "model": "exam.question",
  "pk": 765,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "re.sub の置換で、関数を使って動的に置換文字列を作りたい。適切な呼び出しを1つ選べ。",
    "note": "置換に関数を渡すと、マッチオブジェクト m から自由に生成できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.267Z"
  }
},
{
  "model": "exam.question",
  "pk": 766,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "句読点や記号だけを簡単に取り除きたい。最も手軽な例を1つ選べ。",
    "note": "isalpha だけだと数字や空白も消える。目的に応じて条件を調整する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.268Z"
  }
},
{
  "model": "exam.question",
  "pk": 767,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "空文字を区切りに join するとどうなるか。正しい説明を1つ選べ。",
    "note": "'' .join([...]) は純粋に連結する。要素は文字列でなければならない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.268Z"
  }
},
{
  "model": "exam.question",
  "pk": 768,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "find と index の違いとして正しいものを1つ選べ。",
    "note": "エラー処理の方針に合わせて使い分ける。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.269Z"
  }
},
{
  "model": "exam.question",
  "pk": 769,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "文字列の末尾だけを安全に削りたい。適切なメソッドを1つ選べ。",
    "note": "Python 3.9+ の removesuffix は接尾辞に一致したときだけ取り除く。rstrip は“集合”として扱うので注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.270Z"
  }
},
{
  "model": "exam.question",
  "pk": 770,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "先頭の接頭辞 'pre_' を安全に削りたい。適切なメソッドを1つ選べ。",
    "note": "removeprefix は一致したときのみ除去。lstrip は文字集合扱い。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.270Z"
  }
},
{
  "model": "exam.question",
  "pk": 771,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "英字と数字だけを小文字化したい。適切なコード例を1つ選べ。",
    "note": "条件演算子と isalpha() の組み合わせがシンプル。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.271Z"
  }
},
{
  "model": "exam.question",
  "pk": 772,
  "fields": {
    "chapter": 7,
    "kind": "single",
    "stem": "多言語のテキストを比較する前に、全角と半角を統一したい。標準ライブラリで近い処理を行う関数を1つ選べ。",
    "note": "unicodedata.normalize は文字の互換分解・合成を行う。NFKC は幅や表記の違いをならして比較しやすくする。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.272Z"
  }
},
{
  "model": "exam.question",
  "pk": 773,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "協定世界時(UTC)の\"aware\"な現在時刻を得る正しいコードを1つ選べ。",
    "note": "UTCのawareな現在時刻は datetime.now(timezone.utc)。datetime.utcnow() や datetime.now() はtzinfoが付かずnaiveになる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.273Z"
  }
},
{
  "model": "exam.question",
  "pk": 774,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "Asia/Tokyoの現在時刻(aware)を得る正しいコードを1つ選べ。",
    "note": "標準ライブラリではzoneinfo.ZoneInfoを用いる。文字列をそのままtz引数に渡すことはできない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.273Z"
  }
},
{
  "model": "exam.question",
  "pk": 775,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "ローカルタイムゾーンのawareな日時dtをUTCに変換する正しい方法を1つ選べ。",
    "note": "タイムゾーン間の変換は astimezone を使う。replaceはタイムゾーン情報の付け替えであり時刻の変換は行わない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.274Z"
  }
},
{
  "model": "exam.question",
  "pk": 776,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "ISO 8601形式 '2025-09-28T12:34:56+09:00' をdatetimeに確実に変換する標準手段を1つ選べ。",
    "note": "datetime.fromisoformat はISO 8601の一般的な形式をサポートし、オフセット(+09:00)も解釈してawareなdatetimeを返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.275Z"
  }
},
{
  "model": "exam.question",
  "pk": 777,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "2つの日付dateオブジェクトd1, d2の差を日数で得る正しい方法を1つ選べ。",
    "note": "date同士の減算はtimedeltaを返す。日数はそのdays属性で取得する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.275Z"
  }
},
{
  "model": "exam.question",
  "pk": 778,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "ベンチマークにおける経過時間測定に最も適した関数を1つ選べ。",
    "note": "perf_counterは高分解能・モノトニックな壁時計。time.timeはNTP補正等で後退し得る。process_timeはCPU時間のためsleepを含む計測に不向き。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.276Z"
  }
},
{
  "model": "exam.question",
  "pk": 779,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "UNIXエポック秒(浮動小数)を現在時刻から得る最も単純な方法を1つ選べ。",
    "note": "単純に現在のエポック秒を得るなら time.time()。datetime.now().timestamp() はローカルタイムゾーンの影響で誤りやすいケースがあるため注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.276Z"
  }
},
{
  "model": "exam.question",
  "pk": 780,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "エポック秒tsからUTCのawareなdatetimeを得る正しいコードを1つ選べ。",
    "note": "fromtimestampにtzを渡すのが最も明確。utcfromtimestampはnaive(UTC想定)を返すため、そのままではawareではない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.277Z"
  }
},
{
  "model": "exam.question",
  "pk": 781,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "datetimeオブジェクトdtを 'YYYY-MM-DD' 形式の文字列にする正しい書き方を1つ選べ。",
    "note": "strftimeで書式指定する。%Yは年(4桁)、%mは月(ゼロ埋め2桁)、%dは日(ゼロ埋め2桁)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.278Z"
  }
},
{
  "model": "exam.question",
  "pk": 782,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "日時dtの「その日の0時」に切り詰める正しいコードを1つ選べ。",
    "note": "標準のdatetimeにはtruncate等はない。replaceで時分秒マイクロ秒を0にする。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.278Z"
  }
},
{
  "model": "exam.question",
  "pk": 783,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "タイムゾーン変換とtzinfoの付け替えに関する正しい記述を1つ選べ。",
    "note": "replaceはtzinfoを差し替えるだけで、実際の壁時計時刻は変化しない。変換は常にastimezoneで行う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.279Z"
  }
},
{
  "model": "exam.question",
  "pk": 784,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "月曜=0の曜日番号を返すメソッドを1つ選べ。",
    "note": "datetime.weekday()は月曜=0, 日曜=6。isoweekday()は月曜=1, 日曜=7。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.280Z"
  }
},
{
  "model": "exam.question",
  "pk": 785,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "日付の範囲[開始日, 終了日]を1日ずつ反復する最もシンプルな方法を1つ選べ。",
    "note": "標準に日付イテレータは用意されていないため、timedelta(days=1)で進めるのが基本。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.280Z"
  }
},
{
  "model": "exam.question",
  "pk": 786,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "夏時間切替で同一ローカル時刻が2回現れる曖昧時刻への対処に関する正しい説明を1つ選べ。",
    "note": "Python 3.6+のPEP 495でfoldが導入。zoneinfoもfoldを参照して曖昧さを解決する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.281Z"
  }
},
{
  "model": "exam.question",
  "pk": 787,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "標準ライブラリのタイムゾーンサポートに関する正しい記述を1つ選べ。",
    "note": "zoneinfoはIANA TZデータベースを利用する。環境によってはタイムゾーンデータの提供が必要になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.281Z"
  }
},
{
  "model": "exam.question",
  "pk": 788,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "ローカル時刻の整形でtimeモジュールを使う正しい例を1つ選べ。",
    "note": "time.strftime(format, struct_time)。ローカル時刻はtime.localtime()で得る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.282Z"
  }
},
{
  "model": "exam.question",
  "pk": 789,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "タイムゾーンオフセット付き文字列 '2025-09-28 12:34:56 +0900' をdatetimeにする正しい方法を1つ選べ。",
    "note": "%zは+HHMM形式の数値オフセットを解釈する。%Zはタイムゾーン名(例:'UTC','JST')に依存し移植性が低い。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.283Z"
  }
},
{
  "model": "exam.question",
  "pk": 790,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "naiveなdatetimeとawareなdatetimeの大小比較に関する正しい説明を1つ選べ。",
    "note": "PEP 495以降でも、naiveとawareの比較は未定義でTypeError。比較前に統一すること。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.283Z"
  }
},
{
  "model": "exam.question",
  "pk": 791,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "ISOカレンダー(ISO年・週・曜日)を得る標準APIの正しい説明を1つ選べ。",
    "note": "Python 3.9+ではnamedtupleライクなオブジェクト(属性名: year, week, weekday)が返る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.284Z"
  }
},
{
  "model": "exam.question",
  "pk": 792,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "ISO 8601の文字列を生成する簡便な方法として正しいものを1つ選べ。",
    "note": "datetime.isoformat() は日付・時刻・オフセットを含むISO 8601に準じた文字列を返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.285Z"
  }
},
{
  "model": "exam.question",
  "pk": 793,
  "fields": {
    "chapter": 9,
    "kind": "single",
    "stem": "sleep中も含めた経過時間の計測に不適切な関数を1つ選べ。",
    "note": "process_timeはCPU時間のみを測るため、sleepや待機を含む実時間計測には不適切。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.285Z"
  }
},
{
  "model": "exam.question",
  "pk": 794,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "リストに要素を末尾追加する最も基本的なメソッドを1つ選べ。",
    "note": "リスト末尾への単一要素追加は append。extend はイテラブルを展開して複数追加。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.287Z"
  }
},
{
  "model": "exam.question",
  "pk": 795,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "タプルの性質として正しいものを1つ選べ。",
    "note": "タプルは不変で順序を持つ。要素がすべてハッシュ可能であれば辞書キーにできる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.287Z"
  }
},
{
  "model": "exam.question",
  "pk": 796,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`list.extend(iterable)` の説明として正しいものを1つ選べ。",
    "note": "extend はイテラブルを展開して複数要素を追加する。単一要素追加は append。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.288Z"
  }
},
{
  "model": "exam.question",
  "pk": 797,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "集合(set)に関する説明として正しいものを1つ選べ。",
    "note": "set は重複を持たず順序は保証されない。ミュータブルでインデックスアクセス不可。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.288Z"
  }
},
{
  "model": "exam.question",
  "pk": 798,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書 `d` にキー `k` が存在しない場合、既定値を返しつつ取得する方法として正しいものを1つ選べ。",
    "note": "get はキーが無いときに例外を出さず既定値を返す。`d[k]` は KeyError を発生させる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.289Z"
  }
},
{
  "model": "exam.question",
  "pk": 799,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`dict.setdefault(key, default)` の動作として正しいものを1つ選べ。",
    "note": "setdefault は存在しない場合に挿入してその値を返す。既にある場合は元の値を返すだけ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.290Z"
  }
},
{
  "model": "exam.question",
  "pk": 800,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`collections.Counter` で最頻出要素を上位 N 個取得するメソッドを1つ選べ。",
    "note": "Counter.most_common(N) は (要素, カウント) のタプルを降順で返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.290Z"
  }
},
{
  "model": "exam.question",
  "pk": 801,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`collections.defaultdict(list)` の主な利点として正しいものを1つ選べ。",
    "note": "defaultdict は欠損キーに対してデフォルトファクトリで値を自動生成する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.291Z"
  }
},
{
  "model": "exam.question",
  "pk": 802,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`collections.deque` の特長として正しいものを1つ選べ。",
    "note": "deque は両端操作が効率的。任意位置操作はリストと同様に高コストになり得る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.292Z"
  }
},
{
  "model": "exam.question",
  "pk": 803,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "ソートに関する説明として正しいものを1つ選べ。",
    "note": "list.sort は就地(in-place)で安定。sorted は新しいリストを返し、どちらも key と reverse を併用可能。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.292Z"
  }
},
{
  "model": "exam.question",
  "pk": 804,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`sorted(items, key=len)` の意味として正しいものを1つ選べ。",
    "note": "key 関数で比較キーを指定できる。len を指定すると長さ基準で昇順整列。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.293Z"
  }
},
{
  "model": "exam.question",
  "pk": 805,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`heapq` の用途として最も適切なものを1つ選べ。",
    "note": "heapq は最小ヒープを提供し、最小要素の取り出しや挿入が効率的。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.293Z"
  }
},
{
  "model": "exam.question",
  "pk": 806,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "リスト内包表記に関する説明として正しいものを1つ選べ。",
    "note": "内包表記は新しいコレクションを返す。辞書内包・集合内包も存在する。ジェネレータ式はイテレータを返す点が異なる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.294Z"
  }
},
{
  "model": "exam.question",
  "pk": 807,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書ビュー `d.items()` の性質として正しいものを1つ選べ。",
    "note": "items は動的ビューを返す。ハッシュ可能ではなく集合要素には直接できない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.295Z"
  }
},
{
  "model": "exam.question",
  "pk": 808,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`itertools.accumulate(iterable)` の既定動作として正しいものを1つ選べ。",
    "note": "accumulate は既定で加算の累積結果を生成。func を渡して他の演算に変えられる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.295Z"
  }
},
{
  "model": "exam.question",
  "pk": 809,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`itertools.groupby` の前提として正しいものを1つ選べ。",
    "note": "groupby は隣接する同一キーをまとめるため、通常はキーで事前ソートする。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.296Z"
  }
},
{
  "model": "exam.question",
  "pk": 810,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "集合演算で A ∩ B に相当するメソッドを1つ選べ。",
    "note": "intersection は共通部分。union は和、difference は差、symmetric_difference は排他的和集合。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.297Z"
  }
},
{
  "model": "exam.question",
  "pk": 811,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書のキー存在確認として最も明示的で推奨される文を1つ選べ。",
    "note": "存在確認は `in` が明確。get は偽値が入る場合に誤判定になり得る。`d[key]` は存在しないと例外。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.297Z"
  }
},
{
  "model": "exam.question",
  "pk": 812,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "リストから要素を値で1回だけ削除するメソッドを1つ選べ。",
    "note": "remove は最初に見つかった値 x を削除。pop はインデックス指定(既定は末尾)で要素を取り出す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.298Z"
  }
},
{
  "model": "exam.question",
  "pk": 813,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "リストのシャローコピーとして正しいものを1つ選べ。",
    "note": "スライス全体、list(old)、copy.copy(old) などは浅いコピー。代入は同一オブジェクト参照。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.298Z"
  }
},
{
  "model": "exam.question",
  "pk": 814,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`max(items, key=func)` の説明として正しいものを1つ選べ。",
    "note": "key には単項関数を渡し、比較キーを指定する。min でも同様に利用可。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.299Z"
  }
},
{
  "model": "exam.question",
  "pk": 815,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "タプルのアンパックで swap する正しい例を1つ選べ。",
    "note": "Python ではタプルの並行代入で簡潔に値を交換できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.300Z"
  }
},
{
  "model": "exam.question",
  "pk": 816,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`enumerate(iterable, start=1)` の効果として正しいものを1つ選べ。",
    "note": "enumerate は惰性的なイテレータを返し、開始値を指定できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.300Z"
  }
},
{
  "model": "exam.question",
  "pk": 817,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "集合のメソッドで、要素があれば削除し、無ければ何もしないものを1つ選べ。",
    "note": "remove は存在しないと KeyError、discard は安全に無視する。pop は任意の要素を1つ取り出す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.301Z"
  }
},
{
  "model": "exam.question",
  "pk": 818,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "リスト結合の計算量の観点で効率がよいのはどれか。多数回連結する場合を想定する。",
    "note": "`a = a + b` は新リストを毎回生成して高コスト。反復追加や `extend` が一般に効率的。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.301Z"
  }
},
{
  "model": "exam.question",
  "pk": 819,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`any(iterable)` の返り値として正しいものを1つ選べ。",
    "note": "any は論理和、all は論理積の振る舞いをする。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.302Z"
  }
},
{
  "model": "exam.question",
  "pk": 820,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`zip(a, b)` の基本的な性質として正しいものを1つ選べ。",
    "note": "zip はイテレータを返し、最短長で停止する。長さを揃えるには itertools.zip_longest。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.303Z"
  }
},
{
  "model": "exam.question",
  "pk": 821,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書の結合として推奨される表記を1つ選べ。(Python 3.9+)",
    "note": "3.9 以降は辞書の和演算子 `|`、就地更新は `|=` が使える。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.303Z"
  }
},
{
  "model": "exam.question",
  "pk": 822,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "同じキーに対して複数値を集約したい。最も簡潔に書けるのはどれか。",
    "note": "defaultdict(list) によって存在しないキーでも append がそのまま書ける。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.304Z"
  }
},
{
  "model": "exam.question",
  "pk": 823,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`itertools.product('ab', 'xy')` の出力として正しいものを1つ選べ。",
    "note": "直積は全ての組み合わせを生成する。返り値はイテレータ(ここではリスト例示)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.305Z"
  }
},
{
  "model": "exam.question",
  "pk": 824,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "最小 N 要素を効率よく取得したい。適切な関数を1つ選べ。",
    "note": "heapq.nsmallest/nlargest は全体ソートよりも効率的な場合がある。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.305Z"
  }
},
{
  "model": "exam.question",
  "pk": 825,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書内包表記の正しい例を1つ選べ。",
    "note": "辞書内包表記は {key: value for ...} の形を取る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.306Z"
  }
},
{
  "model": "exam.question",
  "pk": 826,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`set` における部分集合判定として正しいものを1つ選べ。",
    "note": "issubset / issuperset で包含関係を判定できる。演算子は提供されない(比較演算の `<` は可能だが記号入力は不可)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.307Z"
  }
},
{
  "model": "exam.question",
  "pk": 827,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "イテレータを一度だけ消費して合計・件数・平均を求めたい。最も適切なアプローチを1つ選べ。",
    "note": "イテレータは一度きりなので1パスで集計する。mean はイテラブルにより内部で複製する可能性がある。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.307Z"
  }
},
{
  "model": "exam.question",
  "pk": 828,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "複数のイテラブルを連結して一つのシーケンスとして反復したい。適切な関数を1つ選べ。",
    "note": "chain は遅延的に複数イテラブルを連結するイテレータを返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.308Z"
  }
},
{
  "model": "exam.question",
  "pk": 829,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`range(5)` の性質として正しいものを1つ選べ。",
    "note": "range は不変シーケンスでスライスや in 演算が効率的に動作する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.308Z"
  }
},
{
  "model": "exam.question",
  "pk": 830,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書のキー反復順序に関する説明で正しいものを1つ選べ。(Python 3.7+)",
    "note": "Python 3.7 以降、言語仕様として辞書は挿入順を保持する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.309Z"
  }
},
{
  "model": "exam.question",
  "pk": 831,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`sorted(d.items(), key=lambda kv: kv[1], reverse=True)` が行うこととして正しいものを1つ選べ。",
    "note": "sorted は新しいリストを返す。辞書自体の順序は変わらない(3.7+ で挿入順保持)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.310Z"
  }
},
{
  "model": "exam.question",
  "pk": 832,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "多重ループの直積を簡潔に表現したい。適切な関数を1つ選べ。",
    "note": "product はネストされた for の直積を生成する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.310Z"
  }
},
{
  "model": "exam.question",
  "pk": 833,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "要素の頻度カウントを最も簡潔に行う方法を1つ選べ。",
    "note": "Counter は頻度集計に特化しており簡潔で高速。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.311Z"
  }
},
{
  "model": "exam.question",
  "pk": 834,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`tuple` と `namedtuple` の違いとして正しいものを1つ選べ。",
    "note": "namedtuple は不変でタプル互換に加え、属性名アクセスが可能。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.312Z"
  }
},
{
  "model": "exam.question",
  "pk": 835,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`array.array('f')` の特徴として正しいものを1つ選べ。",
    "note": "array は型コードに応じた連続メモリを持ち、リストよりメモリ効率が良い(同種データ)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.312Z"
  }
},
{
  "model": "exam.question",
  "pk": 836,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "列挙を表現する標準ライブラリとして正しいものを1つ選べ。",
    "note": "列挙型は enum モジュールで提供される。Flag はビット演算向けの列挙。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.313Z"
  }
},
{
  "model": "exam.question",
  "pk": 837,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "安定なマージ(マージソートの部分操作)を行いたい。二つの昇順リストを効率よく一つにする関数を1つ選べ。",
    "note": "heapq.merge はすでにソート済みの複数イテラブルを昇順マージする遅延イテレータ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.313Z"
  }
},
{
  "model": "exam.question",
  "pk": 838,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "複製せずにイテラブルを n 回繰り返し反復したい。適切な関数を1つ選べ。",
    "note": "repeat は同一オブジェクト参照を n 回生成するイテレータ。シーケンスの `* n` は複製を生成する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.314Z"
  }
},
{
  "model": "exam.question",
  "pk": 839,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`itertools.combinations(iterable, r)` の性質として正しいものを1つ選べ。",
    "note": "順列は permutations、重複組合せは combinations_with_replacement を用いる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.315Z"
  }
},
{
  "model": "exam.question",
  "pk": 840,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "キーが存在しないときのみ代入したい。辞書で適切な表記を1つ選べ。(3.8+)",
    "note": "Python には ?= は無い。setdefault が「無ければ代入」を1行で表現できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.315Z"
  }
},
{
  "model": "exam.question",
  "pk": 841,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "ソートキーを複数指定したい。最も簡潔な方法を1つ選べ。",
    "note": "タプルキーを返す関数を key に渡す。cmp は Python 3 では非推奨/未サポート。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.316Z"
  }
},
{
  "model": "exam.question",
  "pk": 842,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "最大ヒープを実現したい。`heapq` を使う場合の一般的な方法を1つ選べ。",
    "note": "heapq は最小ヒープのみ。最大ヒープは -value で代替するのが定石(または (key, item) タプル)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.317Z"
  }
},
{
  "model": "exam.question",
  "pk": 843,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`collections.ChainMap` の用途として正しいものを1つ選べ。",
    "note": "ChainMap はビューの合成であり、実体のコピーを作らない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.317Z"
  }
},
{
  "model": "exam.question",
  "pk": 844,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "スライス `a[::-1]` の意味として正しいものを1つ選べ。",
    "note": "負のステップで逆順の新しいシーケンスを作る。就地反転は list.reverse()。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.318Z"
  }
},
{
  "model": "exam.question",
  "pk": 845,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`sorted(iterable, key=str.lower)` の効果として正しいものを1つ選べ。",
    "note": "key 関数は比較キーのみを変換するため、元データは変わらない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.318Z"
  }
},
{
  "model": "exam.question",
  "pk": 846,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "二分探索木やヒープのように、挿入・最小値取得が対数時間となる構造はどれか。",
    "note": "heapq の挿入・取り出しは O(log n)。set/dict の平均探索はハッシュで O(1)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.319Z"
  }
},
{
  "model": "exam.question",
  "pk": 847,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "二つの辞書で、キーが重なる場合は右側を優先してマージしたい。最も簡潔な書き方はどれか。(3.9+)",
    "note": "`|` は右側優先で新辞書を返す。`{**d1, **d2}` でも右側優先だが 3.9+ の演算子が簡潔。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.320Z"
  }
},
{
  "model": "exam.question",
  "pk": 848,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "反復可能オブジェクトを一度だけ先読みして最初の要素と残りに分けたい。適切な関数を1つ選べ。",
    "note": "tee は独立イテレータを複製するがメモリに溜まり得る。`first = next(it); rest = it` が簡潔。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.320Z"
  }
},
{
  "model": "exam.question",
  "pk": 849,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`dict.fromkeys(['a','b'], 0)` の結果で正しいものを1つ選べ。",
    "note": "第二引数が省略されると None、指定した場合は全キーにその同一オブジェクトが割当てられる点に注意(ミュータブルは避ける)。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.321Z"
  }
},
{
  "model": "exam.question",
  "pk": 850,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "大規模なテキストのユニーク単語集合を得る最も簡潔な方法を1つ選べ。",
    "note": "単純なユニーク化は set が簡潔。順序保持したユニークは dict.fromkeys などを使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.322Z"
  }
},
{
  "model": "exam.question",
  "pk": 851,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "可変デフォルト引数にリストを使うときの推奨手法として正しいものを1つ選べ。",
    "note": "ミュータブル既定値は関数定義時に1度だけ生成され共有されるためバグの元。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.322Z"
  }
},
{
  "model": "exam.question",
  "pk": 852,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "キーが存在する場合のみ削除して値を取得する辞書操作を1つ選べ。",
    "note": "pop は削除と取得を同時に行い、第二引数で既定値も指定できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.323Z"
  }
},
{
  "model": "exam.question",
  "pk": 853,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "複数の条件でフィルタしてからマップしたい。効率の観点で適切な順序を1つ選べ。",
    "note": "要素数を減らしてから変換する方が一般に効率的。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.323Z"
  }
},
{
  "model": "exam.question",
  "pk": 854,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "平均値や中央値などの統計を少メモリで逐次計算したい。適切なアプローチを1つ選べ。",
    "note": "ストリーム処理では一度に保持するデータを最小化するのが要点。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.324Z"
  }
},
{
  "model": "exam.question",
  "pk": 855,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "キー関数をキャッシュして高速化したいときのテクニックとして正しいものを1つ選べ。",
    "note": "高価な key 計算で同じ要素を繰り返し評価する場合に効果があることがある。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.325Z"
  }
},
{
  "model": "exam.question",
  "pk": 856,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書で値の初期化と加算を一行で行いたい。最も簡潔な書き方はどれか。",
    "note": "存在しないキーに対しては get で既定値を用いる。`++` 演算子は Python には無い。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.325Z"
  }
},
{
  "model": "exam.question",
  "pk": 857,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "部分列の走査でウィンドウ幅を固定して滑らせたい。最も適切な実装の方針を1つ選べ。",
    "note": "固定長の移動窓は deque(maxlen) が簡潔で効率的。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.326Z"
  }
},
{
  "model": "exam.question",
  "pk": 858,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "大きな JSON 行ストリームのうち、条件に合う最初の1件だけ欲しい。適切な記述を1つ選べ。",
    "note": "ストリームは惰性的に処理し、見つかったら break するのがメモリ効率良い。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.327Z"
  }
},
{
  "model": "exam.question",
  "pk": 859,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`itertools.islice(it, 5, 10)` の意味として正しいものを1つ選べ。",
    "note": "islice は開始・停止・ステップでイテレータから部分列を生成する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.327Z"
  }
},
{
  "model": "exam.question",
  "pk": 860,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書の値がリストの場合、全要素を平坦化した1本のリストが欲しい。最も簡潔な記述を1つ選べ。",
    "note": "二重内包表記が分かりやすい。chain.from_iterable(d.values()) も有力。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.328Z"
  }
},
{
  "model": "exam.question",
  "pk": 861,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "既知サイズのトップK最大値を逐次的にキープする最も効率的な方法を1つ選べ。",
    "note": "サイズ K の最小ヒープで上位 K を保つのが典型解法。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.328Z"
  }
},
{
  "model": "exam.question",
  "pk": 862,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書の値に対して一括変換を行い、新しい辞書を得たい。適切な書き方を1つ選べ。",
    "note": "辞書内包表記が簡潔で明瞭。map はキーのみを走査するため不適切。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.329Z"
  }
},
{
  "model": "exam.question",
  "pk": 863,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`sorted(seq, key=lambda s: (len(s), s))` の効果として正しいものを1つ選べ。",
    "note": "タプルキーで第1・第2キーの優先度を簡潔に指定できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.330Z"
  }
},
{
  "model": "exam.question",
  "pk": 864,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "巨大なCSVの各行を逐次処理しつつ、条件一致の件数だけを数えたい。推奨される方法を1つ選べ。",
    "note": "内包表記でリスト化せず、ジェネレータ式で件数を集計するとメモリ効率が良い。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.330Z"
  }
},
{
  "model": "exam.question",
  "pk": 865,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書 `d` のすべての値が 0 以下か判定する最も簡潔な式を1つ選べ。",
    "note": "all と内包表記/ジェネレータ式の組み合わせが簡潔で高速。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.331Z"
  }
},
{
  "model": "exam.question",
  "pk": 866,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "集合の対称差 A △ B に対応するメソッド/演算子を1つ選べ。",
    "note": "対称差はどちらか一方にのみある要素の集合。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.332Z"
  }
},
{
  "model": "exam.question",
  "pk": 867,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "辞書のキー・値を入れ替えた新辞書を得たい。値が重複し得る場合の安全な方法を1つ選べ。",
    "note": "値が重複するなら多値マップ化が必要。defaultdict(list) が有効。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.332Z"
  }
},
{
  "model": "exam.question",
  "pk": 868,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "二つのソート済みリストから共通要素を線形時間で抽出したい。適切な方針を1つ選べ。",
    "note": "二本指法は O(n+m)。set 演算は平均 O(n+m) だが順序情報は失われる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.333Z"
  }
},
{
  "model": "exam.question",
  "pk": 869,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "`collections.OrderedDict` の説明として正しいものを1つ選べ。(3.7+ の辞書仕様を踏まえて)",
    "note": "3.7+ では通常の dict も挿入順保持。OrderedDict は move_to_end 等の追加機能が必要な場合に選択。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.333Z"
  }
},
{
  "model": "exam.question",
  "pk": 870,
  "fields": {
    "chapter": 10,
    "kind": "single",
    "stem": "重複のない順序付きユニーク化(出現順を保持)の簡潔な方法を1つ選べ。(3.7+)",
    "note": "fromkeys は挿入順を利用して順序付きユニークを実現できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.334Z"
  }
},
{
  "model": "exam.question",
  "pk": 871,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "現在の作業ディレクトリを取得する標準的な関数を1つ選べ。",
    "note": "文字列でCWDを得るのは os.getcwd()。os.getcwdb() は bytes を返す。Path.home() はホームディレクトリ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.335Z"
  }
},
{
  "model": "exam.question",
  "pk": 872,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "環境変数FOOを安全に取得し、未設定なら'NA'を返す方法として正しいものを1つ選べ。",
    "note": "環境変数は os.environ または os.getenv で扱う。KeyErrorを避けるには get を使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.336Z"
  }
},
{
  "model": "exam.question",
  "pk": 873,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "サブプロセスの実行において、非0終了コードで例外を投げさせたい場合の指定として正しいものを1つ選べ。",
    "note": "run(..., check=True) は非0コードで CalledProcessError を送出する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.336Z"
  }
},
{
  "model": "exam.question",
  "pk": 874,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "subprocess.runで標準出力を文字列として同時取得する最も簡潔な指定を1つ選べ。",
    "note": "capture_output=True と text=True（または encoding=...）で CompletedProcess.stdout に文字列が入る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.337Z"
  }
},
{
  "model": "exam.question",
  "pk": 875,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "sys.exit(1) を呼ぶと何が起こるか。最も適切な説明を1つ選べ。",
    "note": "sys.exit は SystemExit を送出する。未捕捉なら終了。finally句は実行される点に注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.338Z"
  }
},
{
  "model": "exam.question",
  "pk": 876,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "環境変数PATHに依存して実行可能ファイルのフルパスを探索する関数を1つ選べ。",
    "note": "実行可能ファイル検索は shutil.which。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.338Z"
  }
},
{
  "model": "exam.question",
  "pk": 877,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "カレントプロセスのPIDを取得する関数として正しいものを1つ選べ。",
    "note": "PIDは os.getpid() で取得する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.339Z"
  }
},
{
  "model": "exam.question",
  "pk": 878,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "一時ディレクトリを作成し、withブロック終了時に自動削除させたい。適切な選択を1つ選べ。",
    "note": "TemporaryDirectory はコンテキストマネージャで自動クリーンアップする。mkdtemp は tempfile.mkdtemp。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.340Z"
  }
},
{
  "model": "exam.question",
  "pk": 879,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "subprocess.runでシェルの機能（パイプやリダイレクト）を使いたい場合の設定として正しいものを1つ選べ。",
    "note": "シェル機能を使う場合は shell=True。セキュリティ上、外部入力を決して直結しないこと。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.340Z"
  }
},
{
  "model": "exam.question",
  "pk": 880,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "プラットフォーム識別で\"Windows\"かどうかを最も移植性高く判定する方法を1つ選べ。",
    "note": "高レベルには platform.system() を使う。sys.platform は 'win32' などとなり等価判定がやや煩雑。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.341Z"
  }
},
{
  "model": "exam.question",
  "pk": 881,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "カレントディレクトリを変更する標準関数として正しいものを1つ選べ。",
    "note": "CWDの変更は os.chdir。pathlib に chdir はない（Path.cwd() は取得のみ）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.341Z"
  }
},
{
  "model": "exam.question",
  "pk": 882,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "subprocessで標準入力にデータを渡したい。正しい指定を1つ選べ。",
    "note": "run(..., input=...) でstdinに渡せる。text=True なら文字列、デフォルトはbytes。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.342Z"
  }
},
{
  "model": "exam.question",
  "pk": 883,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "PATHなどの環境を変更した状態でサブプロセスを起動したい。適切な方法を1つ選べ。",
    "note": "サブプロセス専用の環境辞書を作り env 引数に渡す。親プロセスの環境を書き換えないのが安全。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.343Z"
  }
},
{
  "model": "exam.question",
  "pk": 884,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "os.execv を呼ぶと何が起こるか。最も正しい説明を1つ選べ。",
    "note": "exec系はプロセス置換であり、forkのように子を作らない。戻り値はない（例外時のみ戻る）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.343Z"
  }
},
{
  "model": "exam.question",
  "pk": 885,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "Unix系限定のAPIを1つ選べ。",
    "note": "os.fork はPOSIX限定。Windowsには存在しない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.344Z"
  }
},
{
  "model": "exam.question",
  "pk": 886,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "ディスク使用量（total, used, free）を取得する関数として正しいものを1つ選べ。",
    "note": "shutil.disk_usage は (total, used, free) のタプルを返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.345Z"
  }
},
{
  "model": "exam.question",
  "pk": 887,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "umaskの説明として正しいものを1つ選べ。",
    "note": "os.umask は作成時パーミッションに影響する。既存ファイルには影響しない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.345Z"
  }
},
{
  "model": "exam.question",
  "pk": 888,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "signalモジュールの注意点として正しいものを1つ選べ。",
    "note": "signal.signalはメインスレッドで使う。SIGKILL/STOPは捕捉不可。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.346Z"
  }
},
{
  "model": "exam.question",
  "pk": 889,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "sys.pathを操作するとどうなるか。正しい説明を1つ選べ。",
    "note": "sys.path はインポート解決に用いるリストで、プロセスローカルの変更に留まる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.347Z"
  }
},
{
  "model": "exam.question",
  "pk": 890,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "pathlib.Path と os.path の対応として正しいものを1つ選べ。",
    "note": "Path.cwd() はCWD取得。existsはメソッド。joinは / 演算子や joinpath を使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.347Z"
  }
},
{
  "model": "exam.question",
  "pk": 891,
  "fields": {
    "chapter": 11,
    "kind": "single",
    "stem": "subprocess.runでタイムアウトを設定し、時間超過時に例外を発生させたい。正しい指定を1つ選べ。",
    "note": "timeout秒を超えると TimeoutExpired が送出される。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.348Z"
  }
},
{
  "model": "exam.question",
  "pk": 892,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "テキストファイルをUTF-8で一括読み込みする最も簡潔な方法を1つ選べ。",
    "note": "Path.read_text(encoding=...) は簡潔。open(...) でもよいが明示的なエンコーディング指定が推奨。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.349Z"
  }
},
{
  "model": "exam.question",
  "pk": 893,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "バイト列をファイルに書き込む最も簡潔な方法を1つ選べ。",
    "note": "Path.write_bytes はバイナリ書き込みのユーティリティ。openで書く場合は 'wb' が必要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.349Z"
  }
},
{
  "model": "exam.question",
  "pk": 894,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "存在しない中間ディレクトリも含めてディレクトリを作成する適切な方法を1つ選べ。",
    "note": "mkdir(parents=True) で再帰作成。exist_ok=True で既存でも例外にしない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.350Z"
  }
},
{
  "model": "exam.question",
  "pk": 895,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "カレントディレクトリ直下の“ファイルのみ”を列挙するコードとして正しいものを1つ選べ。",
    "note": "iterdir() は直下のみ。is_file() でファイルに限定。glob('**/*') は再帰になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.351Z"
  }
},
{
  "model": "exam.question",
  "pk": 896,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "ディレクトリ配下から拡張子 .py のファイルを再帰的に探す最も簡潔な方法を1つ選べ。",
    "note": "rglob は再帰検索。glob('*.py') は非再帰、os.walk は自前のフィルタが必要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.351Z"
  }
},
{
  "model": "exam.question",
  "pk": 897,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "通常ファイルを削除する適切なAPIを1つ選べ。",
    "note": "unlink はファイル・シンボリックリンクの削除。rmdir は空ディレクトリ用。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.352Z"
  }
},
{
  "model": "exam.question",
  "pk": 898,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "中身のあるディレクトリを再帰的に削除するAPIとして正しいものを1つ選べ。",
    "note": "rmtree は非空ディレクトリを再帰削除。rmdir は空でないと失敗する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.353Z"
  }
},
{
  "model": "exam.question",
  "pk": 899,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "既存ファイルがあっても上書きしてリネーム（移動）したい。適切なAPIを1つ選べ。",
    "note": "Path.replace は宛先が存在しても置換。rename は環境により上書き失敗の可能性がある。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.353Z"
  }
},
{
  "model": "exam.question",
  "pk": 900,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "コピー時にメタデータ（mtime 等）もできるだけ保持したい。適切な関数を1つ選べ。",
    "note": "copy2 はメタデータも可能な限りコピー。copy/copyfile は主に内容のみ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.354Z"
  }
},
{
  "model": "exam.question",
  "pk": 901,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "絶対パスを得たい。シンボリックリンク解決も行う方法を1つ選べ。",
    "note": "Path.resolve は絶対化し、可能ならリンク解決も行う。basename は末尾名の取得。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.354Z"
  }
},
{
  "model": "exam.question",
  "pk": 902,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "ファイルを開く前に親ディレクトリを必ず作成したい。適切なコードを1つ選べ。",
    "note": "mkdir はディレクトリに対して行う。親パスは p.parent で取得して作成する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.355Z"
  }
},
{
  "model": "exam.question",
  "pk": 903,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "ファイルパーミッションを 0644 に変更する適切な方法を1つ選べ。",
    "note": "chmod は数値（8進）で指定する。文字列ではない点に注意（0o644）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.356Z"
  }
},
{
  "model": "exam.question",
  "pk": 904,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "壊れたシンボリックリンクも“存在あり”として判定したい。適切な関数を1つ選べ。",
    "note": "lexists は壊れたリンクでも True。exists はリンク先が無いと False になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.356Z"
  }
},
{
  "model": "exam.question",
  "pk": 905,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "標準入力や複数ファイルを透過的に順に読むユーティリティを1つ選べ。",
    "note": "fileinput は複数ファイル／標準入力の一括処理に便利。for line in fileinput.input(): ...",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.357Z"
  }
},
{
  "model": "exam.question",
  "pk": 906,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "大きな読み取り専用ファイルをメモリマップして効率よくアクセスしたい。適切なコードを1つ選べ。",
    "note": "mmap はファイル記述子とサイズ（0は全体）を指定。access=mmap.ACCESS_READ で読取専用。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.358Z"
  }
},
{
  "model": "exam.question",
  "pk": 907,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "一時ファイルに書いてから原子的に置き換える“安全な保存”の基本手順として最も適切なものを1つ選べ。",
    "note": "書き込み→fsync→os.replace が基本。replace は同一ファイルシステム内で原子的に置換する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.358Z"
  }
},
{
  "model": "exam.question",
  "pk": 908,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "ディレクトリツリーを走査してファイル・ディレクトリを取得する代表的APIを1つ選べ。",
    "note": "os.walk はトップから再帰的に (dirpath, dirnames, filenames) を生成するイテレータ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.359Z"
  }
},
{
  "model": "exam.question",
  "pk": 909,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "2つのファイルの内容が同一かどうかを正確に（メタデータではなく内容で）判定したい。適切な関数を1つ選べ。",
    "note": "filecmp.cmp(shallow=False) は実データを比較。stat 比較は内容一致を保証しない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.359Z"
  }
},
{
  "model": "exam.question",
  "pk": 910,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "ホームディレクトリを含むパス表記 ~/config を展開する適切な方法を1つ選べ。",
    "note": "expanduser は ~ をユーザのホームに展開。expandvars は環境変数の展開。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.360Z"
  }
},
{
  "model": "exam.question",
  "pk": 911,
  "fields": {
    "chapter": 12,
    "kind": "single",
    "stem": "ワイルドカードで現在のディレクトリにある拡張子 .txt のみを“非再帰”で取得する方法として最も適切なものを1つ選べ。",
    "note": "Path.glob('*.txt') は直下のみ。rglob や '**/*.txt' は再帰検索になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.361Z"
  }
},
{
  "model": "exam.question",
  "pk": 912,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "JSON文字列 s をPythonオブジェクトに変換する標準的な関数を1つ選べ。",
    "note": "文字列→オブジェクトは json.loads。json.load はファイルオブジェクトから読み込む。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.362Z"
  }
},
{
  "model": "exam.question",
  "pk": 913,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "辞書 obj をJSONとしてUTF-8でファイルへ書き出す正しいコードを1つ選べ。",
    "note": "ファイル書き出しは json.dump。日本語をそのまま出すなら ensure_ascii=False。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.362Z"
  }
},
{
  "model": "exam.question",
  "pk": 914,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "JSONでインデント整形して可読性を上げたい。適切な指定を1つ選べ。",
    "note": "indent=数値 で整形。dumps でも同様に indent を指定できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.363Z"
  }
},
{
  "model": "exam.question",
  "pk": 915,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "JSONの日付型をそのままダンプできない理由として最も適切なものを1つ選べ。",
    "note": "datetimeは直接シリアライズ不可。ISO8601文字列などへ変換するカスタムエンコーダが必要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.363Z"
  }
},
{
  "model": "exam.question",
  "pk": 916,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "CSVを1行ずつ辞書形式で読みたい。最も簡潔なAPIを1つ選べ。",
    "note": "DictReader は1行をヘッダ→値の辞書として返す。DictWriterは書き込み用。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.364Z"
  }
},
{
  "model": "exam.question",
  "pk": 917,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "CSV書き出し時にExcelでダブルクリック開きを想定する。改行コードとして適切なものを1つ選べ。",
    "note": "Pythonのcsvはプラットフォーム依存の改行重複を避けるため、open に newline='' を指定するのが推奨。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.365Z"
  }
},
{
  "model": "exam.question",
  "pk": 918,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "CSVでカンマを含むフィールドを安全に出力するための正しい方法を1つ選べ。",
    "note": "csv.writer は必要に応じて引用符でエスケープする。手書きは壊れやすい。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.365Z"
  }
},
{
  "model": "exam.question",
  "pk": 919,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "独自のCSV方言（区切り:タブ、引用符:なし）を使いたい。適切な指定を1つ選べ。",
    "note": "QUOTE_NONE の場合はエスケープ文字の指定が必要。汎用の 'tsv' 方言は標準では定義されていない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.366Z"
  }
},
{
  "model": "exam.question",
  "pk": 920,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "Python 3.11以降でTOMLを“読み込み専用”で扱う標準モジュールを1つ選べ。",
    "note": "標準ライブラリ tomllib は読み込み専用（書き込みは非対応）。書き込みはサードパーティが必要。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.367Z"
  }
},
{
  "model": "exam.question",
  "pk": 921,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "バイト列 data からTOMLを読み込む正しい使い方を1つ選べ。",
    "note": "tomllib は文字列入力の loads と、ファイルオブジェクトからの load を提供する。bytesはデコードしてから。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.367Z"
  }
},
{
  "model": "exam.question",
  "pk": 922,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "macOS/iOS系のplistを読み書きする標準モジュールを1つ選べ。",
    "note": "plistlib はXML/バイナリplistの読み書きに対応。configparser 等は除外対象か用途が異なる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.368Z"
  }
},
{
  "model": "exam.question",
  "pk": 923,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "plistのバイナリ形式で書き出す指定として正しいものを1つ選べ。",
    "note": "fmt=plistlib.FMT_BINARY を指定する。デフォルトはXML。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.368Z"
  }
},
{
  "model": "exam.question",
  "pk": 924,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "構造化バイナリのパック/アンパックに使う標準モジュールを1つ選べ。",
    "note": "struct はC言語風の書式指定でbytes↔数値等の相互変換を行う。arrayは配列型。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.369Z"
  }
},
{
  "model": "exam.question",
  "pk": 925,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "struct でリトルエンディアンの32bit符号なし整数を1つpackする書式として正しいものを1つ選べ。",
    "note": "< はリトルエンディアン、I はunsigned int。> はビッグエンディアン、i は符号付き。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.370Z"
  }
},
{
  "model": "exam.question",
  "pk": 926,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "Base64でバイト列を文字列化したい。適切な変換を1つ選べ。",
    "note": "b64encode は bytes→bytes。テキストにするには decode。逆は b64decode。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.370Z"
  }
},
{
  "model": "exam.question",
  "pk": 927,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "UUIDをランダム生成して文字列として取得する正しい方法を1つ選べ。",
    "note": "uuid4 はランダム型。文字列化には str() を使う。uuid1 は時刻+MAC等ベース。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.371Z"
  }
},
{
  "model": "exam.question",
  "pk": 928,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "IPアドレスを厳密にパースして正規化表記を得たい。適切なモジュール/関数を1つ選べ。",
    "note": "ipaddress はIPv4/IPv6の厳密なパースと表記提供を行う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.372Z"
  }
},
{
  "model": "exam.question",
  "pk": 929,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "JSON Lines（1行に1JSON）の読み取りで“巨大ファイル”にも対応しやすい基本パターンを1つ選べ。",
    "note": "1行ずつストリーミング処理することでメモリ節約。標準のみで実装可能。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.372Z"
  }
},
{
  "model": "exam.question",
  "pk": 930,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "JSONの浮動小数点をDecimalで読みたい。適切な引数指定を1つ選べ。",
    "note": "parse_float に型/関数を渡すと、数値トークンをその型で生成する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.373Z"
  }
},
{
  "model": "exam.question",
  "pk": 931,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "JSONのキーを常に文字列にしたい。仕様に沿った説明として正しいものを1つ選べ。",
    "note": "JSONはオブジェクトのキーに文字列のみを許容。Pythonのdictとは制約が異なる点に注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.374Z"
  }
},
{
  "model": "exam.question",
  "pk": 932,
  "fields": {
    "chapter": 14,
    "kind": "single",
    "stem": "巨大JSONを安全に反復処理したい。最も健全なアプローチを1つ選べ。",
    "note": "JSON全体が巨大だと一括読みはメモリ不足に。JSONLで1行ずつ処理するのが現実的。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.374Z"
  }
},
{
  "model": "exam.question",
  "pk": 933,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "HTTPでテキストを取得してUTF-8としてデコードする基本コードとして最も適切なものを1つ選べ。",
    "note": "urlopenのread()はbytesを返す。テキスト化には明示的にdecodeする。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.375Z"
  }
},
{
  "model": "exam.question",
  "pk": 934,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "URLを構成要素に分解する関数として正しいものを1つ選べ。",
    "note": "urlparseはscheme/netloc/path/query/fragmentなどを分解してParseResultを返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.376Z"
  }
},
{
  "model": "exam.question",
  "pk": 935,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "辞書 params をクエリ文字列にする。値にリストが含まれ複数キー展開したいときの正しい指定を1つ選べ。",
    "note": "doseq=Trueで{'a':[1,2]}→'a=1&a=2'のように展開される。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.376Z"
  }
},
{
  "model": "exam.question",
  "pk": 936,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "クエリ文字列を辞書に戻す関数として正しいものを1つ選べ。",
    "note": "parse_qsは値をリストで返す。タプル列が欲しければparse_qsl。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.377Z"
  }
},
{
  "model": "exam.question",
  "pk": 937,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "ベースURLと相対パスから絶対URLを得る正しい関数を1つ選べ。",
    "note": "urljoinは相対参照を解決して新しいURLを返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.378Z"
  }
},
{
  "model": "exam.question",
  "pk": 938,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "スペースを'+'で表現するフォーム用エンコードを行う関数として正しいものを1つ選べ。",
    "note": "quote_plusは空白→'+'に、quoteは'%20'にエンコードする。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.378Z"
  }
},
{
  "model": "exam.question",
  "pk": 939,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "User-Agentを付けてGETする最も標準的な例を1つ選べ。",
    "note": "Requestオブジェクトにheadersを渡す。urlopenにuser_agent引数はない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.379Z"
  }
},
{
  "model": "exam.question",
  "pk": 940,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "HTTPエラー発生時にステータスコードを取得したい。適切な例を1つ選べ。",
    "note": "HTTPErrorはURLErrorのサブクラスで、code属性にステータスが入る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.379Z"
  }
},
{
  "model": "exam.question",
  "pk": 941,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "robots.txtの規則を解釈してアクセス可否を判定する標準モジュールを1つ選べ。",
    "note": "RobotFileParser().set_url(...); read(); can_fetch(agent, url) で判定できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.380Z"
  }
},
{
  "model": "exam.question",
  "pk": 942,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "http.clientでHTTPSアクセスを行う基本的なクラスを1つ選べ。",
    "note": "hostを渡してHTTPSConnectionを作成し、request/sendで操作する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.381Z"
  }
},
{
  "model": "exam.question",
  "pk": 943,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "証明書検証を有効にしたデフォルトのSSLコンテキストを作る正しい方法を1つ選べ。",
    "note": "create_default_contextは検証有効・システムCAでの一般的な推奨設定を返す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.381Z"
  }
},
{
  "model": "exam.question",
  "pk": 944,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "クッキーを自動処理しながらHTTPアクセスしたい。適切な構成を1つ選べ。",
    "note": "CookieJarとHTTPCookieProcessorをopenerに組み込むと自動送受信される。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.382Z"
  }
},
{
  "model": "exam.question",
  "pk": 945,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "HTTPプロキシを使ってアクセスしたい。環境変数以外の標準的な指定として正しいものを1つ選べ。",
    "note": "ProxyHandlerをopenerに組み込む。環境変数HTTP_PROXYでも可。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.383Z"
  }
},
{
  "model": "exam.question",
  "pk": 946,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "application/x-www-form-urlencoded でPOSTする基本コードとして正しいものを1つ選べ。",
    "note": "POSTデータはbytesで渡す。必要ならContent-Typeヘッダを明示する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.383Z"
  }
},
{
  "model": "exam.question",
  "pk": 947,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "レスポンスのContent-Typeが示す文字コードを取得してデコードに使いたい。適切な記述を1つ選べ。",
    "note": "HTTPResponse.headersはemail.message.Message互換でget_content_charsetを持つ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.384Z"
  }
},
{
  "model": "exam.question",
  "pk": 948,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "タイムアウト時に発生する例外として最も適切なものを1つ選べ。",
    "note": "多くの場合URLErrorが送出され、そのreasonにsocket.timeoutが入る。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.384Z"
  }
},
{
  "model": "exam.question",
  "pk": 949,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "urlopenをwith文で使う利点として最も適切なものを1つ選べ。",
    "note": "context managerでcloseを保証できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.385Z"
  }
},
{
  "model": "exam.question",
  "pk": 950,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "既定のWebブラウザでURLを開く標準関数を1つ選べ。",
    "note": "webbrowserモジュールはOS既定のブラウザ起動を抽象化する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.386Z"
  }
},
{
  "model": "exam.question",
  "pk": 951,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "XML-RPCのクライアントを標準ライブラリで作る。適切なクラスを1つ選べ。",
    "note": "ServerProxy('https://example.com/RPC2').method(args) のように呼び出す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.386Z"
  }
},
{
  "model": "exam.question",
  "pk": 952,
  "fields": {
    "chapter": 15,
    "kind": "single",
    "stem": "URLエンコード対象外のセーフ文字集合を指定してパス断片をエンコードしたい。正しい使い方を1つ選べ。",
    "note": "quoteのsafeでエンコードしない文字を追加できる（既定は'/'を含まない）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.387Z"
  }
},
{
  "model": "exam.question",
  "pk": 953,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "標準ライブラリで単体テストを記述するための基本フレームワークとして最も適切なものを1つ選べ。",
    "note": "標準ライブラリのテストフレームワークは unittest と doctest。ここでは一般的なxUnitスタイルの unittest を指す。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.388Z"
  }
},
{
  "model": "exam.question",
  "pk": 954,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "unittest.TestCase でテストメソッドとして認識される関数名の規則として正しいものを1つ選べ。",
    "note": "デフォルトのテストランナはメソッド名が test で始まるものを検出する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.389Z"
  }
},
{
  "model": "exam.question",
  "pk": 955,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "unittest のフィクスチャメソッドとしてクラス全体で1回だけ実行されるものを1つ選べ。",
    "note": "setUpClass/tearDownClass はクラス単位、setUp/tearDown はテストメソッド単位。tearDownModule はモジュール全体で1回（関数ベース時）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.389Z"
  }
},
{
  "model": "exam.question",
  "pk": 956,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "unittest で例外発生を検証する正しい使い方を1つ選べ。",
    "note": "コンテキストマネージャとして assertRaises を用いるのが簡潔で安全。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.390Z"
  }
},
{
  "model": "exam.question",
  "pk": 957,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "unittest のテストランナーを対話的に起動する一般的なエントリポイントとして正しいものを1つ選べ。",
    "note": "スクリプトから直接実行する場合の定型。discover を使う方法もある。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.391Z"
  }
},
{
  "model": "exam.question",
  "pk": 958,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テストディスカバリで tests ディレクトリ配下を探索して実行する正しいコマンドを1つ選べ。",
    "note": "discover サブコマンドで開始ディレクトリ(-s)を指定するのが基本。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.391Z"
  }
},
{
  "model": "exam.question",
  "pk": 959,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "unittest.mock の MagicMock に関する説明として正しいものを1つ選べ。",
    "note": "MagicMock は **call** などのマジックメソッドも扱える。spec 指定で存在しない属性アクセスを抑制できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.392Z"
  }
},
{
  "model": "exam.question",
  "pk": 960,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "mock.patch を使ってモジュール内の関数 foo を一時的に差し替える正しい例を1つ選べ（対象は mymod.foo）。",
    "note": "patch には '参照される場所' を文字列で与える。import 先に依存する点に注意。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.392Z"
  }
},
{
  "model": "exam.question",
  "pk": 961,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "mock.patch の適用範囲に関する説明として正しいものを1つ選べ。",
    "note": "コンテキストマネージャ／デコレータのライフサイクルに従う。必要に応じて start()/stop() も使える。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.393Z"
  }
},
{
  "model": "exam.question",
  "pk": 962,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "mock.Mock の呼び出し検証として正しいアサーションを1つ選べ。",
    "note": "Mock には assert_called_once_with などの専用アサーションが用意されている。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.394Z"
  }
},
{
  "model": "exam.question",
  "pk": 963,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "subTest コンテキストの用途として最も適切な説明を1つ選べ。",
    "note": "for ループで複数パラメータを検証する際に、どの入力で失敗したかを粒度よく示せる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.394Z"
  }
},
{
  "model": "exam.question",
  "pk": 964,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "浮動小数点の比較に適したアサーションを1つ選べ。",
    "note": "丸め誤差を考慮して Almost 系アサーションを用いるのが定石。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.395Z"
  }
},
{
  "model": "exam.question",
  "pk": 965,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "ログ出力を検証するための unittest の機能として適切なものを1つ選べ。",
    "note": "with self.assertLogs(logger, level): として使用し、出力内容を検証できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.396Z"
  }
},
{
  "model": "exam.question",
  "pk": 966,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "警告発生をテストで検証するために用いるアサーションを1つ選べ。",
    "note": "with self.assertWarns(WarningType): の形式で使用する。正規表現版として assertWarnsRegex もある。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.396Z"
  }
},
{
  "model": "exam.question",
  "pk": 967,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テスト対象コードが外部APIを呼び出す関数を持つ。副作用を避けつつ戻り値だけを差し替えたい。適切なモックの設定を1つ選べ。",
    "note": "戻り値固定は return_value。side_effect は例外送出や逐次値の供給に使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.397Z"
  }
},
{
  "model": "exam.question",
  "pk": 968,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "モックの side_effect の正しい用途を1つ選べ。",
    "note": "side_effect は反復可能な値や例外、あるいはコールバック関数を指定できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.397Z"
  }
},
{
  "model": "exam.question",
  "pk": 969,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "ファイルI/Oを含む関数のテストで、実ファイルを作らずに振る舞いを検証したい。最適なアプローチを1つ選べ。",
    "note": "unittest.mock.mock_open で open を差し替えると、読み書き動作を安全に検証できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.398Z"
  }
},
{
  "model": "exam.question",
  "pk": 970,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テストの独立性を高める一般的な指針として最も適切なものを1つ選べ。",
    "note": "テストは順序非依存・副作用最小・外部依存の切り離しが原則。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.399Z"
  }
},
{
  "model": "exam.question",
  "pk": 971,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "**name** == \"__main__\" ガードで unittest.main() を呼ぶメリットとして適切な説明を1つ選べ。",
    "note": "スクリプト実行時のみエントリポイントを有効にするための慣習的ガード。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.399Z"
  }
},
{
  "model": "exam.question",
  "pk": 972,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "assertRaisesRegex の用途として正しいものを1つ選べ。",
    "note": "例外の詳細メッセージに対するより厳密な検証が可能になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.400Z"
  }
},
{
  "model": "exam.question",
  "pk": 973,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "依存先のクラスをモックする際、元のインターフェースに存在しない属性アクセスを防ぎたい。適切な設定を1つ選べ。",
    "note": "spec または autospec を使うと存在しない属性のアクセスでエラーになるため、API 逸脱を検知できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.401Z"
  }
},
{
  "model": "exam.question",
  "pk": 974,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テストのスキップに関する説明として正しいものを1つ選べ。",
    "note": "skip/skipIf/skipUnless などのデコレータで条件付きスキップが可能。結果は 'skipped' として報告される。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.401Z"
  }
},
{
  "model": "exam.question",
  "pk": 975,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テスト結果の詳細表示（verbose）で実行したい。正しいコマンドを1つ選べ。",
    "note": "-v オプションで各テスト名が表示され、失敗箇所の特定が容易になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.402Z"
  }
},
{
  "model": "exam.question",
  "pk": 976,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テストコードで一時ディレクトリを安全に利用する標準的手法として最も適切なものを1つ選べ。",
    "note": "TemporaryDirectory は自動クリーンアップされ、テスト間の汚染を防げる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.403Z"
  }
},
{
  "model": "exam.question",
  "pk": 977,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "unittest の等価性検証で集合の要素を順序無視で比較したい。適切なアサーションを1つ選べ。",
    "note": "assertCountEqual は順序を無視し要素と出現回数の一致を検証する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.403Z"
  }
},
{
  "model": "exam.question",
  "pk": 978,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テストで環境変数を一時的に変更して検証したい。最も適切な方法を1つ選べ。",
    "note": "patch.dict で辞書を一時差し替えし、スコープ終了時に原状復帰させるのが安全。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.404Z"
  }
},
{
  "model": "exam.question",
  "pk": 979,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "モジュールレベルの setUpModule/tearDownModule の正しい説明を1つ選べ。",
    "note": "関数ベースのフィクスチャ。重い初期化をまとめる際に用いるが乱用は避ける。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.404Z"
  }
},
{
  "model": "exam.question",
  "pk": 980,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テストで時間依存のコードを安定化させたい。適切な方法を1つ選べ。",
    "note": "時間源を注入可能にしてモックする。I/Oや乱数も同様に抽象化・差し替え可能にしておくとテスト容易性が上がる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.405Z"
  }
},
{
  "model": "exam.question",
  "pk": 981,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "複数のテストケースをまとめて実行したい。unittest のテストスイート構築として正しいものを1つ選べ。",
    "note": "TestLoader でモジュールやクラスからテストを読み込み、TextTestRunner などで実行する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.406Z"
  }
},
{
  "model": "exam.question",
  "pk": 982,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "doctest の特徴として正しい説明を1つ選べ。",
    "note": "doctest はドキュメント例の信頼性を担保する軽量テスト。unittest と併用可能。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.406Z"
  }
},
{
  "model": "exam.question",
  "pk": 983,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "doctest 実行のためにモジュール **doc** 内の例を走らせる簡単なコマンドとして正しいものを1つ選べ。",
    "note": "doctest モジュールは -v で詳細表示できる。ファイルパスを指定して実行可能。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.407Z"
  }
},
{
  "model": "exam.question",
  "pk": 984,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テストダブルのうち、呼び出し回数や引数の記録・検証を主目的とするものに最も該当する用語を1つ選べ。",
    "note": "Mock は振る舞いの差し替えに加え、呼び出しの履歴検証が可能。Stub は固定応答中心、Fake は簡易実装。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.407Z"
  }
},
{
  "model": "exam.question",
  "pk": 985,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "unittest のテスト命名と可読性に関する指針として最も適切なものを1つ選べ。",
    "note": "失敗時に何が壊れたかが名前から即時把握できるのが望ましい。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.408Z"
  }
},
{
  "model": "exam.question",
  "pk": 986,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テストでネットワーク依存を避ける基本方針として最も適切なものを1つ選べ。",
    "note": "外部依存は不安定要因。境界で抽象化し、モックで制御するのが基本。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.409Z"
  }
},
{
  "model": "exam.question",
  "pk": 987,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "TextTestRunner の出力ストリームを変更したい。正しい用法を1つ選べ。",
    "note": "TextTestRunner のコンストラクタに stream を渡すと出力先を差し替えられる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.409Z"
  }
},
{
  "model": "exam.question",
  "pk": 988,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "テスト対象が標準出力へ出す文字列を検証したい。最も簡潔なアプローチを1つ選べ。",
    "note": "with redirect_stdout(io.StringIO()) として出力を捕捉し、期待文字列と比較する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.410Z"
  }
},
{
  "model": "exam.question",
  "pk": 989,
  "fields": {
    "chapter": 17,
    "kind": "single",
    "stem": "非決定的な乱数依存コードのテストを安定化する最も一般的な方法を1つ選べ。",
    "note": "依存を外部化（DI）して制御可能にするのがテスト容易性の鍵。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.411Z"
  }
},
{
  "model": "exam.question",
  "pk": 990,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "実行中に対話的デバッガへ入るための組み込み関数として正しいものを1つ選べ。",
    "note": "Python 3.7以降は組み込みの breakpoint() が推奨。デフォルトは pdb.set_trace 相当。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.412Z"
  }
},
{
  "model": "exam.question",
  "pk": 991,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "breakpoint() の動作を環境変数で無効化したい。正しい設定を1つ選べ。",
    "note": "PYTHONBREAKPOINT に 0 を指定すると breakpoint() は無効化され、何もしなくなる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.412Z"
  }
},
{
  "model": "exam.question",
  "pk": 992,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "pdb で“現在行を実行して次の行へ進む（関数呼び出しには入らない）”操作に対応するコマンドを1つ選べ。",
    "note": "n は next、s は step（関数に入る）、c は continue、r は return（現在の関数を抜ける）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.413Z"
  }
},
{
  "model": "exam.question",
  "pk": 993,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "対象スクリプトを対話デバッガ付きで起動する一般的な方法を1つ選べ。",
    "note": "pdb は標準の対話デバッガ。-m でモジュールとして起動する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.413Z"
  }
},
{
  "model": "exam.question",
  "pk": 994,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "pdb セッションで式の値を表示する基本コマンドとして正しいものを1つ選べ。",
    "note": "p は print、pp は pretty print。! を先頭に付けると任意の Python 文を実行できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.414Z"
  }
},
{
  "model": "exam.question",
  "pk": 995,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "pdb で現在の関数から“戻り”まで実行を進めるコマンドを1つ選べ。",
    "note": "r は return。b は break（ブレークポイント設定）、u/w はスタック移動表示系。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.415Z"
  }
},
{
  "model": "exam.question",
  "pk": 996,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "pdb で現在ファイルの特定行にブレークポイントを置く正しい操作を1つ選べ。",
    "note": "別ファイルなら b path/to/file.py:120 の形式を使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.415Z"
  }
},
{
  "model": "exam.question",
  "pk": 997,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "pdb で登録済みのブレークポイント #2 を削除する正しいコマンドを1つ選べ。",
    "note": "b で一覧、clear <番号> で削除できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.416Z"
  }
},
{
  "model": "exam.question",
  "pk": 998,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "例外発生後の“ポストモーテム”デバッグとして適切な呼び出しを1つ選べ。",
    "note": "except 節で traceback 情報（例外コンテキスト）を元に対話デバッガへ入る用途。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.417Z"
  }
},
{
  "model": "exam.question",
  "pk": 999,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "breakpoint() のバックエンドを独自関数に差し替える正しい指定を1つ選べ。",
    "note": "「モジュール:呼び出し可能オブジェクト」の文字列を指定する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.417Z"
  }
},
{
  "model": "exam.question",
  "pk": 1000,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "ログでデバッグ情報を出したい。適切な初期設定を1つ選べ。",
    "note": "basicConfig で最低限のハンドラとレベルを設定できる。getLogger(**name**) と併用するのが定石。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.418Z"
  }
},
{
  "model": "exam.question",
  "pk": 1001,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "モジュール専用のロガーを取得する慣習的なコードとして正しいものを1つ選べ。",
    "note": "**name** で階層ロガーを得ると設定の継承と粒度制御が容易になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.418Z"
  }
},
{
  "model": "exam.question",
  "pk": 1002,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "非推奨APIの利用を素早く検知したい。warnings で適切な設定を1つ選べ。",
    "note": "DeprecationWarning を例外化すると早期に気付ける。テスト時にも有効。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.419Z"
  }
},
{
  "model": "exam.question",
  "pk": 1003,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "プロセス全体でクラッシュ時にスタック情報を自動表示したい。実行時に有効化する標準手段を1つ選べ。",
    "note": "faulthandler は致命的エラー時のスタック出力を容易にする。起動オプションや環境変数でも有効化できる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.420Z"
  }
},
{
  "model": "exam.question",
  "pk": 1004,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "メモリ割り当ての発生源を調べたい。開始時に呼ぶべき関数を1つ選べ。",
    "note": "tracemalloc.start() の後にスナップショット取得や統計が可能になる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.420Z"
  }
},
{
  "model": "exam.question",
  "pk": 1005,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "pdb で“現在の関数の引数値”を確認するコマンドを1つ選べ。",
    "note": "args は現在のフレームの仮引数と値を表示する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.421Z"
  }
},
{
  "model": "exam.question",
  "pk": 1006,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "マルチプロセスコードをデバッグ可能にする基本的なガードとして正しいものを1つ選べ。",
    "note": "spawn モード等で子プロセス側の無限再帰や意図しない実行を防ぐため必須。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.422Z"
  }
},
{
  "model": "exam.question",
  "pk": 1007,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "関数オブジェクトから元ソースコードを取得したい。適切な関数を1つ選べ。",
    "note": "inspect モジュールはオブジェクトのメタ情報取得に有用。ソースが存在しない場合は例外となることがある。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.422Z"
  }
},
{
  "model": "exam.question",
  "pk": 1008,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "print デバッグと比べた logging の利点として最も適切な説明を1つ選べ。",
    "note": "logging は運用時の制御性が高く、デバッグから本番まで一貫した仕組みを提供する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.423Z"
  }
},
{
  "model": "exam.question",
  "pk": 1009,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "標準出力へ出された内容をテストやデバッグで一時的に捕捉する最も簡潔な手段を1つ選べ。",
    "note": "redirect_stdout/redirect_stderr により安全に一時差し替えができる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.423Z"
  }
},
{
  "model": "exam.question",
  "pk": 1010,
  "fields": {
    "chapter": 18,
    "kind": "single",
    "stem": "実行時のみ有効で最適化(-O)で無効化される“動作検証用の記述”として正しいものを1つ選べ。",
    "note": "assert は -O 実行で無効化されるため、入力検証ではなく開発時の不変条件チェックに用いる。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.424Z"
  }
},
{
  "model": "exam.question",
  "pk": 1011,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "暗号学的ハッシュを計算する標準ライブラリとして最も適切なものを1つ選べ。",
    "note": "hashlib は SHA-2/3、BLAKE2 などのハッシュ関数を提供する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.425Z"
  }
},
{
  "model": "exam.question",
  "pk": 1012,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "セキュアなトークンを生成するために推奨されるモジュールを1つ選べ。",
    "note": "secrets は暗号学的に安全な乱数源を用いてトークンを生成する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.426Z"
  }
},
{
  "model": "exam.question",
  "pk": 1013,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "メッセージ認証コード(MAC)を標準ライブラリで計算する正しい選択を1つ選べ。",
    "note": "HMAC は鍵付きハッシュ。ハッシュ関数を直接鍵付きとして使わない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.426Z"
  }
},
{
  "model": "exam.question",
  "pk": 1014,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "パスワードのキーストレッチングに標準ライブラリで用いる関数の正しい呼び出し例を1つ選べ。",
    "note": "pbkdf2_hmac(hash_name, password, salt, iterations[, dklen]) を使う。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.427Z"
  }
},
{
  "model": "exam.question",
  "pk": 1015,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "パスワード由来の鍵生成に scrypt を使う正しい最小例を1つ選べ。",
    "note": "scrypt は N,r,p を指定する。PBKDF2 より強いメモリ依存性を持つ。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.427Z"
  }
},
{
  "model": "exam.question",
  "pk": 1016,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "タイミング攻撃に強い比較を行うための関数として正しいものを1つ選べ。",
    "note": "compare_digest は時間一定比較を提供し、タイミング漏洩を緩和する。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.428Z"
  }
},
{
  "model": "exam.question",
  "pk": 1017,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "高速な鍵付きハッシュ(MAC)として BLAKE2 を使う正しい例を1つ選べ。",
    "note": "BLAKE2 は key 引数で MAC として利用可能（blake2b/blake2s）。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.429Z"
  }
},
{
  "model": "exam.question",
  "pk": 1018,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "次のうち“暗号化”ではなく“エンコード”であるものを1つ選べ。",
    "note": "Base64 は可逆な表現変換であり暗号化ではない。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.429Z"
  }
},
{
  "model": "exam.question",
  "pk": 1019,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "URL 等に埋め込めるセキュアな文字列表現の乱数トークンを生成する正しい例を1つ選べ。",
    "note": "token_urlsafe は URL 安全な Base64 文字列を返す。uuid4 は一部用途で十分だがセキュリティ用途には不適。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.430Z"
  }
},
{
  "model": "exam.question",
  "pk": 1020,
  "fields": {
    "chapter": 19,
    "kind": "single",
    "stem": "暗号学的衝突が既知でありパスワード保存用途に不適切なハッシュ関数を1つ選べ。",
    "note": "MD5（および SHA-1）は衝突攻撃が実用化されており避けるべき。",
    "is_excluded": false,
    "created_at": "2025-09-27T16:48:53.431Z"
  }
},
{
  "model": "exam.choice",
  "pk": 2313,
  "fields": {
    "question": 579,
    "text": "python -m venv .venv",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2314,
  "fields": {
    "question": 579,
    "text": "pip create venv .venv",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2315,
  "fields": {
    "question": 579,
    "text": "virtualenv install .",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2316,
  "fields": {
    "question": 579,
    "text": "python --new-venv .",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2317,
  "fields": {
    "question": 580,
    "text": ".venv\\Scripts\\Activate.ps1",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2318,
  "fields": {
    "question": 580,
    "text": ".venv/bin/activate",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2319,
  "fields": {
    "question": 580,
    "text": "source .venv/activate.ps1",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2320,
  "fields": {
    "question": 580,
    "text": "Enable-Venv .venv",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2321,
  "fields": {
    "question": 581,
    "text": "仮想環境を有効化してから pip install パッケージ名",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2322,
  "fields": {
    "question": 581,
    "text": "管理者権限で pip install --system パッケージ名",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2323,
  "fields": {
    "question": 581,
    "text": "python setup.py install を常に使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2324,
  "fields": {
    "question": 581,
    "text": "site-packages を手動でコピーする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2325,
  "fields": {
    "question": 582,
    "text": "pip freeze > requirements.txt",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2326,
  "fields": {
    "question": 582,
    "text": "pip list --save requirements.txt",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2327,
  "fields": {
    "question": 582,
    "text": "pip export > requirements.txt",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2328,
  "fields": {
    "question": 582,
    "text": "pip snapshot > requirements.txt",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2329,
  "fields": {
    "question": 583,
    "text": "ファイル先頭に #!/usr/bin/env python3 を書き、chmod +x する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2330,
  "fields": {
    "question": 583,
    "text": "ファイル末尾に #!/usr/bin/python を書く",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2331,
  "fields": {
    "question": 583,
    "text": "python実行ファイルをスクリプトに追記する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2332,
  "fields": {
    "question": 583,
    "text": "拡張子を .pyx に変更する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2333,
  "fields": {
    "question": 584,
    "text": "ビルドシステムや依存関係などのメタデータを宣言する標準ファイル",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2334,
  "fields": {
    "question": 584,
    "text": "仮想環境のパスを保持する一時ファイル",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2335,
  "fields": {
    "question": 584,
    "text": "pytestの設定専用ファイル",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2336,
  "fields": {
    "question": 584,
    "text": "OSごとのパッケージマネージャー設定",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2337,
  "fields": {
    "question": 585,
    "text": "CLIツールを隔離された環境にインストールして実行する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2338,
  "fields": {
    "question": 585,
    "text": "GPU向けにpipを高速化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2339,
  "fields": {
    "question": 585,
    "text": "requirements.txt を自動生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2340,
  "fields": {
    "question": 585,
    "text": "venvを圧縮して配布する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2341,
  "fields": {
    "question": 586,
    "text": "pyenv",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2342,
  "fields": {
    "question": 586,
    "text": "pip-tools",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2343,
  "fields": {
    "question": 586,
    "text": "virtualenvwrapper",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2344,
  "fields": {
    "question": 586,
    "text": "toxiproxy",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2345,
  "fields": {
    "question": 587,
    "text": "現在のpython実行ファイルに紐づくpipを明示的に呼ぶため",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2346,
  "fields": {
    "question": 587,
    "text": "常にシステム全体にインストールするため",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2347,
  "fields": {
    "question": 587,
    "text": "pipの速度を上げるため",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2348,
  "fields": {
    "question": 587,
    "text": "pipのバージョンを固定するため",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2349,
  "fields": {
    "question": 588,
    "text": "listは人間向け表示、freezeは要件固定向けの正確なバージョンピン出力",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2350,
  "fields": {
    "question": 588,
    "text": "どちらも同じ出力",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2351,
  "fields": {
    "question": 588,
    "text": "freezeは未インストールの候補を出す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2352,
  "fields": {
    "question": 588,
    "text": "listはrequirements.txtを生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2353,
  "fields": {
    "question": 589,
    "text": "スペース4個",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2354,
  "fields": {
    "question": 589,
    "text": "タブ1個",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2355,
  "fields": {
    "question": 589,
    "text": "スペース2個",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2356,
  "fields": {
    "question": 589,
    "text": "プロジェクトごとにバラバラでよい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2357,
  "fields": {
    "question": 590,
    "text": "タブではなくスペースを使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2358,
  "fields": {
    "question": 590,
    "text": "タブとスペースを混在させてもよい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2359,
  "fields": {
    "question": 590,
    "text": "古いコードに合わせて常にタブを使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2360,
  "fields": {
    "question": 590,
    "text": "可読性より入力の速さを優先する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2361,
  "fields": {
    "question": 591,
    "text": "79文字（コメントやdocstringは72文字）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2362,
  "fields": {
    "question": 591,
    "text": "60文字で必ず改行する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2363,
  "fields": {
    "question": 591,
    "text": "100文字を超えなければよい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2364,
  "fields": {
    "question": 591,
    "text": "制限は一切ない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2365,
  "fields": {
    "question": 592,
    "text": "標準ライブラリ→サードパーティ→ローカルの順でグループ化し、各グループ内はアルファベット順",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2366,
  "fields": {
    "question": 592,
    "text": "使用頻度の高い順で並べる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2367,
  "fields": {
    "question": 592,
    "text": "どの順でもよいが1行にすべて書く",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2368,
  "fields": {
    "question": 592,
    "text": "ローカル→サードパーティ→標準ライブラリの順が望ましい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2369,
  "fields": {
    "question": 593,
    "text": "ワイルドカード（from module import *）は避ける",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2370,
  "fields": {
    "question": 593,
    "text": "別モジュールから同名を上書きするために積極的にワイルドカードを使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2371,
  "fields": {
    "question": 593,
    "text": "1行に複数のモジュールをカンマ区切りでまとめる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2372,
  "fields": {
    "question": 593,
    "text": "循環参照を避けるため常に遅延インポートにする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2373,
  "fields": {
    "question": 594,
    "text": "絶対インポートを基本とし、必要時のみ明示的相対インポートを使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2374,
  "fields": {
    "question": 594,
    "text": "常に相対インポートを使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2375,
  "fields": {
    "question": 594,
    "text": "どちらでもよいが暗黙的相対インポートを使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2376,
  "fields": {
    "question": 594,
    "text": "パスをsys.pathに追加して回避する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2377,
  "fields": {
    "question": 595,
    "text": "二項演算子の前後には1つずつ空白を入れる（例: a + b）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2378,
  "fields": {
    "question": 595,
    "text": "演算子の前後に空白は入れない（例: a+b）",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2379,
  "fields": {
    "question": 595,
    "text": "左右どちらか片側だけ空白にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2380,
  "fields": {
    "question": 595,
    "text": "可読性のため演算子の前後に2つ空白を入れる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2381,
  "fields": {
    "question": 596,
    "text": "キーワード引数では=の前後に空白を入れない（func(a=1, b=2)）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2382,
  "fields": {
    "question": 596,
    "text": "=の前後に必ず空白を入れる（func(a = 1)）",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2383,
  "fields": {
    "question": 596,
    "text": "引数が2つ以上のときのみ空白を入れる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2384,
  "fields": {
    "question": 596,
    "text": "デフォルト引数のときだけ空白を入れる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2385,
  "fields": {
    "question": 597,
    "text": "トップレベルの定義同士は空行2行で区切る",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2386,
  "fields": {
    "question": 597,
    "text": "空行は不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2387,
  "fields": {
    "question": 597,
    "text": "空行は1行",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2388,
  "fields": {
    "question": 597,
    "text": "3行以上空けるのが望ましい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2389,
  "fields": {
    "question": 598,
    "text": "クラス: CapWords、関数/変数: lower_case_with_underscores、定数: UPPER_CASE",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2390,
  "fields": {
    "question": 598,
    "text": "クラス: snake_case、関数/変数: CamelCase、定数: lower",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2391,
  "fields": {
    "question": 598,
    "text": "すべてCamelCaseで統一する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2392,
  "fields": {
    "question": 598,
    "text": "すべてsnake_caseで統一する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2393,
  "fields": {
    "question": 599,
    "text": "モジュールの公開API（from module import * で公開される名前）を制御する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2394,
  "fields": {
    "question": 599,
    "text": "ガベージコレクションの対象外にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2395,
  "fields": {
    "question": 599,
    "text": "型チェックを無効化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2396,
  "fields": {
    "question": 599,
    "text": "循環インポートを防止する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2397,
  "fields": {
    "question": 600,
    "text": "if value is None:",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2398,
  "fields": {
    "question": 600,
    "text": "if value == None:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2399,
  "fields": {
    "question": 600,
    "text": "if None in value:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2400,
  "fields": {
    "question": 600,
    "text": "if value equals None:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2401,
  "fields": {
    "question": 601,
    "text": "if flag:",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2402,
  "fields": {
    "question": 601,
    "text": "if flag == True:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2403,
  "fields": {
    "question": 601,
    "text": "if flag is True:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2404,
  "fields": {
    "question": 601,
    "text": "if flag != False:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2405,
  "fields": {
    "question": 602,
    "text": "bare exceptを避け、捕捉する例外を具体的に指定する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2406,
  "fields": {
    "question": 602,
    "text": "どの例外も漏らさないため bare except を使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2407,
  "fields": {
    "question": 602,
    "text": "例外はすべて無視して続行する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2408,
  "fields": {
    "question": 602,
    "text": "KeyboardInterruptのみ常に捕捉する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2409,
  "fields": {
    "question": 603,
    "text": "with文（コンテキストマネージャ）を使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2410,
  "fields": {
    "question": 603,
    "text": "openしたら放置しても自動で閉じられるので気にしない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2411,
  "fields": {
    "question": 603,
    "text": "try/finallyは不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2412,
  "fields": {
    "question": 603,
    "text": "リソースはグローバル変数に保持する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2413,
  "fields": {
    "question": 604,
    "text": "可変オブジェクト（例: list, dict）をデフォルトに使わず、Noneを使って内部で初期化する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2414,
  "fields": {
    "question": 604,
    "text": "性能のために常に空のリストをデフォルトにする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2415,
  "fields": {
    "question": 604,
    "text": "辞書だけはデフォルトにしてよい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2416,
  "fields": {
    "question": 604,
    "text": "クラス属性をデフォルトに流用する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2417,
  "fields": {
    "question": 605,
    "text": "本番コードではprintではなくloggingモジュールを使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2418,
  "fields": {
    "question": 605,
    "text": "printで十分。レベル管理は不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2419,
  "fields": {
    "question": 605,
    "text": "例外はすべて標準出力にprintする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2420,
  "fields": {
    "question": 605,
    "text": "loggingはテストでのみ使用する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2421,
  "fields": {
    "question": 606,
    "text": "シングルかダブルのどちらかに統一し一貫性を保つ",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2422,
  "fields": {
    "question": 606,
    "text": "行ごとに気分で切り替える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2423,
  "fields": {
    "question": 606,
    "text": "必ずダブルクォートのみを使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2424,
  "fields": {
    "question": 606,
    "text": "必ずシングルクォートのみを使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2425,
  "fields": {
    "question": 607,
    "text": "連鎖比較を用いる（例: 0 < x < 10）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2426,
  "fields": {
    "question": 607,
    "text": "x > 0 and x < 10 と常に分割して書く",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2427,
  "fields": {
    "question": 607,
    "text": "可読性のため比較は1行に1つだけにする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2428,
  "fields": {
    "question": 607,
    "text": "等価比較は常にisを使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2429,
  "fields": {
    "question": 608,
    "text": "if __name__ == \"__main__\": ブロックを用意する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2430,
  "fields": {
    "question": 608,
    "text": "モジュール読み込み時に自動実行する処理をトップレベルに書く",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2431,
  "fields": {
    "question": 608,
    "text": "グローバル変数の初期化のためmainは不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2432,
  "fields": {
    "question": 608,
    "text": "パッケージではこの慣習は使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2433,
  "fields": {
    "question": 609,
    "text": "docstringは三重引用符で記述し、1行目に要約を簡潔に書く（PEP 257）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2434,
  "fields": {
    "question": 609,
    "text": "docstringは不要。コードを読めば分かる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2435,
  "fields": {
    "question": 609,
    "text": "日本語・英語を1行ごとに交互に書く",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2436,
  "fields": {
    "question": 609,
    "text": "長文はすべて行末コメントで説明する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2437,
  "fields": {
    "question": 610,
    "text": "公開APIを中心に関数シグネチャへ型ヒントを付け、Anyの濫用を避ける",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2438,
  "fields": {
    "question": 610,
    "text": "型ヒントは実行時に遅くなるため一切付けない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2439,
  "fields": {
    "question": 610,
    "text": "docstringと型ヒントを重複して二重に書くのが望ましい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2440,
  "fields": {
    "question": 610,
    "text": "変数には常にAnyを付ける",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2441,
  "fields": {
    "question": 611,
    "text": "True True",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2442,
  "fields": {
    "question": 611,
    "text": "True False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2443,
  "fields": {
    "question": 611,
    "text": "False True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2444,
  "fields": {
    "question": 611,
    "text": "False False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2445,
  "fields": {
    "question": 612,
    "text": "False True",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2446,
  "fields": {
    "question": 612,
    "text": "True True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2447,
  "fields": {
    "question": 612,
    "text": "False False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2448,
  "fields": {
    "question": 612,
    "text": "True False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2449,
  "fields": {
    "question": 613,
    "text": "bc",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2450,
  "fields": {
    "question": 613,
    "text": "ab",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2451,
  "fields": {
    "question": 613,
    "text": "cd",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2452,
  "fields": {
    "question": 613,
    "text": "abc",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2453,
  "fields": {
    "question": 614,
    "text": "a==1, b==[2,3,4]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2454,
  "fields": {
    "question": 614,
    "text": "a==[1,2,3], b==4",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2455,
  "fields": {
    "question": 614,
    "text": "a==1, b==2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2456,
  "fields": {
    "question": 614,
    "text": "a==[1], b==[2,3,4]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2457,
  "fields": {
    "question": 615,
    "text": "[0, 1, 4]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2458,
  "fields": {
    "question": 615,
    "text": "[1, 4, 9]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2459,
  "fields": {
    "question": 615,
    "text": "[0, 1, 2]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2460,
  "fields": {
    "question": 615,
    "text": "[2, 4, 6]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2461,
  "fields": {
    "question": 616,
    "text": "式しか書けず、文は書けない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2462,
  "fields": {
    "question": 616,
    "text": "複数行の本体を書ける",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2463,
  "fields": {
    "question": 616,
    "text": "return を必ず書く",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2464,
  "fields": {
    "question": 616,
    "text": "デコレータとしてしか使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2465,
  "fields": {
    "question": 617,
    "text": "False and func()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2466,
  "fields": {
    "question": 617,
    "text": "True or func()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2467,
  "fields": {
    "question": 617,
    "text": "True and func()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2468,
  "fields": {
    "question": 617,
    "text": "False or func()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2469,
  "fields": {
    "question": 618,
    "text": "[9, 1, 1]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2470,
  "fields": {
    "question": 618,
    "text": "[1, 9, 1]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2471,
  "fields": {
    "question": 618,
    "text": "[1, 1, 9]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2472,
  "fields": {
    "question": 618,
    "text": "[9, 9, 9]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2473,
  "fields": {
    "question": 619,
    "text": "[[1], [1], [1]]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2474,
  "fields": {
    "question": 619,
    "text": "[[1], [0], [0]]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2475,
  "fields": {
    "question": 619,
    "text": "[[0], [1], [0]]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2476,
  "fields": {
    "question": 619,
    "text": "[[0], [0], [1]]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2477,
  "fields": {
    "question": 620,
    "text": "ハッシュ可能（不変）なオブジェクトのみキーにできる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2478,
  "fields": {
    "question": 620,
    "text": "任意のオブジェクトをキーにできる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2479,
  "fields": {
    "question": 620,
    "text": "list だけキーにできる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2480,
  "fields": {
    "question": 620,
    "text": "キーの型は統一必須",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2481,
  "fields": {
    "question": 621,
    "text": "5",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2482,
  "fields": {
    "question": 621,
    "text": "1",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2483,
  "fields": {
    "question": 621,
    "text": "None",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2484,
  "fields": {
    "question": 621,
    "text": "KeyError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2485,
  "fields": {
    "question": 622,
    "text": "3",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2486,
  "fields": {
    "question": 622,
    "text": "4",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2487,
  "fields": {
    "question": 622,
    "text": "2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2488,
  "fields": {
    "question": 622,
    "text": "1",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2489,
  "fields": {
    "question": 623,
    "text": "__iter__ と __next__ を実装し、消費されると再利用できないことが多い",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2490,
  "fields": {
    "question": 623,
    "text": "必ずリセットできる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2491,
  "fields": {
    "question": 623,
    "text": "len() が常に使える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2492,
  "fields": {
    "question": 623,
    "text": "スレッドセーフである",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2493,
  "fields": {
    "question": 624,
    "text": "イテラブルであり、全要素を保持しない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2494,
  "fields": {
    "question": 624,
    "text": "リストである",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2495,
  "fields": {
    "question": 624,
    "text": "生成時に全値を保持",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2496,
  "fields": {
    "question": 624,
    "text": "len() は使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2497,
  "fields": {
    "question": 625,
    "text": "sorted(x) は新しいリスト、x.sort() は破壊的",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2498,
  "fields": {
    "question": 625,
    "text": "どちらも新しいリストを返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2499,
  "fields": {
    "question": 625,
    "text": "どちらも None を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2500,
  "fields": {
    "question": 625,
    "text": "安定ソートではない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2501,
  "fields": {
    "question": 626,
    "text": "abc",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2502,
  "fields": {
    "question": 626,
    "text": "['a', 'b', 'c']",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2503,
  "fields": {
    "question": 626,
    "text": "a b c",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2504,
  "fields": {
    "question": 626,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2505,
  "fields": {
    "question": 627,
    "text": "'fedcba'",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2506,
  "fields": {
    "question": 627,
    "text": "'abcdef'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2507,
  "fields": {
    "question": 627,
    "text": "'abc'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2508,
  "fields": {
    "question": 627,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2509,
  "fields": {
    "question": 628,
    "text": "4",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2510,
  "fields": {
    "question": 628,
    "text": "2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2511,
  "fields": {
    "question": 628,
    "text": "None",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2512,
  "fields": {
    "question": 628,
    "text": "KeyError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2513,
  "fields": {
    "question": 629,
    "text": "except Exception as e: は広いので慎重に使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2514,
  "fields": {
    "question": 629,
    "text": "except は常に裸でよい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2515,
  "fields": {
    "question": 629,
    "text": "except BaseException 推奨",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2516,
  "fields": {
    "question": 629,
    "text": "try は複数書けない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2517,
  "fields": {
    "question": 630,
    "text": "資源の獲得と解放を安全に行う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2518,
  "fields": {
    "question": 630,
    "text": "GC を停止する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2519,
  "fields": {
    "question": 630,
    "text": "ロックを無効化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2520,
  "fields": {
    "question": 630,
    "text": "デコレータを定義する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2521,
  "fields": {
    "question": 631,
    "text": "True False",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2522,
  "fields": {
    "question": 631,
    "text": "False False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2523,
  "fields": {
    "question": 631,
    "text": "True True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2524,
  "fields": {
    "question": 631,
    "text": "False True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2525,
  "fields": {
    "question": 632,
    "text": "外側に漏れない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2526,
  "fields": {
    "question": 632,
    "text": "外側に残る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2527,
  "fields": {
    "question": 632,
    "text": "実装依存",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2528,
  "fields": {
    "question": 632,
    "text": "生成式のみ漏れない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2529,
  "fields": {
    "question": 633,
    "text": "{1, 2, 3}",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2530,
  "fields": {
    "question": 633,
    "text": "{2}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2531,
  "fields": {
    "question": 633,
    "text": "{1, 2}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2532,
  "fields": {
    "question": 633,
    "text": "{3}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2533,
  "fields": {
    "question": 634,
    "text": "_（アンダースコア）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2534,
  "fields": {
    "question": 634,
    "text": "placeholder",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2535,
  "fields": {
    "question": 634,
    "text": "ignore",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2536,
  "fields": {
    "question": 634,
    "text": "none",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2537,
  "fields": {
    "question": 635,
    "text": "pypypy",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2538,
  "fields": {
    "question": 635,
    "text": "py3",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2539,
  "fields": {
    "question": 635,
    "text": "py py py",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2540,
  "fields": {
    "question": 635,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2541,
  "fields": {
    "question": 636,
    "text": "NaN は自分自身と等しくない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2542,
  "fields": {
    "question": 636,
    "text": "NaN は自分自身と等しい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2543,
  "fields": {
    "question": 636,
    "text": "bool(NaN) は False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2544,
  "fields": {
    "question": 636,
    "text": "常に例外",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2545,
  "fields": {
    "question": 637,
    "text": "[(1, 10), (2, 20)]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2546,
  "fields": {
    "question": 637,
    "text": "[(1,10),(2,20),(3, None)]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2547,
  "fields": {
    "question": 637,
    "text": "[(1,10),(2,20),(None, None)]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2548,
  "fields": {
    "question": 637,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2549,
  "fields": {
    "question": 638,
    "text": "start 引数で開始番号を指定できる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2550,
  "fields": {
    "question": 638,
    "text": "0固定",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2551,
  "fields": {
    "question": 638,
    "text": "辞書専用",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2552,
  "fields": {
    "question": 638,
    "text": "反復を破壊する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2553,
  "fields": {
    "question": 639,
    "text": "タプルは不変だが可変要素を含みうる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2554,
  "fields": {
    "question": 639,
    "text": "タプルは可変",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2555,
  "fields": {
    "question": 639,
    "text": "常にハッシュ不可能",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2556,
  "fields": {
    "question": 639,
    "text": "空タプルは作れない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2557,
  "fields": {
    "question": 640,
    "text": "2",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2558,
  "fields": {
    "question": 640,
    "text": "0",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2559,
  "fields": {
    "question": 640,
    "text": "None",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2560,
  "fields": {
    "question": 640,
    "text": "KeyError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2561,
  "fields": {
    "question": 641,
    "text": "不変（immutable）である",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2562,
  "fields": {
    "question": 641,
    "text": "可変である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2563,
  "fields": {
    "question": 641,
    "text": "数値である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2564,
  "fields": {
    "question": 641,
    "text": "常に intern される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2565,
  "fields": {
    "question": 642,
    "text": "シーケンスでは要素、dict ではキーの包含を判定",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2566,
  "fields": {
    "question": 642,
    "text": "常に値の包含",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2567,
  "fields": {
    "question": 642,
    "text": "dict では値の包含",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2568,
  "fields": {
    "question": 642,
    "text": "set では使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2569,
  "fields": {
    "question": 643,
    "text": "(1, 2, 3)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2570,
  "fields": {
    "question": 643,
    "text": "(1, 2)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2571,
  "fields": {
    "question": 643,
    "text": "(3,)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2572,
  "fields": {
    "question": 643,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2573,
  "fields": {
    "question": 644,
    "text": "[0, 2, 4]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2574,
  "fields": {
    "question": 644,
    "text": "[1, 3, 5]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2575,
  "fields": {
    "question": 644,
    "text": "[2, 4]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2576,
  "fields": {
    "question": 644,
    "text": "[0, 1, 2, 3, 4]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2577,
  "fields": {
    "question": 645,
    "text": "is は同一性、== は等価性",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2578,
  "fields": {
    "question": 645,
    "text": "どちらも等価性",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2579,
  "fields": {
    "question": 645,
    "text": "どちらも同一性",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2580,
  "fields": {
    "question": 645,
    "text": "数値では常に同じ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2581,
  "fields": {
    "question": 646,
    "text": "True True となる可能性がある",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2582,
  "fields": {
    "question": 646,
    "text": "True False に必ずなる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2583,
  "fields": {
    "question": 646,
    "text": "False True になる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2584,
  "fields": {
    "question": 646,
    "text": "False False になる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2585,
  "fields": {
    "question": 647,
    "text": "[x if x%2==0 else -x for x in xs]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2586,
  "fields": {
    "question": 647,
    "text": "[x for x in xs if else x]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2587,
  "fields": {
    "question": 647,
    "text": "[if x in xs for x]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2588,
  "fields": {
    "question": 647,
    "text": "[x for if x in xs]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2589,
  "fields": {
    "question": 648,
    "text": "A\nC",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2590,
  "fields": {
    "question": 648,
    "text": "B\nC",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2591,
  "fields": {
    "question": 648,
    "text": "A\nB\nC",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2592,
  "fields": {
    "question": 648,
    "text": "C",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2593,
  "fields": {
    "question": 649,
    "text": "a と b は同じリストを参照",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2594,
  "fields": {
    "question": 649,
    "text": "異なるリストになる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2595,
  "fields": {
    "question": 649,
    "text": "SyntaxError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2596,
  "fields": {
    "question": 649,
    "text": "タプルが作られる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2597,
  "fields": {
    "question": 650,
    "text": "{'a', 'b', 'c'}",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2598,
  "fields": {
    "question": 650,
    "text": "{'a', 'a', 'b', 'c'}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2599,
  "fields": {
    "question": 650,
    "text": "['a','b','c']",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2600,
  "fields": {
    "question": 650,
    "text": "順序付きの{'a','b','c'}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2601,
  "fields": {
    "question": 651,
    "text": "関数内からモジュール変数を代入更新する際に必要",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2602,
  "fields": {
    "question": 651,
    "text": "読み取りにも必須",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2603,
  "fields": {
    "question": 651,
    "text": "クラス属性にも必要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2604,
  "fields": {
    "question": 651,
    "text": "ファイル間共有を自動化",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2605,
  "fields": {
    "question": 652,
    "text": "一つ外側のスコープ変数を再束縛",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2606,
  "fields": {
    "question": 652,
    "text": "グローバルへアクセス",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2607,
  "fields": {
    "question": 652,
    "text": "読み取り専用化",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2608,
  "fields": {
    "question": 652,
    "text": "GC 抑制",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2609,
  "fields": {
    "question": 653,
    "text": "True",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2610,
  "fields": {
    "question": 653,
    "text": "False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2611,
  "fields": {
    "question": 653,
    "text": "TypeError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2612,
  "fields": {
    "question": 653,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2613,
  "fields": {
    "question": 654,
    "text": "sorted(words, key=len)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2614,
  "fields": {
    "question": 654,
    "text": "sorted(words, cmp=len)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2615,
  "fields": {
    "question": 654,
    "text": "sorted(words, key=len())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2616,
  "fields": {
    "question": 654,
    "text": "sorted(key=len, words)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2617,
  "fields": {
    "question": 655,
    "text": "新しい文字列を返す（元は不変）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2618,
  "fields": {
    "question": 655,
    "text": "インプレース置換",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2619,
  "fields": {
    "question": 655,
    "text": "必ず1回だけ置換",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2620,
  "fields": {
    "question": 655,
    "text": "常に例外",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2621,
  "fields": {
    "question": 656,
    "text": "7",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2622,
  "fields": {
    "question": 656,
    "text": "0",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2623,
  "fields": {
    "question": 656,
    "text": "5",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2624,
  "fields": {
    "question": 656,
    "text": "True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2625,
  "fields": {
    "question": 657,
    "text": "f\"{1+2}\" は '3' を生成",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2626,
  "fields": {
    "question": 657,
    "text": "f は format と無関係",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2627,
  "fields": {
    "question": 657,
    "text": "式は使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2628,
  "fields": {
    "question": 657,
    "text": "Python 3.5 から導入",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2629,
  "fields": {
    "question": 658,
    "text": "式の中で代入が可能（3.8+）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2630,
  "fields": {
    "question": 658,
    "text": "代入文の完全な代替",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2631,
  "fields": {
    "question": 658,
    "text": "関数定義のみ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2632,
  "fields": {
    "question": 658,
    "text": "ジェネレータ内は不可",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2633,
  "fields": {
    "question": 659,
    "text": "Python 3.10 で導入",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2634,
  "fields": {
    "question": 659,
    "text": "Python 3.6 で導入",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2635,
  "fields": {
    "question": 659,
    "text": "常に例外",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2636,
  "fields": {
    "question": 659,
    "text": "辞書には使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2637,
  "fields": {
    "question": 660,
    "text": "3",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2638,
  "fields": {
    "question": 660,
    "text": "1",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2639,
  "fields": {
    "question": 660,
    "text": "2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2640,
  "fields": {
    "question": 660,
    "text": "IndexError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2641,
  "fields": {
    "question": 661,
    "text": "True False",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2642,
  "fields": {
    "question": 661,
    "text": "False True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2643,
  "fields": {
    "question": 661,
    "text": "True True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2644,
  "fields": {
    "question": 661,
    "text": "False False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2645,
  "fields": {
    "question": 662,
    "text": "b = a[:] で浅いコピー",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2646,
  "fields": {
    "question": 662,
    "text": "b = listref は深いコピー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2647,
  "fields": {
    "question": 662,
    "text": "deepcopy と同じ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2648,
  "fields": {
    "question": 662,
    "text": "コピー不可",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2649,
  "fields": {
    "question": 663,
    "text": "10 10",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2650,
  "fields": {
    "question": 663,
    "text": "None 10",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2651,
  "fields": {
    "question": 663,
    "text": "10 None",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2652,
  "fields": {
    "question": 663,
    "text": "KeyError KeyError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2653,
  "fields": {
    "question": 664,
    "text": "[2, 3, 4]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2654,
  "fields": {
    "question": 664,
    "text": "[1, 2, 3]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2655,
  "fields": {
    "question": 664,
    "text": "[1, 3, 5]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2656,
  "fields": {
    "question": 664,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2657,
  "fields": {
    "question": 665,
    "text": "1.0",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2658,
  "fields": {
    "question": 665,
    "text": "1",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2659,
  "fields": {
    "question": 665,
    "text": "1.41",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2660,
  "fields": {
    "question": 665,
    "text": "2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2661,
  "fields": {
    "question": 666,
    "text": "明示的なエンコード/デコードが必要",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2662,
  "fields": {
    "question": 666,
    "text": "自動相互変換",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2663,
  "fields": {
    "question": 666,
    "text": "== は使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2664,
  "fields": {
    "question": 666,
    "text": "bytes は可変",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2665,
  "fields": {
    "question": 667,
    "text": "False True",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2666,
  "fields": {
    "question": 667,
    "text": "True False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2667,
  "fields": {
    "question": 667,
    "text": "False False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2668,
  "fields": {
    "question": 667,
    "text": "True True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2669,
  "fields": {
    "question": 668,
    "text": "変更不要ならタプルが意図明示",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2670,
  "fields": {
    "question": 668,
    "text": "常にリスト",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2671,
  "fields": {
    "question": 668,
    "text": "タプルは遅い",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2672,
  "fields": {
    "question": 668,
    "text": "タプルはイテラブルでない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2673,
  "fields": {
    "question": 669,
    "text": "True",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2674,
  "fields": {
    "question": 669,
    "text": "False",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2675,
  "fields": {
    "question": 669,
    "text": "KeyError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2676,
  "fields": {
    "question": 669,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2677,
  "fields": {
    "question": 670,
    "text": "11",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2678,
  "fields": {
    "question": 670,
    "text": "21",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2679,
  "fields": {
    "question": 670,
    "text": "12",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2680,
  "fields": {
    "question": 670,
    "text": "22",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2681,
  "fields": {
    "question": 671,
    "text": "(0, 2, 4)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2682,
  "fields": {
    "question": 671,
    "text": "(0, 1, 2, 3, 4)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2683,
  "fields": {
    "question": 671,
    "text": "(2, 4)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2684,
  "fields": {
    "question": 671,
    "text": "(0, 3)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2685,
  "fields": {
    "question": 672,
    "text": "3.7+ では挿入順保持が仕様",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2686,
  "fields": {
    "question": 672,
    "text": "常に未定義",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2687,
  "fields": {
    "question": 672,
    "text": "CPython だけの実装詳細",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2688,
  "fields": {
    "question": 672,
    "text": "OrderedDict だけが順序持ち",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2689,
  "fields": {
    "question": 673,
    "text": "__contains__ があればそれを使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2690,
  "fields": {
    "question": 673,
    "text": "常に線形走査",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2691,
  "fields": {
    "question": 673,
    "text": "ハッシュは使わない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2692,
  "fields": {
    "question": 673,
    "text": "__eq__ のみ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2693,
  "fields": {
    "question": 674,
    "text": "123",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2694,
  "fields": {
    "question": 674,
    "text": "1 2 3",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2695,
  "fields": {
    "question": 674,
    "text": "[1, 2, 3]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2696,
  "fields": {
    "question": 674,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2697,
  "fields": {
    "question": 675,
    "text": "SyntaxError（左辺先頭の * は単独不可）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2698,
  "fields": {
    "question": 675,
    "text": "a は (1,2,3)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2699,
  "fields": {
    "question": 675,
    "text": "a は [1,2,3]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2700,
  "fields": {
    "question": 675,
    "text": "a は 1",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2701,
  "fields": {
    "question": 676,
    "text": "'one'",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2702,
  "fields": {
    "question": 676,
    "text": "'T'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2703,
  "fields": {
    "question": 676,
    "text": "KeyError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2704,
  "fields": {
    "question": 676,
    "text": "未定義",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2705,
  "fields": {
    "question": 677,
    "text": "遅延評価で必要時に生成",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2706,
  "fields": {
    "question": 677,
    "text": "常にリストを返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2707,
  "fields": {
    "question": 677,
    "text": "len() が使える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2708,
  "fields": {
    "question": 677,
    "text": "要素は複製される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2709,
  "fields": {
    "question": 678,
    "text": "[]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2710,
  "fields": {
    "question": 678,
    "text": "[[]]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2711,
  "fields": {
    "question": 678,
    "text": "TypeError",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2712,
  "fields": {
    "question": 678,
    "text": "0",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2713,
  "fields": {
    "question": 679,
    "text": "[1, 9, 8, 3]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2714,
  "fields": {
    "question": 679,
    "text": "[1, [9,8], 3]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2715,
  "fields": {
    "question": 679,
    "text": "[1, 9, 3]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2716,
  "fields": {
    "question": 679,
    "text": "[1, 8, 9, 3]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2717,
  "fields": {
    "question": 680,
    "text": "10",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2718,
  "fields": {
    "question": 680,
    "text": "5",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2719,
  "fields": {
    "question": 680,
    "text": "0",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2720,
  "fields": {
    "question": 680,
    "text": "エラー",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2721,
  "fields": {
    "question": 681,
    "text": "class Foo: pass",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2722,
  "fields": {
    "question": 681,
    "text": "def class Foo(): pass",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2723,
  "fields": {
    "question": 681,
    "text": "class Foo(): return 1",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2724,
  "fields": {
    "question": 681,
    "text": "class: Foo pass",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2725,
  "fields": {
    "question": 682,
    "text": "インスタンス生成後に初期化を行うインスタンスメソッド",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2726,
  "fields": {
    "question": 682,
    "text": "インスタンスの生成そのものを行う特殊メソッド",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2727,
  "fields": {
    "question": 682,
    "text": "クラス定義時に1回だけ呼ばれるフック",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2728,
  "fields": {
    "question": 682,
    "text": "ガベージコレクション直前に呼ばれる解放処理",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2729,
  "fields": {
    "question": 683,
    "text": "クラスのインスタンスを作成し、そのインスタンスを返すクラスメソッド（通常は静的に解決）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2730,
  "fields": {
    "question": 683,
    "text": "インスタンスの属性を初期化するための通常メソッド",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2731,
  "fields": {
    "question": 683,
    "text": "常に **init** より後に呼ばれる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2732,
  "fields": {
    "question": 683,
    "text": "デストラクタの別名である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2733,
  "fields": {
    "question": 684,
    "text": "インスタンス属性は各インスタンスごとに保持され、クラス属性はクラスに共有される",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2734,
  "fields": {
    "question": 684,
    "text": "どちらも必ず共有される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2735,
  "fields": {
    "question": 684,
    "text": "クラス属性は読み取り不可である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2736,
  "fields": {
    "question": 684,
    "text": "インスタンス属性は **init** では設定できない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2737,
  "fields": {
    "question": 685,
    "text": "暗黙の第1引数（self / cls）を受け取らない関数をクラスの名前空間にぶら下げる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2738,
  "fields": {
    "question": 685,
    "text": "必ずクラスオブジェクトを第1引数に受け取る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2739,
  "fields": {
    "question": 685,
    "text": "必ずインスタンスを第1引数に受け取る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2740,
  "fields": {
    "question": 685,
    "text": "継承時に自動でオーバーライドされない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2741,
  "fields": {
    "question": 686,
    "text": "代替コンストラクタ（from_*）などクラスに紐づく生成ロジックを提供したいとき",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2742,
  "fields": {
    "question": 686,
    "text": "インスタンスごとに状態を変更したいとき",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2743,
  "fields": {
    "question": 686,
    "text": "グローバル関数を格納したいとき",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2744,
  "fields": {
    "question": 686,
    "text": "デコレータを適用できないときの代替",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2745,
  "fields": {
    "question": 687,
    "text": "属性アクセスのインターフェイスでゲッター／セッター／デリーターをメソッドで実装できる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2746,
  "fields": {
    "question": 687,
    "text": "メソッド呼び出しを高速化するための機能である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2747,
  "fields": {
    "question": 687,
    "text": "読み取り専用属性は定義できない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2748,
  "fields": {
    "question": 687,
    "text": "クラス属性にのみ適用できる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2749,
  "fields": {
    "question": 688,
    "text": "**repr** は開発者向けの詳細・再現可能な表現、**str** はユーザー向けの可読表現",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2750,
  "fields": {
    "question": 688,
    "text": "どちらも全く同じ目的であり区別しない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2751,
  "fields": {
    "question": 688,
    "text": "**str** は eval 可能な表現でなければならない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2752,
  "fields": {
    "question": 688,
    "text": "**repr** は常に空文字を返すべき",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2753,
  "fields": {
    "question": 689,
    "text": "**add** や **eq** などの特殊メソッドを実装することで演算子の意味を自分の型に合わせて定義できる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2754,
  "fields": {
    "question": 689,
    "text": "演算子のオーバーロードはPythonでは不可能である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2755,
  "fields": {
    "question": 689,
    "text": "**eq** は必ずしも対称性を保つ必要はない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2756,
  "fields": {
    "question": 689,
    "text": "**hash** を実装しても **eq** とは無関係でよい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2757,
  "fields": {
    "question": 690,
    "text": "インスタンス辞書を持たず固定スロットのみになり、メモリ削減や属性アクセスの高速化が見込める",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2758,
  "fields": {
    "question": 690,
    "text": "メソッド解決順序（MRO）を変更する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2759,
  "fields": {
    "question": 690,
    "text": "クラス属性を自動的にプロパティに変換する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2760,
  "fields": {
    "question": 690,
    "text": "ガーベージコレクションを無効化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2761,
  "fields": {
    "question": 691,
    "text": "Python 3 は C3 線形化に基づく順序で基底クラスを探索する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2762,
  "fields": {
    "question": 691,
    "text": "深さ優先で常に左から右へ探索し循環も許す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2763,
  "fields": {
    "question": 691,
    "text": "多重継承では順序は未定義である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2764,
  "fields": {
    "question": 691,
    "text": "super() は常に直接の親クラスだけを指す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2765,
  "fields": {
    "question": 692,
    "text": "Python 3 では通常 `super()` と引数なしで呼び、MRO に従って次のメソッドを解決させる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2766,
  "fields": {
    "question": 692,
    "text": "常に `super(CurrentClass, self)` と明示しなければならない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2767,
  "fields": {
    "question": 692,
    "text": "多重継承では使用不可である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2768,
  "fields": {
    "question": 692,
    "text": "静的メソッド内でしか使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2769,
  "fields": {
    "question": 693,
    "text": "**get** / **set** / **delete** のいずれかを実装し、属性アクセスの振る舞いをカスタマイズするオブジェクト",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2770,
  "fields": {
    "question": 693,
    "text": "抽象基底クラスの別名である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2771,
  "fields": {
    "question": 693,
    "text": "プロパティを禁止するメカニズム",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2772,
  "fields": {
    "question": 693,
    "text": "メタクラスのことを指す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2773,
  "fields": {
    "question": 694,
    "text": "2つのオブジェクトが **eq** で等しいなら、それらの **hash** の値も等しくあるべき",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2774,
  "fields": {
    "question": 694,
    "text": "**hash** は **eq** と独立でよい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2775,
  "fields": {
    "question": 694,
    "text": "イミュータブル型では **eq** を定義してはならない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2776,
  "fields": {
    "question": 694,
    "text": "集合や辞書のキーには **eq** が無視される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2777,
  "fields": {
    "question": 695,
    "text": "インターフェイスを定義し、サブクラスに実装を強制する（未実装ならインスタンス化不可）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2778,
  "fields": {
    "question": 695,
    "text": "メソッドを自動生成して実装不要にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2779,
  "fields": {
    "question": 695,
    "text": "継承を禁止する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2780,
  "fields": {
    "question": 695,
    "text": "メソッド解決順序をランダム化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2781,
  "fields": {
    "question": 696,
    "text": "フィールド定義から **init** / **repr** / **eq** 等を自動生成する（デフォルト不変ではない）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2782,
  "fields": {
    "question": 696,
    "text": "常に不変データ型を生成する（変更不可）",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2783,
  "fields": {
    "question": 696,
    "text": "任意のクラスを自動的にシングルトンにする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2784,
  "fields": {
    "question": 696,
    "text": "ガーベージコレクション対象外にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2785,
  "fields": {
    "question": 697,
    "text": "サブクラス定義時に自動的に呼ばれるフックで、共通の検証や登録処理が書ける",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2786,
  "fields": {
    "question": 697,
    "text": "インスタンス生成時に呼ばれる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2787,
  "fields": {
    "question": 697,
    "text": "モジュール読み込み時に1回だけ呼ばれる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2788,
  "fields": {
    "question": 697,
    "text": "デコレータのショートハンドである",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2789,
  "fields": {
    "question": 698,
    "text": "**getattr** は見つからない属性に対してのみ呼ばれ、**getattribute** はすべての属性取得で呼ばれる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2790,
  "fields": {
    "question": 698,
    "text": "どちらも未定義属性には呼ばれない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2791,
  "fields": {
    "question": 698,
    "text": "**getattribute** は辞書型にしか使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2792,
  "fields": {
    "question": 698,
    "text": "**getattr** はクラス属性にしか作用しない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2793,
  "fields": {
    "question": 699,
    "text": "@dataclass(frozen=True) を用い、**hash** と **eq** の整合を保つ",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2794,
  "fields": {
    "question": 699,
    "text": "常に **setattr** をオーバーライドして何でも拒否する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2795,
  "fields": {
    "question": 699,
    "text": "**eq** を未定義にし、ハッシュは乱数で返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2796,
  "fields": {
    "question": 699,
    "text": "クラス属性に状態を格納して共有する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2797,
  "fields": {
    "question": 700,
    "text": "同名のインスタンス属性を設定すると、そのインスタンスに限ってクラス属性を隠す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2798,
  "fields": {
    "question": 700,
    "text": "インスタンス属性は常にクラス属性を書き換える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2799,
  "fields": {
    "question": 700,
    "text": "クラス属性は常にインスタンス属性より優先される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2800,
  "fields": {
    "question": 700,
    "text": "両者が同名でも衝突は起こらない（合成される）",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2801,
  "fields": {
    "question": 701,
    "text": "同じインターフェイス（メソッド名）を持つ異なるクラスに対して同一の操作を適用できること",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2802,
  "fields": {
    "question": 701,
    "text": "型変換を禁止すること",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2803,
  "fields": {
    "question": 701,
    "text": "単一継承しか使わないこと",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2804,
  "fields": {
    "question": 701,
    "text": "継承階層を持たないこと",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2805,
  "fields": {
    "question": 702,
    "text": "インスタンスを関数のように呼び出せるようにする（呼び出し可能オブジェクト）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2806,
  "fields": {
    "question": 702,
    "text": "常にコンストラクタとして呼ばれる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2807,
  "fields": {
    "question": 702,
    "text": "属性アクセスを横取りする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2808,
  "fields": {
    "question": 702,
    "text": "等価性判定を行う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2809,
  "fields": {
    "question": 703,
    "text": "**enter** と **exit**",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2810,
  "fields": {
    "question": 703,
    "text": "**open** と **close**",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2811,
  "fields": {
    "question": 703,
    "text": "**begin** と **end**",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2812,
  "fields": {
    "question": 703,
    "text": "**with** と **leave**",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2813,
  "fields": {
    "question": 704,
    "text": "**iter** と **next** を実装する（**iter** は self を返すのが一般的）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2814,
  "fields": {
    "question": 704,
    "text": "**len** と **getitem** を実装する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2815,
  "fields": {
    "question": 704,
    "text": "**iter** のみ実装する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2816,
  "fields": {
    "question": 704,
    "text": "**next** のみ実装する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2817,
  "fields": {
    "question": 705,
    "text": "**contains**",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2818,
  "fields": {
    "question": 705,
    "text": "**has**",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2819,
  "fields": {
    "question": 705,
    "text": "**find**",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2820,
  "fields": {
    "question": 705,
    "text": "**include**",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2821,
  "fields": {
    "question": 706,
    "text": "クラスの生成過程をカスタマイズするための“クラスのクラス”で、type を基底として作られる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2822,
  "fields": {
    "question": 706,
    "text": "インスタンスの生成を高速化するためのキャッシュである",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2823,
  "fields": {
    "question": 706,
    "text": "デコレータのシンタックスシュガーに過ぎない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2824,
  "fields": {
    "question": 706,
    "text": "関数の別名である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2825,
  "fields": {
    "question": 707,
    "text": "クラス定義後に属性の追加やラップを行い横断的関心事（登録・検証）を付与する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2826,
  "fields": {
    "question": 707,
    "text": "関数をメソッドへ自動変換するためだけに使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2827,
  "fields": {
    "question": 707,
    "text": "インスタンス生成を禁止する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2828,
  "fields": {
    "question": 707,
    "text": "MRO を変更する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2829,
  "fields": {
    "question": 708,
    "text": "“〜は…である（is-a）” 関係なら継承、“〜は…を持つ（has-a）” 関係なら合成を優先する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2830,
  "fields": {
    "question": 708,
    "text": "常に継承を使うべきで、合成は避ける",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2831,
  "fields": {
    "question": 708,
    "text": "常に合成を使うべきで、継承は避ける",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2832,
  "fields": {
    "question": 708,
    "text": "選択はランダムで問題ない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2833,
  "fields": {
    "question": 709,
    "text": "予期しないタイミングで呼ばれる可能性があり、リソース解放の信頼できる手段としては用いるべきでない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2834,
  "fields": {
    "question": 709,
    "text": "必ずガーベージコレクタ終了時に同期的に呼ばれる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2835,
  "fields": {
    "question": 709,
    "text": "ファイルやロックの解放は **del** に集約すべき",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2836,
  "fields": {
    "question": 709,
    "text": "**enter** と対で必ず実装する必要がある",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2837,
  "fields": {
    "question": 710,
    "text": "インスタンス生成時に値を確定させる必要があり、`__init__` では後から内部状態を変更できないため",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2838,
  "fields": {
    "question": 710,
    "text": "不変型は `__init__` が呼ばれない仕様のため",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2839,
  "fields": {
    "question": 710,
    "text": "`__new__` はデストラクタだから",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2840,
  "fields": {
    "question": 710,
    "text": "ハッシュ値を無視できるから",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2841,
  "fields": {
    "question": 711,
    "text": "合成デコレータ `functools.total_ordering` を使うと、**eq** と1つの順序比較を実装するだけで他を補完できる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2842,
  "fields": {
    "question": 711,
    "text": "すべての比較演算子を自動で実装する仕組みは存在しない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2843,
  "fields": {
    "question": 711,
    "text": "**lt** だけを実装すれば **eq** は不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2844,
  "fields": {
    "question": 711,
    "text": "比較演算子は **cmp** で一括して定義する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2845,
  "fields": {
    "question": 712,
    "text": "静的解析や補完・ドキュメント性向上のための注釈であり、実行時の挙動は基本的に変わらない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2846,
  "fields": {
    "question": 712,
    "text": "実行時に必ず厳格な型チェックが行われる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2847,
  "fields": {
    "question": 712,
    "text": "型ヒントを付けると高速化される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2848,
  "fields": {
    "question": 712,
    "text": "C拡張に自動変換される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2849,
  "fields": {
    "question": 713,
    "text": "int または None を許す（Union[int, None] の別名）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2850,
  "fields": {
    "question": 713,
    "text": "int かつ None を同時に満たす",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2851,
  "fields": {
    "question": 713,
    "text": "None のみを許す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2852,
  "fields": {
    "question": 713,
    "text": "int のサブクラスのみ許す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2853,
  "fields": {
    "question": 714,
    "text": "int | str",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2854,
  "fields": {
    "question": 714,
    "text": "Union[int]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2855,
  "fields": {
    "question": 714,
    "text": "int || str",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2856,
  "fields": {
    "question": 714,
    "text": "int or str",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2857,
  "fields": {
    "question": 715,
    "text": "Any は“何でもあり”として型検査を通すが、object は“何でも受け取れるが何も分からない”として扱われる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2858,
  "fields": {
    "question": 715,
    "text": "どちらも完全に同じ意味",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2859,
  "fields": {
    "question": 715,
    "text": "object は数値だけを表す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2860,
  "fields": {
    "question": 715,
    "text": "Any は使用禁止の予約語",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2861,
  "fields": {
    "question": 716,
    "text": "Callable[[str, int], int]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2862,
  "fields": {
    "question": 716,
    "text": "Callable(str, int) -> int",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2863,
  "fields": {
    "question": 716,
    "text": "Callable[int](str, int)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2864,
  "fields": {
    "question": 716,
    "text": "Callable[[str, int]]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2865,
  "fields": {
    "question": 717,
    "text": "ジェネリック関数／クラスで“同じ型であること”の関係を表現するための型パラメータ",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2866,
  "fields": {
    "question": 717,
    "text": "列挙型を作るための仕組み",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2867,
  "fields": {
    "question": 717,
    "text": "ランタイムの変数束縛を高速化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2868,
  "fields": {
    "question": 717,
    "text": "例外型を生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2869,
  "fields": {
    "question": 718,
    "text": "クラスが型パラメータを取り、要素型などを伝播させたい",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2870,
  "fields": {
    "question": 718,
    "text": "関数を同期から非同期に変換したい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2871,
  "fields": {
    "question": 718,
    "text": "属性アクセスを禁止したい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2872,
  "fields": {
    "question": 718,
    "text": "ガーベジコレクションを無効化したい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2873,
  "fields": {
    "question": 719,
    "text": "指定したリテラル値の集合のみを許す型を表す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2874,
  "fields": {
    "question": 719,
    "text": "整数リテラルだけに使える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2875,
  "fields": {
    "question": 719,
    "text": "実行時に値を自動変換する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2876,
  "fields": {
    "question": 719,
    "text": "文字列正規表現を表す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2877,
  "fields": {
    "question": 720,
    "text": "再代入やオーバーライドを意図しない“最終”を示す注釈",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2878,
  "fields": {
    "question": 720,
    "text": "定数畳み込みを強制する実行時機能",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2879,
  "fields": {
    "question": 720,
    "text": "C拡張としてコンパイルする指示",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2880,
  "fields": {
    "question": 720,
    "text": "ガーベージコレクション対象外にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2881,
  "fields": {
    "question": 721,
    "text": "辞書の各キーに対応する値の型を静的に記述する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2882,
  "fields": {
    "question": 721,
    "text": "辞書をイミュータブル化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2883,
  "fields": {
    "question": 721,
    "text": "辞書を自動的にJSONへ変換する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2884,
  "fields": {
    "question": 721,
    "text": "辞書に順序保証を付与する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2885,
  "fields": {
    "question": 722,
    "text": "メソッド集合に基づく構造的サブタイプ（ダックタイピング）を型として表す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2886,
  "fields": {
    "question": 722,
    "text": "継承関係がある型にしか適用できない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2887,
  "fields": {
    "question": 722,
    "text": "実装を強制する実行時ミキシン",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2888,
  "fields": {
    "question": 722,
    "text": "抽象基底クラスのみの別名",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2889,
  "fields": {
    "question": 723,
    "text": "型に追加メタデータ（制約や説明）を付加する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2890,
  "fields": {
    "question": 723,
    "text": "型を実行時に最適化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2891,
  "fields": {
    "question": 723,
    "text": "複数の型を同時に持たせる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2892,
  "fields": {
    "question": 723,
    "text": "型チェックを無効化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2893,
  "fields": {
    "question": 724,
    "text": "同じ実体でも“別名の新しい型”として区別するための薄い型付けを提供する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2894,
  "fields": {
    "question": 724,
    "text": "実行時に新しいクラスを動的生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2895,
  "fields": {
    "question": 724,
    "text": "値を暗号化して保持する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2896,
  "fields": {
    "question": 724,
    "text": "必ずランタイムで性能向上が得られる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2897,
  "fields": {
    "question": 725,
    "text": "正常には“戻らない”関数（例外送出、sys.exit）を表す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2898,
  "fields": {
    "question": 725,
    "text": "戻り値が None の関数を表す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2899,
  "fields": {
    "question": 725,
    "text": "サスペンド関数を表す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2900,
  "fields": {
    "question": 725,
    "text": "末尾再帰を表す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2901,
  "fields": {
    "question": 726,
    "text": "None を含む場合だけ Optional[T] を使い、それ以外の複数型は Union を使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2902,
  "fields": {
    "question": 726,
    "text": "全て Optional で表せるため Union は不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2903,
  "fields": {
    "question": 726,
    "text": "全て Union で表し Optional は不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2904,
  "fields": {
    "question": 726,
    "text": "両者はランタイムで同一視されるため任意",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2905,
  "fields": {
    "question": 727,
    "text": "型チェッカへ“ここではこの型として扱う”と伝えるヒントで、実行時の変換は行わない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2906,
  "fields": {
    "question": 727,
    "text": "実行時にダウンキャストを強制する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2907,
  "fields": {
    "question": 727,
    "text": "型チェックをコンパイル時に無効化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2908,
  "fields": {
    "question": 727,
    "text": "値をディープコピーする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2909,
  "fields": {
    "question": 728,
    "text": "関数やクラスの __annotations__ を評価して実際の型を辞書で返すユーティリティ",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2910,
  "fields": {
    "question": 728,
    "text": "型を実行時に最適化する JIT",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2911,
  "fields": {
    "question": 728,
    "text": "注釈を文字列へ変換するだけの関数",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2912,
  "fields": {
    "question": 728,
    "text": "IDE 専用の内部API",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2913,
  "fields": {
    "question": 729,
    "text": "注釈を文字列で書く、または `from __future__ import annotations` を利用する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2914,
  "fields": {
    "question": 729,
    "text": "常に NewType を使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2915,
  "fields": {
    "question": 729,
    "text": "必ず Protocol を使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2916,
  "fields": {
    "question": 729,
    "text": "対処法は存在しない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2917,
  "fields": {
    "question": 730,
    "text": "高階関数で“引数の形”そのものを別関数へ伝播させる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2918,
  "fields": {
    "question": 730,
    "text": "戻り値型だけを伝播させる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2919,
  "fields": {
    "question": 730,
    "text": "例外型の集合を表す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2920,
  "fields": {
    "question": 730,
    "text": "ジェネレータの要素型を表す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2921,
  "fields": {
    "question": 731,
    "text": "静的型チェッカ向けに複数シグネチャを宣言し、実装は1つだけ提供する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2922,
  "fields": {
    "question": 731,
    "text": "実行時に複数実装を自動切替する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2923,
  "fields": {
    "question": 731,
    "text": "JIT最適化のためのヒント",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2924,
  "fields": {
    "question": 731,
    "text": "例外の型を自動推論する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2925,
  "fields": {
    "question": 732,
    "text": "型ヒントは実行時に強制されないため、必要なら pydantic/attrs/自前のバリデーション等で補う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2926,
  "fields": {
    "question": 732,
    "text": "型ヒントだけで常にランタイム検証される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2927,
  "fields": {
    "question": 732,
    "text": "型ヒントはテストを不要にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2928,
  "fields": {
    "question": 732,
    "text": "型ヒントは例外処理を不要にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2929,
  "fields": {
    "question": 733,
    "text": "'a b c'.split()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2930,
  "fields": {
    "question": 733,
    "text": "split('a b c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2931,
  "fields": {
    "question": 733,
    "text": "list.split('a b c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2932,
  "fields": {
    "question": 733,
    "text": "'a b c'.divide()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2933,
  "fields": {
    "question": 734,
    "text": "', '.join(['apple', 'banana'])",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2934,
  "fields": {
    "question": 734,
    "text": "join([', ', 'apple', 'banana'])",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2935,
  "fields": {
    "question": 734,
    "text": "['apple','banana'].join(', ')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2936,
  "fields": {
    "question": 734,
    "text": "concat(', ', ['apple','banana'])",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2937,
  "fields": {
    "question": 735,
    "text": "strip()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2938,
  "fields": {
    "question": 735,
    "text": "trim()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2939,
  "fields": {
    "question": 735,
    "text": "cut()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2940,
  "fields": {
    "question": 735,
    "text": "remove()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2941,
  "fields": {
    "question": 736,
    "text": "url.startswith('http')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2942,
  "fields": {
    "question": 736,
    "text": "'http' in url",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2943,
  "fields": {
    "question": 736,
    "text": "url.find('http') == 0",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2944,
  "fields": {
    "question": 736,
    "text": "url.endswith('http')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2945,
  "fields": {
    "question": 737,
    "text": "a.lower() == b.lower()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2946,
  "fields": {
    "question": 737,
    "text": "a == b == ignorecase",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2947,
  "fields": {
    "question": 737,
    "text": "casefold(a) == casefold(b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2948,
  "fields": {
    "question": 737,
    "text": "a.swapcase() == b.swapcase()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2949,
  "fields": {
    "question": 738,
    "text": "s.replace('cat', 'dog')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2950,
  "fields": {
    "question": 738,
    "text": "s.sub('cat', 'dog')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2951,
  "fields": {
    "question": 738,
    "text": "replace(s, 'cat', 'dog')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2952,
  "fields": {
    "question": 738,
    "text": "s.rename('cat', 'dog')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2953,
  "fields": {
    "question": 739,
    "text": "textwrap.fill(text, width=70)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2954,
  "fields": {
    "question": 739,
    "text": "wrap(text, width=70)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2955,
  "fields": {
    "question": 739,
    "text": "text.fill(text, 70)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2956,
  "fields": {
    "question": 739,
    "text": "textwrap.break(text, 70)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2957,
  "fields": {
    "question": 740,
    "text": "textwrap.dedent(s)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2958,
  "fields": {
    "question": 740,
    "text": "s.stripindent()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2959,
  "fields": {
    "question": 740,
    "text": "textwrap.unindent(s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2960,
  "fields": {
    "question": 740,
    "text": "s.rstripindent()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2961,
  "fields": {
    "question": 741,
    "text": "chr(9731)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2962,
  "fields": {
    "question": 741,
    "text": "char(9731)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2963,
  "fields": {
    "question": 741,
    "text": "tochar(9731)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2964,
  "fields": {
    "question": 741,
    "text": "unicode(9731)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2965,
  "fields": {
    "question": 742,
    "text": "r'...\\path\\to\\file'",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2966,
  "fields": {
    "question": 742,
    "text": "'...\\path\\to\\file'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2967,
  "fields": {
    "question": 742,
    "text": "R\".../path/to/file\"",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2968,
  "fields": {
    "question": 742,
    "text": "raw('...')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2969,
  "fields": {
    "question": 743,
    "text": "^abc",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2970,
  "fields": {
    "question": 743,
    "text": "abc$",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2971,
  "fields": {
    "question": 743,
    "text": ".*abc",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2972,
  "fields": {
    "question": 743,
    "text": "[abc]^",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2973,
  "fields": {
    "question": 744,
    "text": "\\d{3}",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2974,
  "fields": {
    "question": 744,
    "text": "\\d\\d",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2975,
  "fields": {
    "question": 744,
    "text": "\\d+?{3}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2976,
  "fields": {
    "question": 744,
    "text": "[0-9]{2,}?",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2977,
  "fields": {
    "question": 745,
    "text": "re.search(pattern, text)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2978,
  "fields": {
    "question": 745,
    "text": "re.findall(pattern, text)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2979,
  "fields": {
    "question": 745,
    "text": "re.finditer(pattern, text)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2980,
  "fields": {
    "question": 745,
    "text": "re.matchall(pattern, text)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2981,
  "fields": {
    "question": 746,
    "text": "re.fullmatch(p, s)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2982,
  "fields": {
    "question": 746,
    "text": "re.match(p, s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2983,
  "fields": {
    "question": 746,
    "text": "re.search(p, s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2984,
  "fields": {
    "question": 746,
    "text": "re.equals(p, s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2985,
  "fields": {
    "question": 747,
    "text": "re.search(p, s, flags=re.IGNORECASE)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2986,
  "fields": {
    "question": 747,
    "text": "re.search(p, s, ignore_case=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2987,
  "fields": {
    "question": 747,
    "text": "re.search(p, s).lower()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2988,
  "fields": {
    "question": 747,
    "text": "re.search(p.lower(), s.lower(), re.IGNORECASE)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2989,
  "fields": {
    "question": 748,
    "text": "re.sub(r'(foo)(bar)', r'\\1-\\2', s)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2990,
  "fields": {
    "question": 748,
    "text": "re.sub('(foo)(bar)', '\\\\[1]-\\\\[2]', s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2991,
  "fields": {
    "question": 748,
    "text": "re.sub('(foo)(bar)', '$1-$2', s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2992,
  "fields": {
    "question": 748,
    "text": "re.sub('(foo)(bar)', '\\g1-\\g2', s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2993,
  "fields": {
    "question": 749,
    "text": "s.encode('utf-8')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2994,
  "fields": {
    "question": 749,
    "text": "bytes(s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2995,
  "fields": {
    "question": 749,
    "text": "utf8(s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2996,
  "fields": {
    "question": 749,
    "text": "encode(s, 'utf8')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2997,
  "fields": {
    "question": 750,
    "text": "b.decode('utf-8')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 2998,
  "fields": {
    "question": 750,
    "text": "str(b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 2999,
  "fields": {
    "question": 750,
    "text": "text(b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3000,
  "fields": {
    "question": 750,
    "text": "b.to_str('utf-8')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3001,
  "fields": {
    "question": 751,
    "text": "s.replace('\\r\\n', '\\n').replace('\\r', '\\n')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3002,
  "fields": {
    "question": 751,
    "text": "s.normalize_lines()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3003,
  "fields": {
    "question": 751,
    "text": "s.replace('\\n', '\\r\\n')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3004,
  "fields": {
    "question": 751,
    "text": "s.splitlineskeep()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3005,
  "fields": {
    "question": 752,
    "text": "s.splitlines()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3006,
  "fields": {
    "question": 752,
    "text": "s.split('\\n', keepends=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3007,
  "fields": {
    "question": 752,
    "text": "s.lines()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3008,
  "fields": {
    "question": 752,
    "text": "s.to_lines()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3009,
  "fields": {
    "question": 753,
    "text": "'a,b,,c'.split(',')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3010,
  "fields": {
    "question": 753,
    "text": "'a,b,,c'.split()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3011,
  "fields": {
    "question": 753,
    "text": "re.split('\\s+', 'a,b,,c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3012,
  "fields": {
    "question": 753,
    "text": "split(',', 'a,b,,c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3013,
  "fields": {
    "question": 754,
    "text": "'Hello'.center(10)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3014,
  "fields": {
    "question": 754,
    "text": "'Hello'.align(10, 'center')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3015,
  "fields": {
    "question": 754,
    "text": "center('Hello', 10)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3016,
  "fields": {
    "question": 754,
    "text": "'Hello'.pad(10)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3017,
  "fields": {
    "question": 755,
    "text": "s.expandtabs(4)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3018,
  "fields": {
    "question": 755,
    "text": "s.tab2space(4)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3019,
  "fields": {
    "question": 755,
    "text": "s.replace('\\t', ' '*4, tabs=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3020,
  "fields": {
    "question": 755,
    "text": "s.untabify()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3021,
  "fields": {
    "question": 756,
    "text": "s.replace('a', 'A', 1)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3022,
  "fields": {
    "question": 756,
    "text": "s.replace('a', 'A', first=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3023,
  "fields": {
    "question": 756,
    "text": "s.sub('a', 'A', count=1)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3024,
  "fields": {
    "question": 756,
    "text": "s.replaceonce('a', 'A')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3025,
  "fields": {
    "question": 757,
    "text": "''.join(ch for ch in s if ch.isdigit())",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3026,
  "fields": {
    "question": 757,
    "text": "filter(s, isdigit).join('')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3027,
  "fields": {
    "question": 757,
    "text": "s.onlydigits()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3028,
  "fields": {
    "question": 757,
    "text": "re.findall('\\d', s).join('')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3029,
  "fields": {
    "question": 758,
    "text": "if not s:",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3030,
  "fields": {
    "question": 758,
    "text": "if len(s) is 0:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3031,
  "fields": {
    "question": 758,
    "text": "if s == None:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3032,
  "fields": {
    "question": 758,
    "text": "if s equals '':",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3033,
  "fields": {
    "question": 759,
    "text": "s.capitalize()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3034,
  "fields": {
    "question": 759,
    "text": "s.title()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3035,
  "fields": {
    "question": 759,
    "text": "s.upper()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3036,
  "fields": {
    "question": 759,
    "text": "s.swapcase()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3037,
  "fields": {
    "question": 760,
    "text": "s.title()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3038,
  "fields": {
    "question": 760,
    "text": "s.capitalize()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3039,
  "fields": {
    "question": 760,
    "text": "s.upperfirst()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3040,
  "fields": {
    "question": 760,
    "text": "s.startcase()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3041,
  "fields": {
    "question": 761,
    "text": "s.isdigit()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3042,
  "fields": {
    "question": 761,
    "text": "s.isnumeric()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3043,
  "fields": {
    "question": 761,
    "text": "s.isdecimal()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3044,
  "fields": {
    "question": 761,
    "text": "s.isnumber()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3045,
  "fields": {
    "question": 762,
    "text": "s.translate(str.maketrans({'&':'&amp;','<':'&lt;'}))",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3046,
  "fields": {
    "question": 762,
    "text": "s.replace('&','&amp;').replace('<','&lt;')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3047,
  "fields": {
    "question": 762,
    "text": "translate(s, '&->&amp;','<->&lt;')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3048,
  "fields": {
    "question": 762,
    "text": "s.maketrans().translate()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3049,
  "fields": {
    "question": 763,
    "text": ".+?",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3050,
  "fields": {
    "question": 763,
    "text": ".*",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3051,
  "fields": {
    "question": 763,
    "text": ".+",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3052,
  "fields": {
    "question": 763,
    "text": ".{1,}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3053,
  "fields": {
    "question": 764,
    "text": "パターンを事前にコンパイルして繰り返し検索を速く書ける",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3054,
  "fields": {
    "question": 764,
    "text": "常に結果が完全一致になる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3055,
  "fields": {
    "question": 764,
    "text": "生文字列 r'' を不要にできる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3056,
  "fields": {
    "question": 764,
    "text": "メモリ使用量がゼロになる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3057,
  "fields": {
    "question": 765,
    "text": "re.sub(p, lambda m: m.group(0).upper(), s)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3058,
  "fields": {
    "question": 765,
    "text": "re.sub(p, str.upper, s, use_match=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3059,
  "fields": {
    "question": 765,
    "text": "re.sub(p, fn(m), s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3060,
  "fields": {
    "question": 765,
    "text": "re.subfn(p, m -> m[0].upper(), s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3061,
  "fields": {
    "question": 766,
    "text": "''.join(ch for ch in s if ch.isalnum() or ch.isspace())",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3062,
  "fields": {
    "question": 766,
    "text": "s.remove_punct()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3063,
  "fields": {
    "question": 766,
    "text": "re.drop('[\\p{P}]', s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3064,
  "fields": {
    "question": 766,
    "text": "s.filter(alpha=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3065,
  "fields": {
    "question": 767,
    "text": "リストの要素がそのまま隙間なく連結される",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3066,
  "fields": {
    "question": 767,
    "text": "カンマ区切りになる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3067,
  "fields": {
    "question": 767,
    "text": "TypeError が発生する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3068,
  "fields": {
    "question": 767,
    "text": "自動的に空白が入る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3069,
  "fields": {
    "question": 768,
    "text": "find は見つからないと -1、index は ValueError を送出する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3070,
  "fields": {
    "question": 768,
    "text": "どちらも見つからないと None を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3071,
  "fields": {
    "question": 768,
    "text": "find は正規表現対応、index は非対応",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3072,
  "fields": {
    "question": 768,
    "text": "index は速度が常に2倍",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3073,
  "fields": {
    "question": 769,
    "text": "removesuffix('.txt')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3074,
  "fields": {
    "question": 769,
    "text": "rstrip('.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3075,
  "fields": {
    "question": 769,
    "text": "chop('.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3076,
  "fields": {
    "question": 769,
    "text": "trimend('.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3077,
  "fields": {
    "question": 770,
    "text": "removeprefix('pre_')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3078,
  "fields": {
    "question": 770,
    "text": "lstrip('pre_')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3079,
  "fields": {
    "question": 770,
    "text": "strip('pre_')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3080,
  "fields": {
    "question": 770,
    "text": "cutprefix('pre_')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3081,
  "fields": {
    "question": 771,
    "text": "''.join(ch.lower() if ch.isalpha() else ch for ch in s)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3082,
  "fields": {
    "question": 771,
    "text": "s.lowercase_alpha()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3083,
  "fields": {
    "question": 771,
    "text": "re.lower('[A-Za-z]', s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3084,
  "fields": {
    "question": 771,
    "text": "s.lower(alpha_only=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3085,
  "fields": {
    "question": 772,
    "text": "unicodedata.normalize('NFKC', s)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3086,
  "fields": {
    "question": 772,
    "text": "textwrap.normalize(s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3087,
  "fields": {
    "question": 772,
    "text": "re.normalize('NFKC', s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3088,
  "fields": {
    "question": 772,
    "text": "normalize.unicode(s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3089,
  "fields": {
    "question": 773,
    "text": "from datetime import datetime, timezone; datetime.now(timezone.utc)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3090,
  "fields": {
    "question": 773,
    "text": "from datetime import datetime; datetime.utcnow()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3091,
  "fields": {
    "question": 773,
    "text": "from datetime import datetime; datetime.now()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3092,
  "fields": {
    "question": 773,
    "text": "import time; datetime.fromtimestamp(time.time())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3093,
  "fields": {
    "question": 774,
    "text": "from datetime import datetime; from zoneinfo import ZoneInfo; datetime.now(ZoneInfo('Asia/Tokyo'))",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3094,
  "fields": {
    "question": 774,
    "text": "from datetime import datetime; datetime.now(tz='Asia/Tokyo')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3095,
  "fields": {
    "question": 774,
    "text": "from datetime import datetime; datetime.today().astimezone('Asia/Tokyo')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3096,
  "fields": {
    "question": 774,
    "text": "from datetime import datetime, timezone; datetime.now(timezone('Asia/Tokyo'))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3097,
  "fields": {
    "question": 775,
    "text": "from datetime import timezone; dt.astimezone(timezone.utc)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3098,
  "fields": {
    "question": 775,
    "text": "dt.replace(tzinfo=timezone.utc)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3099,
  "fields": {
    "question": 775,
    "text": "dt.tzinfo = timezone.utc",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3100,
  "fields": {
    "question": 775,
    "text": "dt = dt + timedelta(hours=9)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3101,
  "fields": {
    "question": 776,
    "text": "from datetime import datetime; datetime.fromisoformat('2025-09-28T12:34:56+09:00')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3102,
  "fields": {
    "question": 776,
    "text": "from datetime import datetime; datetime.strptime('2025-09-28T12:34:56+09:00', '%Y-%m-%dT%H:%M:%S')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3103,
  "fields": {
    "question": 776,
    "text": "from datetime import datetime; datetime.parse('2025-09-28T12:34:56+09:00')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3104,
  "fields": {
    "question": 776,
    "text": "from time import strptime; strptime('2025-09-28T12:34:56+09:00')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3105,
  "fields": {
    "question": 777,
    "text": "(d2 - d1).days",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3106,
  "fields": {
    "question": 777,
    "text": "timedelta.days(d2 - d1)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3107,
  "fields": {
    "question": 777,
    "text": "abs(d2, d1).days",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3108,
  "fields": {
    "question": 777,
    "text": "date.diff(d2, d1).days",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3109,
  "fields": {
    "question": 778,
    "text": "time.perf_counter()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3110,
  "fields": {
    "question": 778,
    "text": "time.time()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3111,
  "fields": {
    "question": 778,
    "text": "time.process_time_ns()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3112,
  "fields": {
    "question": 778,
    "text": "datetime.now()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3113,
  "fields": {
    "question": 779,
    "text": "import time; time.time()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3114,
  "fields": {
    "question": 779,
    "text": "from datetime import datetime; datetime.now().timestamp()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3115,
  "fields": {
    "question": 779,
    "text": "from datetime import datetime, timezone; datetime.utcnow().timestamp()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3116,
  "fields": {
    "question": 779,
    "text": "from time import ctime; ctime()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3117,
  "fields": {
    "question": 780,
    "text": "from datetime import datetime, timezone; datetime.fromtimestamp(ts, tz=timezone.utc)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3118,
  "fields": {
    "question": 780,
    "text": "from datetime import datetime; datetime.utcfromtimestamp(ts)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3119,
  "fields": {
    "question": 780,
    "text": "from datetime import datetime; datetime.fromtimestamp(ts)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3120,
  "fields": {
    "question": 780,
    "text": "from datetime import datetime, timezone; datetime.utcfromtimestamp(ts).replace(tzinfo=timezone.utc)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3121,
  "fields": {
    "question": 781,
    "text": "dt.strftime('%Y-%m-%d')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3122,
  "fields": {
    "question": 781,
    "text": "format(dt, 'YYYY-MM-DD')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3123,
  "fields": {
    "question": 781,
    "text": "str(dt, '%Y-%m-%d')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3124,
  "fields": {
    "question": 781,
    "text": "dt.to_string('%Y-%m-%d')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3125,
  "fields": {
    "question": 782,
    "text": "dt.replace(hour=0, minute=0, second=0, microsecond=0)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3126,
  "fields": {
    "question": 782,
    "text": "dt.truncate('D')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3127,
  "fields": {
    "question": 782,
    "text": "dt.floor('day')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3128,
  "fields": {
    "question": 782,
    "text": "dt.reset_time()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3129,
  "fields": {
    "question": 783,
    "text": "別のタイムゾーンへ時刻を変換するには astimezone を用いるべきで、replace(tzinfo=...) は変換ではない。",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3130,
  "fields": {
    "question": 783,
    "text": "replace(tzinfo=...) はタイムゾーン変換と同義であり、夏時間も考慮される。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3131,
  "fields": {
    "question": 783,
    "text": "astimezone はnaiveなdatetimeにも安全に使える。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3132,
  "fields": {
    "question": 783,
    "text": "awareなdatetimeはreplaceでは変更できない。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3133,
  "fields": {
    "question": 784,
    "text": "datetime.weekday()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3134,
  "fields": {
    "question": 784,
    "text": "datetime.isoweekday()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3135,
  "fields": {
    "question": 784,
    "text": "datetime.isocalendar()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3136,
  "fields": {
    "question": 784,
    "text": "calendar.weekday()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3137,
  "fields": {
    "question": 785,
    "text": "while d <= end: ...; d += timedelta(days=1)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3138,
  "fields": {
    "question": 785,
    "text": "for d in range(start, end): pass",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3139,
  "fields": {
    "question": 785,
    "text": "for d in daterange(start, end): pass  # 標準にはない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3140,
  "fields": {
    "question": 785,
    "text": "calendar.iterdays(start, end)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3141,
  "fields": {
    "question": 786,
    "text": "datetimeにはfold属性(0/1)があり、曖昧時刻の後者側をfold=1で表現できる。",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3142,
  "fields": {
    "question": 786,
    "text": "曖昧時刻は必ず例外になるため、処理は不要である。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3143,
  "fields": {
    "question": 786,
    "text": "zoneinfoでは曖昧時刻は自動で常に早い方に解決される。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3144,
  "fields": {
    "question": 786,
    "text": "foldはdate型にも存在し、日付の重複を示す。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3145,
  "fields": {
    "question": 787,
    "text": "Python 3.9+ では zoneinfo.ZoneInfo でIANAタイムゾーンが扱える。",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3146,
  "fields": {
    "question": 787,
    "text": "標準では固定オフセットtimezone.utcのみが使える。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3147,
  "fields": {
    "question": 787,
    "text": "システムにDBがなくても datetime は常に全世界のタイムゾーンを自動解決する。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3148,
  "fields": {
    "question": 787,
    "text": "タイムゾーンはすべてサードパーティ(dateutil)が必要である。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3149,
  "fields": {
    "question": 788,
    "text": "import time; time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3150,
  "fields": {
    "question": 788,
    "text": "import time; time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(9))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3151,
  "fields": {
    "question": 788,
    "text": "import time; time.strftime(time.localtime(), '%c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3152,
  "fields": {
    "question": 788,
    "text": "import time; time.format('%c', time.localtime())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3153,
  "fields": {
    "question": 789,
    "text": "from datetime import datetime; datetime.strptime('2025-09-28 12:34:56 +0900', '%Y-%m-%d %H:%M:%S %z')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3154,
  "fields": {
    "question": 789,
    "text": "from datetime import datetime; datetime.strptime('2025-09-28 12:34:56 +0900', '%Y-%m-%d %H:%M:%S %Z')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3155,
  "fields": {
    "question": 789,
    "text": "from datetime import datetime; datetime.fromtimestamp('2025-09-28 12:34:56 +0900')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3156,
  "fields": {
    "question": 789,
    "text": "from datetime import datetime; datetime.parse_tz('2025-09-28 12:34:56 +0900')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3157,
  "fields": {
    "question": 790,
    "text": "両者の比較はTypeErrorとなるため、同じnaive/awareに揃える必要がある。",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3158,
  "fields": {
    "question": 790,
    "text": "Pythonは自動でローカルタイムゾーンに合わせて比較する。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3159,
  "fields": {
    "question": 790,
    "text": "aware同士でも比較は常に不可能である。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3160,
  "fields": {
    "question": 790,
    "text": "naiveは常にawareより小さいとみなされる。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3161,
  "fields": {
    "question": 791,
    "text": "dt.isocalendar() は (iso_year, iso_week, iso_weekday) のnamedtupleを返す。",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3162,
  "fields": {
    "question": 791,
    "text": "dt.isocalendar() は 'YYYY-Www-D' 形式の文字列を返す。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3163,
  "fields": {
    "question": 791,
    "text": "dt.isoformat() がISO週番号も含めて返す。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3164,
  "fields": {
    "question": 791,
    "text": "calendar.isocalendar(dt) を使う。",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3165,
  "fields": {
    "question": 792,
    "text": "dt.isoformat()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3166,
  "fields": {
    "question": 792,
    "text": "dt.strftime('%ISO')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3167,
  "fields": {
    "question": 792,
    "text": "format(dt, 'iso')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3168,
  "fields": {
    "question": 792,
    "text": "dt.toiso()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3169,
  "fields": {
    "question": 793,
    "text": "time.process_time()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3170,
  "fields": {
    "question": 793,
    "text": "time.perf_counter()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3171,
  "fields": {
    "question": 793,
    "text": "time.monotonic()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3172,
  "fields": {
    "question": 793,
    "text": "time.perf_counter_ns()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3173,
  "fields": {
    "question": 794,
    "text": "list.append(x)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3174,
  "fields": {
    "question": 794,
    "text": "list.add(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3175,
  "fields": {
    "question": 794,
    "text": "list.push(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3176,
  "fields": {
    "question": 794,
    "text": "list.extend_one(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3177,
  "fields": {
    "question": 795,
    "text": "不変(immutable)である",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3178,
  "fields": {
    "question": 795,
    "text": "要素の追加・削除が可能",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3179,
  "fields": {
    "question": 795,
    "text": "ハッシュ不可能で辞書キーにできない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3180,
  "fields": {
    "question": 795,
    "text": "順序を持たない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3181,
  "fields": {
    "question": 796,
    "text": "iterable を走査し、その要素を順に末尾へ追加する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3182,
  "fields": {
    "question": 796,
    "text": "iterable を1要素として末尾へ追加する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3183,
  "fields": {
    "question": 796,
    "text": "先頭に要素を追加する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3184,
  "fields": {
    "question": 796,
    "text": "同一要素を重複なく統合する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3185,
  "fields": {
    "question": 797,
    "text": "要素は一意で重複しない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3186,
  "fields": {
    "question": 797,
    "text": "順序が保証される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3187,
  "fields": {
    "question": 797,
    "text": "インデックスでアクセスできる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3188,
  "fields": {
    "question": 797,
    "text": "ミュータブルではない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3189,
  "fields": {
    "question": 798,
    "text": "d.get(k, default)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3190,
  "fields": {
    "question": 798,
    "text": "d[k] or default",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3191,
  "fields": {
    "question": 798,
    "text": "d.fetch(k, default)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3192,
  "fields": {
    "question": 798,
    "text": "d.read(k, default)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3193,
  "fields": {
    "question": 799,
    "text": "キーが無ければ default を挿入し、その値を返す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3194,
  "fields": {
    "question": 799,
    "text": "常に default に置き換える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3195,
  "fields": {
    "question": 799,
    "text": "キーが無ければエラーにする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3196,
  "fields": {
    "question": 799,
    "text": "キーが有れば None を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3197,
  "fields": {
    "question": 800,
    "text": "most_common(N)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3198,
  "fields": {
    "question": 800,
    "text": "top(N)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3199,
  "fields": {
    "question": 800,
    "text": "head(N)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3200,
  "fields": {
    "question": 800,
    "text": "rank(N)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3201,
  "fields": {
    "question": 801,
    "text": "未登録キー参照時に自動で空リストが生成される",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3202,
  "fields": {
    "question": 801,
    "text": "参照時に KeyError を必ず送出する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3203,
  "fields": {
    "question": 801,
    "text": "既存キーの値が自動でソートされる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3204,
  "fields": {
    "question": 801,
    "text": "辞書のメモリ使用量を必ず減らす",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3205,
  "fields": {
    "question": 802,
    "text": "両端での追加・削除が高速",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3206,
  "fields": {
    "question": 802,
    "text": "任意位置の挿入が O(1)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3207,
  "fields": {
    "question": 802,
    "text": "スレッドセーフではない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3208,
  "fields": {
    "question": 802,
    "text": "反復できない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3209,
  "fields": {
    "question": 803,
    "text": "Python の sort は安定ソートである",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3210,
  "fields": {
    "question": 803,
    "text": "sort は必ず新しいリストを返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3211,
  "fields": {
    "question": 803,
    "text": "sorted は安定ではない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3212,
  "fields": {
    "question": 803,
    "text": "key と reverse を同時指定できない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3213,
  "fields": {
    "question": 804,
    "text": "要素の長さに基づいて昇順に並べ替える",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3214,
  "fields": {
    "question": 804,
    "text": "要素の辞書順で常に降順に並べ替える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3215,
  "fields": {
    "question": 804,
    "text": "要素の型に応じてカスタム比較を行う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3216,
  "fields": {
    "question": 804,
    "text": "並べ替えずに複製だけを行う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3217,
  "fields": {
    "question": 805,
    "text": "最小値(または最大値)を効率よく取り出す優先度付きキュー",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3218,
  "fields": {
    "question": 805,
    "text": "固定長の循環キューを提供する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3219,
  "fields": {
    "question": 805,
    "text": "安定ソートを代替する全順序比較器",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3220,
  "fields": {
    "question": 805,
    "text": "ハッシュマップの衝突解決を行う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3221,
  "fields": {
    "question": 806,
    "text": "for と if を組み合わせて新しいリストを構築できる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3222,
  "fields": {
    "question": 806,
    "text": "既存リストを就地で変更する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3223,
  "fields": {
    "question": 806,
    "text": "辞書や集合では使用できない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3224,
  "fields": {
    "question": 806,
    "text": "ジェネレータ式と同義である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3225,
  "fields": {
    "question": 807,
    "text": "辞書が変化するとビューの内容も動的に反映される",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3226,
  "fields": {
    "question": 807,
    "text": "タプルのリストを新規生成して返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3227,
  "fields": {
    "question": 807,
    "text": "反復できない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3228,
  "fields": {
    "question": 807,
    "text": "ハッシュ可能で集合の要素にできる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3229,
  "fields": {
    "question": 808,
    "text": "部分和を順に生成する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3230,
  "fields": {
    "question": 808,
    "text": "累積積を生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3231,
  "fields": {
    "question": 808,
    "text": "最大値のみを生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3232,
  "fields": {
    "question": 808,
    "text": "平均値を生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3233,
  "fields": {
    "question": 809,
    "text": "グルーピングキーで事前にソートされている必要がある",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3234,
  "fields": {
    "question": 809,
    "text": "入力の順序は完全に無関係",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3235,
  "fields": {
    "question": 809,
    "text": "常に辞書を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3236,
  "fields": {
    "question": 809,
    "text": "重複要素を自動で削除する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3237,
  "fields": {
    "question": 810,
    "text": "A.intersection(B)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3238,
  "fields": {
    "question": 810,
    "text": "A.union(B)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3239,
  "fields": {
    "question": 810,
    "text": "A.symmetric_difference(B)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3240,
  "fields": {
    "question": 810,
    "text": "A.difference_update(B)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3241,
  "fields": {
    "question": 811,
    "text": "if key in d:",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3242,
  "fields": {
    "question": 811,
    "text": "if d.get(key):",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3243,
  "fields": {
    "question": 811,
    "text": "if d[key]:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3244,
  "fields": {
    "question": 811,
    "text": "if key is d:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3245,
  "fields": {
    "question": 812,
    "text": "list.remove(x)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3246,
  "fields": {
    "question": 812,
    "text": "list.pop(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3247,
  "fields": {
    "question": 812,
    "text": "list.delete(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3248,
  "fields": {
    "question": 812,
    "text": "list.discard(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3249,
  "fields": {
    "question": 813,
    "text": "new = old[:]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3250,
  "fields": {
    "question": 813,
    "text": "new = old",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3251,
  "fields": {
    "question": 813,
    "text": "new = copy.deepcopy(old)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3252,
  "fields": {
    "question": 813,
    "text": "new = list; new(old)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3253,
  "fields": {
    "question": 814,
    "text": "func の返す値に基づいて最大要素を選ぶ",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3254,
  "fields": {
    "question": 814,
    "text": "func は比較のたびに2引数を取る必要がある",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3255,
  "fields": {
    "question": 814,
    "text": "常に辞書順の最大を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3256,
  "fields": {
    "question": 814,
    "text": "イテラブルの長さを返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3257,
  "fields": {
    "question": 815,
    "text": "a, b = b, a",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3258,
  "fields": {
    "question": 815,
    "text": "a = b; b = a",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3259,
  "fields": {
    "question": 815,
    "text": "swap(a, b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3260,
  "fields": {
    "question": 815,
    "text": "a <-> b",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3261,
  "fields": {
    "question": 816,
    "text": "要素とカウンタ(開始値指定可)のペアを生成する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3262,
  "fields": {
    "question": 816,
    "text": "要素数を事前に数える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3263,
  "fields": {
    "question": 816,
    "text": "インデックスを末尾に付与して新リストを返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3264,
  "fields": {
    "question": 816,
    "text": "常に 0 始まりで固定",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3265,
  "fields": {
    "question": 817,
    "text": "set.discard(x)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3266,
  "fields": {
    "question": 817,
    "text": "set.remove(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3267,
  "fields": {
    "question": 817,
    "text": "set.pop(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3268,
  "fields": {
    "question": 817,
    "text": "set.delete(x)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3269,
  "fields": {
    "question": 818,
    "text": "append で要素ごとに追加する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3270,
  "fields": {
    "question": 818,
    "text": "毎回 `a = a + b` で連結する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3271,
  "fields": {
    "question": 818,
    "text": "毎回 `a = [*a, *b]` を使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3272,
  "fields": {
    "question": 818,
    "text": "毎回 `a += b` より常に速い方法はない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3273,
  "fields": {
    "question": 819,
    "text": "真と評価される要素が1つでもあれば True",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3274,
  "fields": {
    "question": 819,
    "text": "すべての要素が真なら True",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3275,
  "fields": {
    "question": 819,
    "text": "要素数を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3276,
  "fields": {
    "question": 819,
    "text": "常に最初の要素を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3277,
  "fields": {
    "question": 820,
    "text": "最短のイテラブルの長さで打ち切られる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3278,
  "fields": {
    "question": 820,
    "text": "常に長い方に合わせて None を埋める",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3279,
  "fields": {
    "question": 820,
    "text": "リストを返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3280,
  "fields": {
    "question": 820,
    "text": "順序は無関係である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3281,
  "fields": {
    "question": 821,
    "text": "d3 = d1 | d2",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3282,
  "fields": {
    "question": 821,
    "text": "d3 = dict(d1, **d2)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3283,
  "fields": {
    "question": 821,
    "text": "d3 = d1 + d2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3284,
  "fields": {
    "question": 821,
    "text": "d3 = d1.extend(d2)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3285,
  "fields": {
    "question": 822,
    "text": "dd = defaultdict(list); dd[k].append(v)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3286,
  "fields": {
    "question": 822,
    "text": "d = {}; (d[k] if k in d else []).append(v)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3287,
  "fields": {
    "question": 822,
    "text": "d = {}; d[k].push(v)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3288,
  "fields": {
    "question": 822,
    "text": "d = dict.of_lists(); d[k].add(v)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3289,
  "fields": {
    "question": 823,
    "text": "[('a','x'), ('a','y'), ('b','x'), ('b','y')]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3290,
  "fields": {
    "question": 823,
    "text": "[('a','x'), ('b','y')]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3291,
  "fields": {
    "question": 823,
    "text": "[('ax'), ('by')]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3292,
  "fields": {
    "question": 823,
    "text": "[('a','b','x','y')]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3293,
  "fields": {
    "question": 824,
    "text": "heapq.nsmallest(N, iterable)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3294,
  "fields": {
    "question": 824,
    "text": "sorted(iterable)[:N] のみが選択肢",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3295,
  "fields": {
    "question": 824,
    "text": "min(iterable, N)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3296,
  "fields": {
    "question": 824,
    "text": "topN(iterable, N)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3297,
  "fields": {
    "question": 825,
    "text": "{x: x*x for x in range(3)}",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3298,
  "fields": {
    "question": 825,
    "text": "{x, x*x for x in range(3)}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3299,
  "fields": {
    "question": 825,
    "text": "[x: x*x for x in range(3)]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3300,
  "fields": {
    "question": 825,
    "text": "(x: x*x for x in range(3))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3301,
  "fields": {
    "question": 826,
    "text": "A.issubset(B)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3302,
  "fields": {
    "question": 826,
    "text": "A.isinside(B)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3303,
  "fields": {
    "question": 826,
    "text": "A ⊂ B は Python 演算子として使える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3304,
  "fields": {
    "question": 826,
    "text": "A.sub(B)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3305,
  "fields": {
    "question": 827,
    "text": "sum1 = 0; n = 0; \nfor x in it: sum1 += x; n += 1; avg = sum1 / n",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3306,
  "fields": {
    "question": 827,
    "text": "list(it) を2回作って合計と件数を別々に取る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3307,
  "fields": {
    "question": 827,
    "text": "len(it) で件数が直接取れる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3308,
  "fields": {
    "question": 827,
    "text": "statistics.mean(it) は必ず it を複製しない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3309,
  "fields": {
    "question": 828,
    "text": "itertools.chain(a, b, c)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3310,
  "fields": {
    "question": 828,
    "text": "sum([a, b, c])",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3311,
  "fields": {
    "question": 828,
    "text": "a.extend(b, c)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3312,
  "fields": {
    "question": 828,
    "text": "merge(a, b, c)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3313,
  "fields": {
    "question": 829,
    "text": "メモリ効率の良い不変シーケンスである",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3314,
  "fields": {
    "question": 829,
    "text": "リストを内部に保持している",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3315,
  "fields": {
    "question": 829,
    "text": "反復ごとにリストを再生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3316,
  "fields": {
    "question": 829,
    "text": "スライスできない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3317,
  "fields": {
    "question": 830,
    "text": "挿入順が保持される",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3318,
  "fields": {
    "question": 830,
    "text": "ハッシュ値の昇順になる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3319,
  "fields": {
    "question": 830,
    "text": "毎回ランダムになる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3320,
  "fields": {
    "question": 830,
    "text": "キーの型ごとにグルーピングされる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3321,
  "fields": {
    "question": 831,
    "text": "値で降順ソートした (キー, 値) のリストを返す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3322,
  "fields": {
    "question": 831,
    "text": "キーで昇順ソートした辞書を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3323,
  "fields": {
    "question": 831,
    "text": "就地で辞書を並べ替える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3324,
  "fields": {
    "question": 831,
    "text": "ビューを変更して反映する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3325,
  "fields": {
    "question": 832,
    "text": "itertools.product",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3326,
  "fields": {
    "question": 832,
    "text": "itertools.accumulate",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3327,
  "fields": {
    "question": 832,
    "text": "itertools.groupby",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3328,
  "fields": {
    "question": 832,
    "text": "itertools.repeat",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3329,
  "fields": {
    "question": 833,
    "text": "collections.Counter(iterable)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3330,
  "fields": {
    "question": 833,
    "text": "{x: iterable.count(x) for x in iterable}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3331,
  "fields": {
    "question": 833,
    "text": "defaultdict(int) を使い1件ずつ集計",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3332,
  "fields": {
    "question": 833,
    "text": "statistics.count(iterable)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3333,
  "fields": {
    "question": 834,
    "text": "namedtuple は属性名でアクセスでき、可読性が高い",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3334,
  "fields": {
    "question": 834,
    "text": "namedtuple はミュータブルである",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3335,
  "fields": {
    "question": 834,
    "text": "namedtuple は反復できない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3336,
  "fields": {
    "question": 834,
    "text": "namedtuple はメモリ消費が極端に大きい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3337,
  "fields": {
    "question": 835,
    "text": "同種の数値を緻密に格納する可変長配列",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3338,
  "fields": {
    "question": 835,
    "text": "任意のPythonオブジェクトを格納できる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3339,
  "fields": {
    "question": 835,
    "text": "固定長でサイズ変更不可",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3340,
  "fields": {
    "question": 835,
    "text": "イミュータブルである",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3341,
  "fields": {
    "question": 836,
    "text": "enum.Enum",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3342,
  "fields": {
    "question": 836,
    "text": "types.Enum",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3343,
  "fields": {
    "question": 836,
    "text": "collections.Enum",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3344,
  "fields": {
    "question": 836,
    "text": "enum.Flag 以外は標準に無い",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3345,
  "fields": {
    "question": 837,
    "text": "heapq.merge(a, b)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3346,
  "fields": {
    "question": 837,
    "text": "sorted(a + b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3347,
  "fields": {
    "question": 837,
    "text": "itertools.chain(sorted(a), sorted(b))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3348,
  "fields": {
    "question": 837,
    "text": "a.extend(b); a.sort()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3349,
  "fields": {
    "question": 838,
    "text": "itertools.repeat(x, n)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3350,
  "fields": {
    "question": 838,
    "text": "itertools.multiply(x, n)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3351,
  "fields": {
    "question": 838,
    "text": "x * n (イテラブルに対する乗算)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3352,
  "fields": {
    "question": 838,
    "text": "collections.replicate(x, n)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3353,
  "fields": {
    "question": 839,
    "text": "順序を無視した r 要素の組合せを生成する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3354,
  "fields": {
    "question": 839,
    "text": "順序を考慮した順列を生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3355,
  "fields": {
    "question": 839,
    "text": "重複を許す組合せを生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3356,
  "fields": {
    "question": 839,
    "text": "常に元と同じ長さの列を返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3357,
  "fields": {
    "question": 840,
    "text": "d.setdefault(k, v)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3358,
  "fields": {
    "question": 840,
    "text": "d[k] ?= v",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3359,
  "fields": {
    "question": 840,
    "text": "d.put_if_absent(k, v)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3360,
  "fields": {
    "question": 840,
    "text": "d.ensure(k, v)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3361,
  "fields": {
    "question": 841,
    "text": "key=lambda x: (x.score, x.name)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3362,
  "fields": {
    "question": 841,
    "text": "cmp=lambda a,b: ... を渡す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3363,
  "fields": {
    "question": 841,
    "text": "keys=['score','name'] を渡す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3364,
  "fields": {
    "question": 841,
    "text": "複数回 sort を呼ぶ必要がある",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3365,
  "fields": {
    "question": 842,
    "text": "値にマイナスを掛けて格納する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3366,
  "fields": {
    "question": 842,
    "text": "heapq を max=True で初期化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3367,
  "fields": {
    "question": 842,
    "text": "heapqmax モジュールを使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3368,
  "fields": {
    "question": 842,
    "text": "ヒープに対して reverse=True を指定する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3369,
  "fields": {
    "question": 843,
    "text": "複数のマッピングを重ねて一つの辞書風に見せる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3370,
  "fields": {
    "question": 843,
    "text": "キーの順序を固定する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3371,
  "fields": {
    "question": 843,
    "text": "値を自動でマージして新辞書を作る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3372,
  "fields": {
    "question": 843,
    "text": "キーの型を検査して正規化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3373,
  "fields": {
    "question": 844,
    "text": "シーケンスを逆順にしたシャローコピー",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3374,
  "fields": {
    "question": 844,
    "text": "就地で逆順に並べ替える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3375,
  "fields": {
    "question": 844,
    "text": "反復オブジェクトを返すだけで実体は無い",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3376,
  "fields": {
    "question": 844,
    "text": "常に同一オブジェクトを返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3377,
  "fields": {
    "question": 845,
    "text": "大文字小文字を無視した辞書順で整列する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3378,
  "fields": {
    "question": 845,
    "text": "元の大文字小文字を変更して保存する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3379,
  "fields": {
    "question": 845,
    "text": "非文字は自動で除去される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3380,
  "fields": {
    "question": 845,
    "text": "数値は常に末尾に移動する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3381,
  "fields": {
    "question": 846,
    "text": "ヒープ(優先度付きキュー)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3382,
  "fields": {
    "question": 846,
    "text": "リスト",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3383,
  "fields": {
    "question": 846,
    "text": "集合(set)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3384,
  "fields": {
    "question": 846,
    "text": "辞書(dict)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3385,
  "fields": {
    "question": 847,
    "text": "merged = d1 | d2",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3386,
  "fields": {
    "question": 847,
    "text": "merged = {**d2, **d1}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3387,
  "fields": {
    "question": 847,
    "text": "merged = dict.union(d1, d2, prefer='right')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3388,
  "fields": {
    "question": 847,
    "text": "merged = d1.update(d2) または d2.update(d1) を同時に使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3389,
  "fields": {
    "question": 848,
    "text": "itertools.tee は不適切で、next と chain を組み合わせる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3390,
  "fields": {
    "question": 848,
    "text": "list(it) にしてから分割するのが唯一の方法",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3391,
  "fields": {
    "question": 848,
    "text": "itertools.split を使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3392,
  "fields": {
    "question": 848,
    "text": "first, rest = it[0], it[1:]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3393,
  "fields": {
    "question": 849,
    "text": "{'a': 0, 'b': 0}",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3394,
  "fields": {
    "question": 849,
    "text": "{'a': [0], 'b': [0]}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3395,
  "fields": {
    "question": 849,
    "text": "{'a': None, 'b': None}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3396,
  "fields": {
    "question": 849,
    "text": "{'a': 0}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3397,
  "fields": {
    "question": 850,
    "text": "set(text.split())",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3398,
  "fields": {
    "question": 850,
    "text": "list(dict.fromkeys(text.split()))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3399,
  "fields": {
    "question": 850,
    "text": "unique(text)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3400,
  "fields": {
    "question": 850,
    "text": "Counter(text).keys()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3401,
  "fields": {
    "question": 851,
    "text": "引数既定値は None にし、関数内で新規リストを作る",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3402,
  "fields": {
    "question": 851,
    "text": "気にせず [] を使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3403,
  "fields": {
    "question": 851,
    "text": "毎回 deepcopy する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3404,
  "fields": {
    "question": 851,
    "text": "tuple を使って後で変換する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3405,
  "fields": {
    "question": 852,
    "text": "d.pop(k, default)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3406,
  "fields": {
    "question": 852,
    "text": "del d[k] or default",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3407,
  "fields": {
    "question": 852,
    "text": "d.remove(k, default)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3408,
  "fields": {
    "question": 852,
    "text": "d.extract(k, default)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3409,
  "fields": {
    "question": 853,
    "text": "先に filter、次に map",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3410,
  "fields": {
    "question": 853,
    "text": "先に map、次に filter",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3411,
  "fields": {
    "question": 853,
    "text": "順序は常に無関係",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3412,
  "fields": {
    "question": 853,
    "text": "リスト化してから両方行う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3413,
  "fields": {
    "question": 854,
    "text": "1パスで集計するオンラインアルゴリズムを実装する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3414,
  "fields": {
    "question": 854,
    "text": "全データをソートしてから計算する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3415,
  "fields": {
    "question": 854,
    "text": "毎回リストを複製して append する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3416,
  "fields": {
    "question": 854,
    "text": "zip_longest で穴埋めしてから計算する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3417,
  "fields": {
    "question": 855,
    "text": "functools.lru_cache を key 関数に適用する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3418,
  "fields": {
    "question": 855,
    "text": "random.seed を固定する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3419,
  "fields": {
    "question": 855,
    "text": "gc.disable() を呼ぶ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3420,
  "fields": {
    "question": 855,
    "text": "sort の安定性を無効化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3421,
  "fields": {
    "question": 856,
    "text": "d[k] = d.get(k, 0) + 1",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3422,
  "fields": {
    "question": 856,
    "text": "d[k] += 1  # 未定義でも安全",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3423,
  "fields": {
    "question": 856,
    "text": "d.inc(k)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3424,
  "fields": {
    "question": 856,
    "text": "d[k] = d.setdefault(k, 0)++",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3425,
  "fields": {
    "question": 857,
    "text": "deque(maxlen=n) を用いて新要素を append しながら処理",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3426,
  "fields": {
    "question": 857,
    "text": "毎回スライスで新リストを作る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3427,
  "fields": {
    "question": 857,
    "text": "itertools.product を使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3428,
  "fields": {
    "question": 857,
    "text": "list.reverse() を毎回呼ぶ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3429,
  "fields": {
    "question": 858,
    "text": "for rec in stream: \n    if pred(rec):\n        found = rec; break",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3430,
  "fields": {
    "question": 858,
    "text": "records = list(stream); found = next(filter(pred, records))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3431,
  "fields": {
    "question": 858,
    "text": "found = stream[0]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3432,
  "fields": {
    "question": 858,
    "text": "sorted(stream)[0]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3433,
  "fields": {
    "question": 859,
    "text": "インデックス 5 以上 10 未満の要素を惰性的に取り出す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3434,
  "fields": {
    "question": 859,
    "text": "最初の5要素をスキップし、10個取り出す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3435,
  "fields": {
    "question": 859,
    "text": "5個飛ばしで10個取り出す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3436,
  "fields": {
    "question": 859,
    "text": "常にリストを返す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3437,
  "fields": {
    "question": 860,
    "text": "[x for xs in d.values() for x in xs]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3438,
  "fields": {
    "question": 860,
    "text": "sum(d.values())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3439,
  "fields": {
    "question": 860,
    "text": "list(chain(d.values()))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3440,
  "fields": {
    "question": 860,
    "text": "flatten(d.values())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3441,
  "fields": {
    "question": 861,
    "text": "最小ヒープに要素を入れ、サイズが K を超えたら最小を捨てる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3442,
  "fields": {
    "question": 861,
    "text": "毎回全体をソートし直す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3443,
  "fields": {
    "question": 861,
    "text": "set に入れてから max を取る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3444,
  "fields": {
    "question": 861,
    "text": "deque に入れて左右から比較する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3445,
  "fields": {
    "question": 862,
    "text": "{k: f(v) for k, v in d.items()}",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3446,
  "fields": {
    "question": 862,
    "text": "dict(map(f, d))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3447,
  "fields": {
    "question": 862,
    "text": "d.map_values(f)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3448,
  "fields": {
    "question": 862,
    "text": "transform(d, f)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3449,
  "fields": {
    "question": 863,
    "text": "長さで昇順、同長なら辞書順で昇順に並べる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3450,
  "fields": {
    "question": 863,
    "text": "辞書順のみでソートする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3451,
  "fields": {
    "question": 863,
    "text": "長さで降順、辞書順で降順",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3452,
  "fields": {
    "question": 863,
    "text": "ソートの安定性が失われる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3453,
  "fields": {
    "question": 864,
    "text": "sum(1 for row in rows if cond(row))",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3454,
  "fields": {
    "question": 864,
    "text": "len([row for row in rows if cond(row)])",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3455,
  "fields": {
    "question": 864,
    "text": "rows = list(rows); rows.count(cond)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3456,
  "fields": {
    "question": 864,
    "text": "statistics.count_cond(rows)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3457,
  "fields": {
    "question": 865,
    "text": "all(v <= 0 for v in d.values())",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3458,
  "fields": {
    "question": 865,
    "text": "sum(v <= 0 for v in d.values()) == len(d)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3459,
  "fields": {
    "question": 865,
    "text": "min(d.values()) < 0",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3460,
  "fields": {
    "question": 865,
    "text": "sorted(d.values())[0] <= 0",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3461,
  "fields": {
    "question": 866,
    "text": "A ^ B または A.symmetric_difference(B)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3462,
  "fields": {
    "question": 866,
    "text": "A & B",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3463,
  "fields": {
    "question": 866,
    "text": "A | B",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3464,
  "fields": {
    "question": 866,
    "text": "A - B",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3465,
  "fields": {
    "question": 867,
    "text": "defaultdict(list) で値にキーを append する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3466,
  "fields": {
    "question": 867,
    "text": "{v: k for k, v in d.items()}",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3467,
  "fields": {
    "question": 867,
    "text": "dict(reversed(d.items()))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3468,
  "fields": {
    "question": 867,
    "text": "d.invert()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3469,
  "fields": {
    "question": 868,
    "text": "両リストのポインタを進める2本指法(two-pointer)を使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3470,
  "fields": {
    "question": 868,
    "text": "両方を結合してからソートする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3471,
  "fields": {
    "question": 868,
    "text": "set にしてから & を取る(常に線形時間)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3472,
  "fields": {
    "question": 868,
    "text": "itertools.product で全組合せから一致を探す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3473,
  "fields": {
    "question": 869,
    "text": "挿入順保持や一部の追加APIが必要なときに互換目的で使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3474,
  "fields": {
    "question": 869,
    "text": "通常の dict より必ず高速",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3475,
  "fields": {
    "question": 869,
    "text": "キーの順序をソート順に保つ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3476,
  "fields": {
    "question": 869,
    "text": "不可変辞書である",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3477,
  "fields": {
    "question": 870,
    "text": "list(dict.fromkeys(seq))",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3478,
  "fields": {
    "question": 870,
    "text": "list(set(seq))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3479,
  "fields": {
    "question": 870,
    "text": "sorted(set(seq))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3480,
  "fields": {
    "question": 870,
    "text": "[*set(seq)][::-1]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3481,
  "fields": {
    "question": 871,
    "text": "os.getcwd()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3482,
  "fields": {
    "question": 871,
    "text": "os.getcwdb()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3483,
  "fields": {
    "question": 871,
    "text": "pathlib.Path.home()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3484,
  "fields": {
    "question": 871,
    "text": "sys.getcwd()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3485,
  "fields": {
    "question": 872,
    "text": "os.environ.get('FOO', 'NA')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3486,
  "fields": {
    "question": 872,
    "text": "os.environ['FOO'] or 'NA'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3487,
  "fields": {
    "question": 872,
    "text": "sys.environ.get('FOO', 'NA')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3488,
  "fields": {
    "question": 872,
    "text": "os.getenv('NA', 'FOO')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3489,
  "fields": {
    "question": 873,
    "text": "subprocess.run(cmd, check=True)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3490,
  "fields": {
    "question": 873,
    "text": "subprocess.call(cmd, raise_on_error=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3491,
  "fields": {
    "question": 873,
    "text": "subprocess.Popen(cmd, check=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3492,
  "fields": {
    "question": 873,
    "text": "os.system(cmd, check=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3493,
  "fields": {
    "question": 874,
    "text": "subprocess.run(cmd, capture_output=True, text=True)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3494,
  "fields": {
    "question": 874,
    "text": "subprocess.run(cmd, stdout=subprocess.PIPE, binary=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3495,
  "fields": {
    "question": 874,
    "text": "subprocess.run(cmd, universal_newlines=False)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3496,
  "fields": {
    "question": 874,
    "text": "subprocess.run(cmd, output='str')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3497,
  "fields": {
    "question": 875,
    "text": "SystemExit例外が送出され、未捕捉ならプロセスが終了する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3498,
  "fields": {
    "question": 875,
    "text": "即時にプロセスが強制終了し、finallyは実行されない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3499,
  "fields": {
    "question": 875,
    "text": "例外ではなくreturnでメイン関数を抜けるだけ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3500,
  "fields": {
    "question": 875,
    "text": "OSのシグナルSIGTERMを自分自身に送る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3501,
  "fields": {
    "question": 876,
    "text": "shutil.which('python')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3502,
  "fields": {
    "question": 876,
    "text": "os.path.which('python')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3503,
  "fields": {
    "question": 876,
    "text": "sys.which('python')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3504,
  "fields": {
    "question": 876,
    "text": "subprocess.which('python')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3505,
  "fields": {
    "question": 877,
    "text": "os.getpid()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3506,
  "fields": {
    "question": 877,
    "text": "sys.getpid()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3507,
  "fields": {
    "question": 877,
    "text": "platform.getpid()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3508,
  "fields": {
    "question": 877,
    "text": "subprocess.getpid()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3509,
  "fields": {
    "question": 878,
    "text": "tempfile.TemporaryDirectory()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3510,
  "fields": {
    "question": 878,
    "text": "tempfile.NamedTemporaryFile(delete=False)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3511,
  "fields": {
    "question": 878,
    "text": "os.mkdir('tmp') とatexitで削除",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3512,
  "fields": {
    "question": 878,
    "text": "pathlib.Path.mkdtemp()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3513,
  "fields": {
    "question": 879,
    "text": "shell=True を指定し、コマンドを文字列で渡す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3514,
  "fields": {
    "question": 879,
    "text": "shell=False のままリストで渡す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3515,
  "fields": {
    "question": 879,
    "text": "Popen(..., pipes=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3516,
  "fields": {
    "question": 879,
    "text": "os.systemlist([...]) を使う",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3517,
  "fields": {
    "question": 880,
    "text": "platform.system() == 'Windows'",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3518,
  "fields": {
    "question": 880,
    "text": "sys.platform == 'win'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3519,
  "fields": {
    "question": 880,
    "text": "os.name == 'posix'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3520,
  "fields": {
    "question": 880,
    "text": "platform.platform().startswith('win')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3521,
  "fields": {
    "question": 881,
    "text": "os.chdir(path)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3522,
  "fields": {
    "question": 881,
    "text": "pathlib.Path.chdir(path)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3523,
  "fields": {
    "question": 881,
    "text": "sys.chdir(path)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3524,
  "fields": {
    "question": 881,
    "text": "shutil.chdir(path)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3525,
  "fields": {
    "question": 882,
    "text": "subprocess.run(cmd, input=b'data', stdout=subprocess.PIPE)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3526,
  "fields": {
    "question": 882,
    "text": "subprocess.run(cmd, stdin=b'data')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3527,
  "fields": {
    "question": 882,
    "text": "subprocess.Popen(cmd, data='in')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3528,
  "fields": {
    "question": 882,
    "text": "subprocess.call(cmd, write='data')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3529,
  "fields": {
    "question": 883,
    "text": "env = {**os.environ, 'PATH': '/opt/bin:' + os.environ['PATH']}; subprocess.run(cmd, env=env)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3530,
  "fields": {
    "question": 883,
    "text": "os.environ = {'PATH': '/opt/bin'}; subprocess.run(cmd)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3531,
  "fields": {
    "question": 883,
    "text": "subprocess.run(cmd, PATH='/opt/bin')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3532,
  "fields": {
    "question": 883,
    "text": "sys.setenv('PATH', '/opt/bin'); subprocess.run(cmd)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3533,
  "fields": {
    "question": 884,
    "text": "現在のプロセス画像を置換し、戻ってこない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3534,
  "fields": {
    "question": 884,
    "text": "新しい子プロセスを生成し、親は継続する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3535,
  "fields": {
    "question": 884,
    "text": "スレッドだけ再起動される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3536,
  "fields": {
    "question": 884,
    "text": "一時的に別バイナリを実行し、終了後に復帰する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3537,
  "fields": {
    "question": 885,
    "text": "os.fork()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3538,
  "fields": {
    "question": 885,
    "text": "os.getpid()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3539,
  "fields": {
    "question": 885,
    "text": "subprocess.run()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3540,
  "fields": {
    "question": 885,
    "text": "tempfile.TemporaryDirectory()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3541,
  "fields": {
    "question": 886,
    "text": "shutil.disk_usage(path)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3542,
  "fields": {
    "question": 886,
    "text": "os.disk_usage(path)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3543,
  "fields": {
    "question": 886,
    "text": "sys.diskinfo(path)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3544,
  "fields": {
    "question": 886,
    "text": "pathlib.Path(path).disk()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3545,
  "fields": {
    "question": 887,
    "text": "新規作成ファイルの許可ビットから差し引かれるマスク値",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3546,
  "fields": {
    "question": 887,
    "text": "既存ファイルの権限を即時変更する値",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3547,
  "fields": {
    "question": 887,
    "text": "所有者とグループIDを切り替えるフラグ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3548,
  "fields": {
    "question": 887,
    "text": "ACLを無効化するカーネル設定",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3549,
  "fields": {
    "question": 888,
    "text": "Pythonのsignalハンドラ登録はメインスレッドでのみ行える",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3550,
  "fields": {
    "question": 888,
    "text": "WindowsではSIGINTが存在しない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3551,
  "fields": {
    "question": 888,
    "text": "signal.signalは非同期I/O専用のAPI",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3552,
  "fields": {
    "question": 888,
    "text": "SIGKILLはキャッチして無視できる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3553,
  "fields": {
    "question": 889,
    "text": "現在プロセスのモジュール探索パスが変わるだけで、他プロセスには影響しない",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3554,
  "fields": {
    "question": 889,
    "text": "OSのPATH環境変数が更新される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3555,
  "fields": {
    "question": 889,
    "text": "site-packagesの内容が書き換わる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3556,
  "fields": {
    "question": 889,
    "text": "仮想環境の有効化が解除される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3557,
  "fields": {
    "question": 890,
    "text": "Path.cwd() は os.getcwd() と同等にCWDを表す",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3558,
  "fields": {
    "question": 890,
    "text": "Path.exists は関数であり呼び出しは exists(path)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3559,
  "fields": {
    "question": 890,
    "text": "Path.resolve は相対パスを必ずエラーにする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3560,
  "fields": {
    "question": 890,
    "text": "Path.join は os.join と同等",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3561,
  "fields": {
    "question": 891,
    "text": "subprocess.run(cmd, timeout=5)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3562,
  "fields": {
    "question": 891,
    "text": "subprocess.run(cmd, kill_after=5)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3563,
  "fields": {
    "question": 891,
    "text": "subprocess.call(cmd, timeout='5s')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3564,
  "fields": {
    "question": 891,
    "text": "subprocess.run(cmd); subprocess.alarm(5)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3565,
  "fields": {
    "question": 892,
    "text": "pathlib.Path('notes.txt').read_text(encoding='utf-8')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3566,
  "fields": {
    "question": 892,
    "text": "open('notes.txt').read()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3567,
  "fields": {
    "question": 892,
    "text": "io.TextIOWrapper('notes.txt', encoding='utf-8').read()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3568,
  "fields": {
    "question": 892,
    "text": "os.read('notes.txt', 'utf-8')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3569,
  "fields": {
    "question": 893,
    "text": "pathlib.Path('out.bin').write_bytes(b'\\x00\\x01')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3570,
  "fields": {
    "question": 893,
    "text": "open('out.bin', 'w').write(b'\\x00\\x01')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3571,
  "fields": {
    "question": 893,
    "text": "os.write('out.bin', b'\\x00\\x01')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3572,
  "fields": {
    "question": 893,
    "text": "io.BytesIO('out.bin').write(b'\\x00\\x01')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3573,
  "fields": {
    "question": 894,
    "text": "pathlib.Path('a/b/c').mkdir(parents=True, exist_ok=True)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3574,
  "fields": {
    "question": 894,
    "text": "os.mkdir('a/b/c', parents=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3575,
  "fields": {
    "question": 894,
    "text": "shutil.makedirs('a/b/c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3576,
  "fields": {
    "question": 894,
    "text": "pathlib.Path('a/b/c').touch()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3577,
  "fields": {
    "question": 895,
    "text": "[p for p in pathlib.Path('.').iterdir() if p.is_file()]",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3578,
  "fields": {
    "question": 895,
    "text": "list(pathlib.Path('.').glob('**'))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3579,
  "fields": {
    "question": 895,
    "text": "os.listdir('.', files_only=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3580,
  "fields": {
    "question": 895,
    "text": "glob.glob('**/*', recursive=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3581,
  "fields": {
    "question": 896,
    "text": "pathlib.Path('src').rglob('*.py')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3582,
  "fields": {
    "question": 896,
    "text": "glob.glob('src/*.py')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3583,
  "fields": {
    "question": 896,
    "text": "os.walk('src', pattern='*.py')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3584,
  "fields": {
    "question": 896,
    "text": "pathlib.Path('src').glob('*.py')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3585,
  "fields": {
    "question": 897,
    "text": "pathlib.Path('file.txt').unlink()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3586,
  "fields": {
    "question": 897,
    "text": "pathlib.Path('file.txt').rmdir()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3587,
  "fields": {
    "question": 897,
    "text": "shutil.rmtree('file.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3588,
  "fields": {
    "question": 897,
    "text": "os.removedirs('file.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3589,
  "fields": {
    "question": 898,
    "text": "shutil.rmtree('build')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3590,
  "fields": {
    "question": 898,
    "text": "os.rmdir('build')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3591,
  "fields": {
    "question": 898,
    "text": "pathlib.Path('build').unlink()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3592,
  "fields": {
    "question": 898,
    "text": "os.remove('build', recursive=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3593,
  "fields": {
    "question": 899,
    "text": "pathlib.Path('a.tmp').replace('a.txt')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3594,
  "fields": {
    "question": 899,
    "text": "os.rename('a.tmp', 'a.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3595,
  "fields": {
    "question": 899,
    "text": "pathlib.Path('a.tmp').rename('a.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3596,
  "fields": {
    "question": 899,
    "text": "shutil.move('a.tmp', 'a.txt', overwrite=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3597,
  "fields": {
    "question": 900,
    "text": "shutil.copy2(src, dst)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3598,
  "fields": {
    "question": 900,
    "text": "shutil.copy(src, dst)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3599,
  "fields": {
    "question": 900,
    "text": "shutil.copyfile(src, dst)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3600,
  "fields": {
    "question": 900,
    "text": "pathlib.Path(src).write_bytes(pathlib.Path(dst).read_bytes())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3601,
  "fields": {
    "question": 901,
    "text": "pathlib.Path('relative').resolve()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3602,
  "fields": {
    "question": 901,
    "text": "os.path.basename('relative')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3603,
  "fields": {
    "question": 901,
    "text": "os.path.join(os.getcwd(), 'relative', followlinks=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3604,
  "fields": {
    "question": 901,
    "text": "pathlib.Path('relative').absolute(resolve_symlink=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3605,
  "fields": {
    "question": 902,
    "text": "p = pathlib.Path('logs/app/out.txt'); p.parent.mkdir(parents=True, exist_ok=True); p.write_text('ok')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3606,
  "fields": {
    "question": 902,
    "text": "open('logs/app/out.txt', 'w', parents=True).write('ok')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3607,
  "fields": {
    "question": 902,
    "text": "os.makedirs('logs/app/out.txt', exist_ok=True); open(...)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3608,
  "fields": {
    "question": 902,
    "text": "pathlib.Path('logs/app/out.txt').mkdir(parents=True); open(...)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3609,
  "fields": {
    "question": 903,
    "text": "pathlib.Path('a.txt').chmod(0o644)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3610,
  "fields": {
    "question": 903,
    "text": "os.chmod('a.txt', '0644')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3611,
  "fields": {
    "question": 903,
    "text": "shutil.chmod('a.txt', 644)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3612,
  "fields": {
    "question": 903,
    "text": "pathlib.Path('a.txt').chmod('rw-r--r--')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3613,
  "fields": {
    "question": 904,
    "text": "os.path.lexists(path)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3614,
  "fields": {
    "question": 904,
    "text": "pathlib.Path(path).exists()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3615,
  "fields": {
    "question": 904,
    "text": "os.path.exists(path)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3616,
  "fields": {
    "question": 904,
    "text": "pathlib.Path(path).is_file()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3617,
  "fields": {
    "question": 905,
    "text": "fileinput.input()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3618,
  "fields": {
    "question": 905,
    "text": "io.openstack()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3619,
  "fields": {
    "question": 905,
    "text": "shutil.fileiter()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3620,
  "fields": {
    "question": 905,
    "text": "glob.input()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3621,
  "fields": {
    "question": 906,
    "text": "with open('data.bin', 'rb') as f: mm = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3622,
  "fields": {
    "question": 906,
    "text": "mm = mmap.mmap('data.bin', 0, mode='r')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3623,
  "fields": {
    "question": 906,
    "text": "with open('data.bin') as f: mmap.map(f, readonly=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3624,
  "fields": {
    "question": 906,
    "text": "mmap.open('data.bin', 'r')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3625,
  "fields": {
    "question": 907,
    "text": "tmp = tempfile.NamedTemporaryFile('w', delete=False); ...; tmp.close(); os.replace(tmp.name, 'conf.ini')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3626,
  "fields": {
    "question": 907,
    "text": "open('conf.ini', 'w').write(data); os.sync()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3627,
  "fields": {
    "question": 907,
    "text": "shutil.copy('conf.ini', 'conf.bak'); open('conf.ini', 'w').write(data)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3628,
  "fields": {
    "question": 907,
    "text": "pathlib.Path('conf.ini').write_text(data); os.rename('conf.ini', 'conf.ini')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3629,
  "fields": {
    "question": 908,
    "text": "os.walk(top)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3630,
  "fields": {
    "question": 908,
    "text": "os.listdir(top, recursive=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3631,
  "fields": {
    "question": 908,
    "text": "pathlib.Path(top).rmdir()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3632,
  "fields": {
    "question": 908,
    "text": "shutil.listdir(top)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3633,
  "fields": {
    "question": 909,
    "text": "filecmp.cmp('a.bin', 'b.bin', shallow=False)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3634,
  "fields": {
    "question": 909,
    "text": "hash('a.bin') == hash('b.bin')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3635,
  "fields": {
    "question": 909,
    "text": "os.stat('a.bin') == os.stat('b.bin')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3636,
  "fields": {
    "question": 909,
    "text": "shutil.compare('a.bin', 'b.bin')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3637,
  "fields": {
    "question": 910,
    "text": "pathlib.Path('~/config').expanduser()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3638,
  "fields": {
    "question": 910,
    "text": "os.path.expandvars('~/config')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3639,
  "fields": {
    "question": 910,
    "text": "os.environ['HOME'] + '/config'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3640,
  "fields": {
    "question": 910,
    "text": "pathlib.Path('~/config').resolve()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3641,
  "fields": {
    "question": 911,
    "text": "list(pathlib.Path('.').glob('*.txt'))",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3642,
  "fields": {
    "question": 911,
    "text": "glob.glob('**/*.txt', recursive=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3643,
  "fields": {
    "question": 911,
    "text": "pathlib.Path('.').rglob('*.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3644,
  "fields": {
    "question": 911,
    "text": "os.listdir('*.txt')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3645,
  "fields": {
    "question": 912,
    "text": "json.loads(s)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3646,
  "fields": {
    "question": 912,
    "text": "json.load(s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3647,
  "fields": {
    "question": 912,
    "text": "json.reads(s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3648,
  "fields": {
    "question": 912,
    "text": "ast.loads(s)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3649,
  "fields": {
    "question": 913,
    "text": "with open('out.json', 'w', encoding='utf-8') as f: json.dump(obj, f, ensure_ascii=False)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3650,
  "fields": {
    "question": 913,
    "text": "with open('out.json', 'wb') as f: json.dumps(obj, f)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3651,
  "fields": {
    "question": 913,
    "text": "with open('out.json', 'w') as f: json.write(obj, f)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3652,
  "fields": {
    "question": 913,
    "text": "with open('out.json', 'w') as f: f.write(json.dump(obj))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3653,
  "fields": {
    "question": 914,
    "text": "json.dump(obj, f, indent=2)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3654,
  "fields": {
    "question": 914,
    "text": "json.dump(obj, f, spacing=2)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3655,
  "fields": {
    "question": 914,
    "text": "json.dumps(obj, f, indent=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3656,
  "fields": {
    "question": 914,
    "text": "json.pretty(obj, f, 2)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3657,
  "fields": {
    "question": 915,
    "text": "JSONは日付/時刻の専用スカラー型を持たないため、文字列等に変換が必要",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3658,
  "fields": {
    "question": 915,
    "text": "json.dump はdatetimeを自動でUNIX時刻に変換するため不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3659,
  "fields": {
    "question": 915,
    "text": "JSONはバイナリ型のみを扱い、文字列は未対応",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3660,
  "fields": {
    "question": 915,
    "text": "jsonモジュールは辞書を扱えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3661,
  "fields": {
    "question": 916,
    "text": "csv.DictReader(f)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3662,
  "fields": {
    "question": 916,
    "text": "csv.reader(f, dict=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3663,
  "fields": {
    "question": 916,
    "text": "json.load(f)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3664,
  "fields": {
    "question": 916,
    "text": "csv.DictWriter(f)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3665,
  "fields": {
    "question": 917,
    "text": "newline=''",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3666,
  "fields": {
    "question": 917,
    "text": "newline='\\r\\n\\r\\n'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3667,
  "fields": {
    "question": 917,
    "text": "encoding='cp932'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3668,
  "fields": {
    "question": 917,
    "text": "lineterminator='\\r'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3669,
  "fields": {
    "question": 918,
    "text": "csv.writer(f).writerow(['a,b','c'])",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3670,
  "fields": {
    "question": 918,
    "text": "f.write('a,b,c\\n') でそのまま書く",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3671,
  "fields": {
    "question": 918,
    "text": "csv.writer(f, quote=False)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3672,
  "fields": {
    "question": 918,
    "text": "print(['a,b','c'], file=f)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3673,
  "fields": {
    "question": 919,
    "text": "csv.writer(f, delimiter='\\t', quoting=csv.QUOTE_NONE, escapechar='\\\\')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3674,
  "fields": {
    "question": 919,
    "text": "csv.writer(f, delimiter='\\t', quoting=False)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3675,
  "fields": {
    "question": 919,
    "text": "csv.writer(f, sep='\\t', quotechar=None)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3676,
  "fields": {
    "question": 919,
    "text": "csv.writer(f, dialect='tsv') で常に動く",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3677,
  "fields": {
    "question": 920,
    "text": "tomllib",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3678,
  "fields": {
    "question": 920,
    "text": "toml",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3679,
  "fields": {
    "question": 920,
    "text": "tomlkit",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3680,
  "fields": {
    "question": 920,
    "text": "tomli_w",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3681,
  "fields": {
    "question": 921,
    "text": "tomllib.loads(data.decode('utf-8'))",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3682,
  "fields": {
    "question": 921,
    "text": "tomllib.load(data)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3683,
  "fields": {
    "question": 921,
    "text": "tomllib.reads(data)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3684,
  "fields": {
    "question": 921,
    "text": "tomllib.parse_bytes(data)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3685,
  "fields": {
    "question": 922,
    "text": "plistlib",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3686,
  "fields": {
    "question": 922,
    "text": "configparser",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3687,
  "fields": {
    "question": 922,
    "text": "pickle",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3688,
  "fields": {
    "question": 922,
    "text": "marshal",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3689,
  "fields": {
    "question": 923,
    "text": "plistlib.dump(obj, f, fmt=plistlib.FMT_BINARY)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3690,
  "fields": {
    "question": 923,
    "text": "plistlib.dump(obj, f, binary=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3691,
  "fields": {
    "question": 923,
    "text": "plistlib.dumps(obj, encoding='binary')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3692,
  "fields": {
    "question": 923,
    "text": "plistlib.write(obj, f, format='bin')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3693,
  "fields": {
    "question": 924,
    "text": "struct",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3694,
  "fields": {
    "question": 924,
    "text": "array",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3695,
  "fields": {
    "question": 924,
    "text": "pickle",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3696,
  "fields": {
    "question": 924,
    "text": "tarfile",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3697,
  "fields": {
    "question": 925,
    "text": "struct.pack('<I', 123)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3698,
  "fields": {
    "question": 925,
    "text": "struct.pack('>I', 123)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3699,
  "fields": {
    "question": 925,
    "text": "struct.pack('<i', 123)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3700,
  "fields": {
    "question": 925,
    "text": "struct.pack('I', 123.0)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3701,
  "fields": {
    "question": 926,
    "text": "base64.b64encode(b'data').decode('ascii')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3702,
  "fields": {
    "question": 926,
    "text": "base64.encode('data')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3703,
  "fields": {
    "question": 926,
    "text": "b64.encodebytes('data')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3704,
  "fields": {
    "question": 926,
    "text": "codecs.base64('data')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3705,
  "fields": {
    "question": 927,
    "text": "str(uuid.uuid4())",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3706,
  "fields": {
    "question": 927,
    "text": "uuid.random()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3707,
  "fields": {
    "question": 927,
    "text": "uuid.uuid1(random=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3708,
  "fields": {
    "question": 927,
    "text": "uuid.new()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3709,
  "fields": {
    "question": 928,
    "text": "ipaddress.ip_address('2001:db8::1')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3710,
  "fields": {
    "question": 928,
    "text": "socket.parse_ip('2001:db8::1')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3711,
  "fields": {
    "question": 928,
    "text": "re.fullmatch で自作する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3712,
  "fields": {
    "question": 928,
    "text": "urllib.parse.ip('2001:db8::1')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3713,
  "fields": {
    "question": 929,
    "text": "with open('data.jl', 'r', encoding='utf-8') as f:\n    for line in f:\n        rec = json.loads(line)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3714,
  "fields": {
    "question": 929,
    "text": "json.load(open('data.jl', 'r', encoding='utf-8'))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3715,
  "fields": {
    "question": 929,
    "text": "list(map(json.loads, open('data.jl').read()))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3716,
  "fields": {
    "question": 929,
    "text": "jsonlines.load_iter(f)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3717,
  "fields": {
    "question": 930,
    "text": "json.loads(s, parse_float=decimal.Decimal)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3718,
  "fields": {
    "question": 930,
    "text": "json.loads(s, float_hook=decimal.Decimal)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3719,
  "fields": {
    "question": 930,
    "text": "json.load(f, use_decimal=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3720,
  "fields": {
    "question": 930,
    "text": "json.loads(s, number_type='decimal')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3721,
  "fields": {
    "question": 931,
    "text": "JSONのオブジェクトキーは仕様上文字列のみが許されるため、数値キーは文字列化される",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3722,
  "fields": {
    "question": 931,
    "text": "Pythonのdictはキーが任意型なのでJSONでも任意型が保存される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3723,
  "fields": {
    "question": 931,
    "text": "json.dump はキーを常に数値へ変換する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3724,
  "fields": {
    "question": 931,
    "text": "JSON仕様ではキーは未定義で実装依存",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3725,
  "fields": {
    "question": 932,
    "text": "1レコード＝1行のJSON Lines形式にしてストリーム処理する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3726,
  "fields": {
    "question": 932,
    "text": "json.loadで一括読みしてからforで回す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3727,
  "fields": {
    "question": 932,
    "text": "ファイルを全部readしてsplit(',')で分割する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3728,
  "fields": {
    "question": 932,
    "text": "pickleで保存し直してから読む",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3729,
  "fields": {
    "question": 933,
    "text": "with urllib.request.urlopen(url, timeout=5) as r: text = r.read().decode('utf-8')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3730,
  "fields": {
    "question": 933,
    "text": "text = urllib.request.urlopen(url).text",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3731,
  "fields": {
    "question": 933,
    "text": "with urllib.request.urlopen(url) as r: text = str(r.read())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3732,
  "fields": {
    "question": 933,
    "text": "with urllib.request.urlopen(url) as r: text = r.decode('utf-8')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3733,
  "fields": {
    "question": 934,
    "text": "urllib.parse.urlparse(url)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3734,
  "fields": {
    "question": 934,
    "text": "urllib.request.urlsplit(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3735,
  "fields": {
    "question": 934,
    "text": "urllib.parse.urlencode(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3736,
  "fields": {
    "question": 934,
    "text": "urllib.error.urlparse(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3737,
  "fields": {
    "question": 935,
    "text": "urllib.parse.urlencode(params, doseq=True)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3738,
  "fields": {
    "question": 935,
    "text": "urllib.parse.quote(params, multiple=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3739,
  "fields": {
    "question": 935,
    "text": "urllib.parse.urlencode_list(params)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3740,
  "fields": {
    "question": 935,
    "text": "urllib.parse.urljoin(base, params)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3741,
  "fields": {
    "question": 936,
    "text": "urllib.parse.parse_qs('a=1&a=2&b=3')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3742,
  "fields": {
    "question": 936,
    "text": "urllib.parse.urlparse('a=1&a=2&b=3')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3743,
  "fields": {
    "question": 936,
    "text": "urllib.parse.parse_url('a=1&a=2&b=3')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3744,
  "fields": {
    "question": 936,
    "text": "urllib.request.parse_qs('a=1&a=2&b=3')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3745,
  "fields": {
    "question": 937,
    "text": "urllib.parse.urljoin('https://example.com/a/b/', '../c')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3746,
  "fields": {
    "question": 937,
    "text": "urllib.parse.urlunparse('https://example.com', '../c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3747,
  "fields": {
    "question": 937,
    "text": "urllib.request.urlmerge('https://example.com/a/b/', '../c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3748,
  "fields": {
    "question": 937,
    "text": "urllib.parse.join('https://example.com/a/b/', '../c')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3749,
  "fields": {
    "question": 938,
    "text": "urllib.parse.quote_plus('a b')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3750,
  "fields": {
    "question": 938,
    "text": "urllib.parse.quote('a b')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3751,
  "fields": {
    "question": 938,
    "text": "urllib.parse.unquote_plus('a b')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3752,
  "fields": {
    "question": 938,
    "text": "urllib.parse.encode_plus('a b')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3753,
  "fields": {
    "question": 939,
    "text": "req = urllib.request.Request(url, headers={'User-Agent':'MyApp/1.0'}); urllib.request.urlopen(req)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3754,
  "fields": {
    "question": 939,
    "text": "urllib.request.urlopen(url, user_agent='MyApp/1.0')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3755,
  "fields": {
    "question": 939,
    "text": "urllib.parse.urlencode({'User-Agent':'MyApp/1.0'})",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3756,
  "fields": {
    "question": 939,
    "text": "urllib.request.add_header(url, 'User-Agent', 'MyApp/1.0')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3757,
  "fields": {
    "question": 940,
    "text": "try:\n    urllib.request.urlopen(url)\nexcept urllib.error.HTTPError as e:\n    code = e.code",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3758,
  "fields": {
    "question": 940,
    "text": "except urllib.error.URLError as e:\n    code = e.status",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3759,
  "fields": {
    "question": 940,
    "text": "except Exception as e:\n    code = e.http_status",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3760,
  "fields": {
    "question": 940,
    "text": "code = urllib.request.status_code(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3761,
  "fields": {
    "question": 941,
    "text": "urllib.robotparser",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3762,
  "fields": {
    "question": 941,
    "text": "urllib.robots",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3763,
  "fields": {
    "question": 941,
    "text": "http.robotparser",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3764,
  "fields": {
    "question": 941,
    "text": "robotparser",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3765,
  "fields": {
    "question": 942,
    "text": "http.client.HTTPSConnection",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3766,
  "fields": {
    "question": 942,
    "text": "http.client.HTTPSSession",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3767,
  "fields": {
    "question": 942,
    "text": "urllib.request.HTTPSession",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3768,
  "fields": {
    "question": 942,
    "text": "http.client.TLSConnection",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3769,
  "fields": {
    "question": 943,
    "text": "ssl.create_default_context()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3770,
  "fields": {
    "question": 943,
    "text": "ssl.SSLContext(ssl.CERT_NONE)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3771,
  "fields": {
    "question": 943,
    "text": "ssl.default_context(verify=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3772,
  "fields": {
    "question": 943,
    "text": "ssl.wrap_socket(verify=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3773,
  "fields": {
    "question": 944,
    "text": "cj = http.cookiejar.CookieJar(); opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj)); opener.open(url)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3774,
  "fields": {
    "question": 944,
    "text": "urllib.request.urlopen(url, cookies=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3775,
  "fields": {
    "question": 944,
    "text": "http.cookies.SimpleCookie().open(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3776,
  "fields": {
    "question": 944,
    "text": "urllib.parse.cookieopen(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3777,
  "fields": {
    "question": 945,
    "text": "opener = urllib.request.build_opener(urllib.request.ProxyHandler({'http':'http://proxy:8080'})); opener.open(url)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3778,
  "fields": {
    "question": 945,
    "text": "urllib.request.urlopen(url, proxy='http://proxy:8080')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3779,
  "fields": {
    "question": 945,
    "text": "urllib.parse.Proxy('http://proxy:8080').open(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3780,
  "fields": {
    "question": 945,
    "text": "http.client.HTTPConnection(proxy='http://proxy:8080')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3781,
  "fields": {
    "question": 946,
    "text": "data = urllib.parse.urlencode(params).encode(); req = urllib.request.Request(url, data=data); urllib.request.urlopen(req)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3782,
  "fields": {
    "question": 946,
    "text": "data = urllib.parse.quote(params); urllib.request.urlopen(url, data=data)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3783,
  "fields": {
    "question": 946,
    "text": "urllib.request.post(url, json=params)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3784,
  "fields": {
    "question": 946,
    "text": "urllib.parse.urlencode(params); urllib.request.urlopen(url, method='POST')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3785,
  "fields": {
    "question": 947,
    "text": "enc = r.headers.get_content_charset('utf-8'); text = r.read().decode(enc)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3786,
  "fields": {
    "question": 947,
    "text": "enc = r.getheader('charset', 'utf-8'); text = r.decode(enc)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3787,
  "fields": {
    "question": 947,
    "text": "text = r.text(encoding='detect')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3788,
  "fields": {
    "question": 947,
    "text": "enc = r.info().charset or 'utf-8'; text = r.read().decode(enc)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3789,
  "fields": {
    "question": 948,
    "text": "urllib.error.URLError（内部のreasonにsocket.timeout）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3790,
  "fields": {
    "question": 948,
    "text": "urllib.error.TimeoutErrorのみ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3791,
  "fields": {
    "question": 948,
    "text": "http.client.TimeoutExceptionのみ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3792,
  "fields": {
    "question": 948,
    "text": "ValueError('timeout')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3793,
  "fields": {
    "question": 949,
    "text": "レスポンスが自動的にクローズされ、リソースリークを防げる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3794,
  "fields": {
    "question": 949,
    "text": "自動でリトライされる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3795,
  "fields": {
    "question": 949,
    "text": "自動で文字コード判定される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3796,
  "fields": {
    "question": 949,
    "text": "自動でキャッシュに保存される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3797,
  "fields": {
    "question": 950,
    "text": "webbrowser.open(url)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3798,
  "fields": {
    "question": 950,
    "text": "urllib.request.open(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3799,
  "fields": {
    "question": 950,
    "text": "http.client.open(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3800,
  "fields": {
    "question": 950,
    "text": "urllib.parse.open(url)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3801,
  "fields": {
    "question": 951,
    "text": "xmlrpc.client.ServerProxy",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3802,
  "fields": {
    "question": 951,
    "text": "xmlrpc.client.Client",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3803,
  "fields": {
    "question": 951,
    "text": "xmlrpc.server.ClientProxy",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3804,
  "fields": {
    "question": 951,
    "text": "urllib.request.XMLRPCProxy",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3805,
  "fields": {
    "question": 952,
    "text": "urllib.parse.quote(path, safe='/')",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3806,
  "fields": {
    "question": 952,
    "text": "urllib.parse.urlencode(path, safe='/')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3807,
  "fields": {
    "question": 952,
    "text": "urllib.parse.quote_plus(path, keep='/')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3808,
  "fields": {
    "question": 952,
    "text": "urllib.parse.escape(path, safe='/')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3809,
  "fields": {
    "question": 953,
    "text": "unittest",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3810,
  "fields": {
    "question": 953,
    "text": "doctest2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3811,
  "fields": {
    "question": 953,
    "text": "pycheck",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3812,
  "fields": {
    "question": 953,
    "text": "inspecttest",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3813,
  "fields": {
    "question": 954,
    "text": "名前が test で始まるメソッド",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3814,
  "fields": {
    "question": 954,
    "text": "アノテーション @test を付けたメソッド",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3815,
  "fields": {
    "question": 954,
    "text": "末尾が _spec のメソッド",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3816,
  "fields": {
    "question": 954,
    "text": "クラス変数に列挙したメソッドのみ",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3817,
  "fields": {
    "question": 955,
    "text": "@classmethod を付けた setUpClass",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3818,
  "fields": {
    "question": 955,
    "text": "setUp",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3819,
  "fields": {
    "question": 955,
    "text": "tearDown",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3820,
  "fields": {
    "question": 955,
    "text": "tearDownModule",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3821,
  "fields": {
    "question": 956,
    "text": "with self.assertRaises(ValueError): func()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3822,
  "fields": {
    "question": 956,
    "text": "self.assertTrue(raises(ValueError, func))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3823,
  "fields": {
    "question": 956,
    "text": "self.assertRaises == ValueError(func())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3824,
  "fields": {
    "question": 956,
    "text": "self.assertEqual(func(), ValueError)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3825,
  "fields": {
    "question": 957,
    "text": "if __name__ == \"__main__\": unittest.main()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3826,
  "fields": {
    "question": 957,
    "text": "if __name__ == \"__main__\": unittest.run()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3827,
  "fields": {
    "question": 957,
    "text": "main() があれば自動で走るため不要",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3828,
  "fields": {
    "question": 957,
    "text": "python -m main で常に起動される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3829,
  "fields": {
    "question": 958,
    "text": "python -m unittest discover -s tests",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3830,
  "fields": {
    "question": 958,
    "text": "python -m unittest run tests/*",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3831,
  "fields": {
    "question": 958,
    "text": "python -m discover tests",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3832,
  "fields": {
    "question": 958,
    "text": "unittest discover tests",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3833,
  "fields": {
    "question": 959,
    "text": "属性アクセスや呼び出しを動的に偽装できる多機能なモックオブジェクト",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3834,
  "fields": {
    "question": 959,
    "text": "実オブジェクトの完全なコピーを作るためのクラス",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3835,
  "fields": {
    "question": 959,
    "text": "戻り値を固定できないため side_effect は使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3836,
  "fields": {
    "question": 959,
    "text": "spec を指定すると属性アクセスが無制限になる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3837,
  "fields": {
    "question": 960,
    "text": "with mock.patch(\"mymod.foo\") as m: ...",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3838,
  "fields": {
    "question": 960,
    "text": "with mock.patch(foo) as m: ...",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3839,
  "fields": {
    "question": 960,
    "text": "with mock.patch.object(foo, 'mymod') as m: ...",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3840,
  "fields": {
    "question": 960,
    "text": "with mock.patch('foo.mymod') as m: ...",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3841,
  "fields": {
    "question": 961,
    "text": "with ブロックやデコレータのスコープを抜けると自動的に元に戻る",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3842,
  "fields": {
    "question": 961,
    "text": "一度パッチするとプロセス終了まで維持される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3843,
  "fields": {
    "question": 961,
    "text": "明示的に unpatch() を呼ばないと戻らない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3844,
  "fields": {
    "question": 961,
    "text": "スレッドを跨ぐと自動的に解除される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3845,
  "fields": {
    "question": 962,
    "text": "mock_obj.assert_called_once_with(1, 2)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3846,
  "fields": {
    "question": 962,
    "text": "self.assertCalled(mock_obj, times=1, args=(1,2))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3847,
  "fields": {
    "question": 962,
    "text": "assert mock_obj.called_with(1, 2)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3848,
  "fields": {
    "question": 962,
    "text": "mock_obj.assert_call(1, 2)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3849,
  "fields": {
    "question": 963,
    "text": "同一テストメソッド内で複数ケースを独立して報告するために使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3850,
  "fields": {
    "question": 963,
    "text": "テストを並列実行するためのAPI",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3851,
  "fields": {
    "question": 963,
    "text": "テストのタイムアウトを設定するためのAPI",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3852,
  "fields": {
    "question": 963,
    "text": "重いI/OをスキップするためのAPI",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3853,
  "fields": {
    "question": 964,
    "text": "self.assertAlmostEqual(a, b, places=7)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3854,
  "fields": {
    "question": 964,
    "text": "self.assertEqual(a, b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3855,
  "fields": {
    "question": 964,
    "text": "self.assertIs(a, b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3856,
  "fields": {
    "question": 964,
    "text": "self.assertRegex(str(a), str(b))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3857,
  "fields": {
    "question": 965,
    "text": "assertLogs",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3858,
  "fields": {
    "question": 965,
    "text": "assertLogger",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3859,
  "fields": {
    "question": 965,
    "text": "captureLogs",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3860,
  "fields": {
    "question": 965,
    "text": "patchLogs",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3861,
  "fields": {
    "question": 966,
    "text": "assertWarns",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3862,
  "fields": {
    "question": 966,
    "text": "assertWarning",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3863,
  "fields": {
    "question": 966,
    "text": "assertRaises(Warning)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3864,
  "fields": {
    "question": 966,
    "text": "assertIssues",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3865,
  "fields": {
    "question": 967,
    "text": "patch 対象に return_value を設定する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3866,
  "fields": {
    "question": 967,
    "text": "spec を外して自由な属性アクセスを許可する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3867,
  "fields": {
    "question": 967,
    "text": "autospec=False で厳格にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3868,
  "fields": {
    "question": 967,
    "text": "side_effect に戻り値を代入する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3869,
  "fields": {
    "question": 968,
    "text": "呼び出しごとに異なる戻り値や例外を発生させる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3870,
  "fields": {
    "question": 968,
    "text": "モックの属性名を制約する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3871,
  "fields": {
    "question": 968,
    "text": "ログのキャプチャを有効化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3872,
  "fields": {
    "question": 968,
    "text": "テストの並列実行を制御する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3873,
  "fields": {
    "question": 969,
    "text": "mock_open を用いて open をパッチする",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3874,
  "fields": {
    "question": 969,
    "text": "tempfile.TemporaryFile を常に使用する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3875,
  "fields": {
    "question": 969,
    "text": "os.devnull へ書き出す",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3876,
  "fields": {
    "question": 969,
    "text": "標準入力出力に付け替える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3877,
  "fields": {
    "question": 970,
    "text": "テスト間で状態を共有しない（フィクスチャで毎回初期化）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3878,
  "fields": {
    "question": 970,
    "text": "高速化のため同じオブジェクトをグローバルに再利用する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3879,
  "fields": {
    "question": 970,
    "text": "順序依存のテストを書き、実行順を固定する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3880,
  "fields": {
    "question": 970,
    "text": "外部サービスへの実通信を許可する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3881,
  "fields": {
    "question": 971,
    "text": "モジュールを import したときにテストが自動実行されるのを防ぐ",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3882,
  "fields": {
    "question": 971,
    "text": "discover 実行時にのみ動くよう制限できる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3883,
  "fields": {
    "question": 971,
    "text": "テストの並列実行が有効になる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3884,
  "fields": {
    "question": 971,
    "text": "テストのタイムアウトが設定される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3885,
  "fields": {
    "question": 972,
    "text": "例外の型だけでなくメッセージ内容も正規表現で検証する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3886,
  "fields": {
    "question": 972,
    "text": "ログのメッセージを正規表現で照合する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3887,
  "fields": {
    "question": 972,
    "text": "戻り値の文字列を正規表現で検証する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3888,
  "fields": {
    "question": 972,
    "text": "警告メッセージのみを検証する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3889,
  "fields": {
    "question": 973,
    "text": "Mock(spec=OriginalClass)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3890,
  "fields": {
    "question": 973,
    "text": "Mock(strict=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3891,
  "fields": {
    "question": 973,
    "text": "MagicMock(unsafe=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3892,
  "fields": {
    "question": 973,
    "text": "Mock(auto=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3893,
  "fields": {
    "question": 974,
    "text": "@unittest.skip(\"理由\") で無条件スキップできる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3894,
  "fields": {
    "question": 974,
    "text": "@skipUnless を使うと常に失敗として扱われる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3895,
  "fields": {
    "question": 974,
    "text": "スキップはテスト検出対象から完全に除外される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3896,
  "fields": {
    "question": 974,
    "text": "スキップはテストメソッドには使えない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3897,
  "fields": {
    "question": 975,
    "text": "python -m unittest -v",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3898,
  "fields": {
    "question": 975,
    "text": "python -m unittest --detail",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3899,
  "fields": {
    "question": 975,
    "text": "python -m unittest verbose",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3900,
  "fields": {
    "question": 975,
    "text": "python -m unittest -V",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3901,
  "fields": {
    "question": 976,
    "text": "tempfile.TemporaryDirectory() をコンテキストマネージャで使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3902,
  "fields": {
    "question": 976,
    "text": "/tmp に固定パスを作る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3903,
  "fields": {
    "question": 976,
    "text": "ホームディレクトリ直下に生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3904,
  "fields": {
    "question": 976,
    "text": "現在ディレクトリに .tmp を作る",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3905,
  "fields": {
    "question": 977,
    "text": "self.assertCountEqual(a, b)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3906,
  "fields": {
    "question": 977,
    "text": "self.assertItemsEqual(a, b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3907,
  "fields": {
    "question": 977,
    "text": "self.assertSameElements(a, b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3908,
  "fields": {
    "question": 977,
    "text": "self.assertSetLikeEqual(a, b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3909,
  "fields": {
    "question": 978,
    "text": "mock.patch.dict(os.environ, {\"KEY\": \"VAL\"}, clear=False)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3910,
  "fields": {
    "question": 978,
    "text": "os.environ[\"KEY\"] = \"VAL\" を直接書き換え、戻さない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3911,
  "fields": {
    "question": 978,
    "text": "subprocess で別プロセスを常に起動する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3912,
  "fields": {
    "question": 978,
    "text": "configparser を使って環境変数を変更する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3913,
  "fields": {
    "question": 979,
    "text": "モジュール内のテスト実行前後にそれぞれ1回だけ呼ばれる関数",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3914,
  "fields": {
    "question": 979,
    "text": "各 TestCase の前後に毎回呼ばれる関数",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3915,
  "fields": {
    "question": 979,
    "text": "discover では無視される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3916,
  "fields": {
    "question": 979,
    "text": "クラスメソッドとして定義する必要がある",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3917,
  "fields": {
    "question": 980,
    "text": "datetime.now を patch して固定値を返すようにする",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3918,
  "fields": {
    "question": 980,
    "text": "sleep を長くして失敗を減らす",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3919,
  "fields": {
    "question": 980,
    "text": "タイムゾーンを手作業で切り替える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3920,
  "fields": {
    "question": 980,
    "text": "乱数シードを増やす",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3921,
  "fields": {
    "question": 981,
    "text": "suite = unittest.TestLoader().loadTestsFromModule(mod)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3922,
  "fields": {
    "question": 981,
    "text": "suite = unittest.collect(mod)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3923,
  "fields": {
    "question": 981,
    "text": "suite = TestCase.group(mod)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3924,
  "fields": {
    "question": 981,
    "text": "suite = unittest.TestRunner().discover(mod)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3925,
  "fields": {
    "question": 982,
    "text": "docstring 中の対話実行例（>>>）を実行・照合する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3926,
  "fields": {
    "question": 982,
    "text": "Type hint を自動生成する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3927,
  "fields": {
    "question": 982,
    "text": "HTML ドキュメントを解析してテスト化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3928,
  "fields": {
    "question": 982,
    "text": "PyPI パッケージのみ対象にできる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3929,
  "fields": {
    "question": 983,
    "text": "python -m doctest -v your_module.py",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3930,
  "fields": {
    "question": 983,
    "text": "python -m unittest doctest your_module.py",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3931,
  "fields": {
    "question": 983,
    "text": "python your_module.py --doctest",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3932,
  "fields": {
    "question": 983,
    "text": "python -m docstring test your_module.py",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3933,
  "fields": {
    "question": 984,
    "text": "Mock",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3934,
  "fields": {
    "question": 984,
    "text": "Dummy",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3935,
  "fields": {
    "question": 984,
    "text": "Fake",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3936,
  "fields": {
    "question": 984,
    "text": "Stub（戻り値固定のみ）",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3937,
  "fields": {
    "question": 985,
    "text": "入力・操作・期待結果が分かる名前にする（例: test_add_returns_sum）",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3938,
  "fields": {
    "question": 985,
    "text": "すべてのテスト名を連番にする（test_001 など）",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3939,
  "fields": {
    "question": 985,
    "text": "短ければ意味がなくてもよい",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3940,
  "fields": {
    "question": 985,
    "text": "クラス名に全機能名を詰め込む",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3941,
  "fields": {
    "question": 986,
    "text": "HTTP クライアントやソケット層をモックして応答を固定する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3942,
  "fields": {
    "question": 986,
    "text": "テスト前にネットワークを無効化する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3943,
  "fields": {
    "question": 986,
    "text": "外部APIの無料枠を利用して実通信する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3944,
  "fields": {
    "question": 986,
    "text": "タイムアウトを長くする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3945,
  "fields": {
    "question": 987,
    "text": "unittest.TextTestRunner(stream=io.StringIO())",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3946,
  "fields": {
    "question": 987,
    "text": "unittest.main(stream=io.StringIO())",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3947,
  "fields": {
    "question": 987,
    "text": "unittest.runner(stream=sys.stdout).run()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3948,
  "fields": {
    "question": 987,
    "text": "TextTestRunner.output=sys.stdout",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3949,
  "fields": {
    "question": 988,
    "text": "contextlib.redirect_stdout を使って StringIO へ捕捉する",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3950,
  "fields": {
    "question": 988,
    "text": "print を上書きする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3951,
  "fields": {
    "question": 988,
    "text": "sys.stdout = None にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3952,
  "fields": {
    "question": 988,
    "text": "logging に置き換える",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3953,
  "fields": {
    "question": 989,
    "text": "乱数生成器を注入し、seed を固定するかモックする",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3954,
  "fields": {
    "question": 989,
    "text": "テストを複数回走らせ、一度でも通れば合格とする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3955,
  "fields": {
    "question": 989,
    "text": "乱数の結果を広く許容する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3956,
  "fields": {
    "question": 989,
    "text": "乱数を時間に基づかせる",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3957,
  "fields": {
    "question": 990,
    "text": "breakpoint()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3958,
  "fields": {
    "question": 990,
    "text": "debug()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3959,
  "fields": {
    "question": 990,
    "text": "inspect()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3960,
  "fields": {
    "question": 990,
    "text": "trap()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3961,
  "fields": {
    "question": 991,
    "text": "PYTHONBREAKPOINT=0",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3962,
  "fields": {
    "question": 991,
    "text": "PYTHONDEBUG=off",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3963,
  "fields": {
    "question": 991,
    "text": "PYTHONINSPECT=0",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3964,
  "fields": {
    "question": 991,
    "text": "PYTHONDONTWRITEBYTECODE=1",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3965,
  "fields": {
    "question": 992,
    "text": "n",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3966,
  "fields": {
    "question": 992,
    "text": "s",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3967,
  "fields": {
    "question": 992,
    "text": "c",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3968,
  "fields": {
    "question": 992,
    "text": "r",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3969,
  "fields": {
    "question": 993,
    "text": "python -m pdb your_script.py",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3970,
  "fields": {
    "question": 993,
    "text": "python --debug your_script.py",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3971,
  "fields": {
    "question": 993,
    "text": "python -m inspect your_script.py",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3972,
  "fields": {
    "question": 993,
    "text": "python -X debug your_script.py",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3973,
  "fields": {
    "question": 994,
    "text": "p expr",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3974,
  "fields": {
    "question": 994,
    "text": "echo expr",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3975,
  "fields": {
    "question": 994,
    "text": "show expr",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3976,
  "fields": {
    "question": 994,
    "text": "val expr",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3977,
  "fields": {
    "question": 995,
    "text": "r",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3978,
  "fields": {
    "question": 995,
    "text": "b",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3979,
  "fields": {
    "question": 995,
    "text": "u",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3980,
  "fields": {
    "question": 995,
    "text": "w",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3981,
  "fields": {
    "question": 996,
    "text": "b 120",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3982,
  "fields": {
    "question": 996,
    "text": "breakline 120",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3983,
  "fields": {
    "question": 996,
    "text": "bp:120",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3984,
  "fields": {
    "question": 996,
    "text": "stop 120",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3985,
  "fields": {
    "question": 997,
    "text": "clear 2",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3986,
  "fields": {
    "question": 997,
    "text": "delete 2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3987,
  "fields": {
    "question": 997,
    "text": "unbreak 2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3988,
  "fields": {
    "question": 997,
    "text": "remove 2",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3989,
  "fields": {
    "question": 998,
    "text": "pdb.post_mortem()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3990,
  "fields": {
    "question": 998,
    "text": "pdb.after_exception()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3991,
  "fields": {
    "question": 998,
    "text": "pdb.resume()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3992,
  "fields": {
    "question": 998,
    "text": "pdb.rollback()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3993,
  "fields": {
    "question": 999,
    "text": "PYTHONBREAKPOINT='pkg.module:func'",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3994,
  "fields": {
    "question": 999,
    "text": "PYTHONBREAKPOINT='pkg.module.func()'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3995,
  "fields": {
    "question": 999,
    "text": "PYTHONBREAKPOINT='[func@pkg.module](mailto:func@pkg.module)'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3996,
  "fields": {
    "question": 999,
    "text": "PYTHONBREAKPOINT='pkg:module.func()'",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3997,
  "fields": {
    "question": 1000,
    "text": "logging.basicConfig(level=logging.DEBUG)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 3998,
  "fields": {
    "question": 1000,
    "text": "logging.setLevel(logging.DEBUG)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 3999,
  "fields": {
    "question": 1000,
    "text": "logging.enable(DEBUG=True)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4000,
  "fields": {
    "question": 1000,
    "text": "logging.start(level='DEBUG')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4001,
  "fields": {
    "question": 1001,
    "text": "logger = logging.getLogger(**name**)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4002,
  "fields": {
    "question": 1001,
    "text": "logger = logging.Logger()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4003,
  "fields": {
    "question": 1001,
    "text": "logger = logging.root",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4004,
  "fields": {
    "question": 1001,
    "text": "logger = logging.getLogger()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4005,
  "fields": {
    "question": 1002,
    "text": "warnings.simplefilter('error', DeprecationWarning)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4006,
  "fields": {
    "question": 1002,
    "text": "warnings.setlevel('DEBUG')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4007,
  "fields": {
    "question": 1002,
    "text": "warnings.raise_on(DeprecationWarning)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4008,
  "fields": {
    "question": 1002,
    "text": "warnings.filter('fatal')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4009,
  "fields": {
    "question": 1003,
    "text": "import faulthandler; faulthandler.enable()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4010,
  "fields": {
    "question": 1003,
    "text": "import sys; sys.enable_faults()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4011,
  "fields": {
    "question": 1003,
    "text": "import inspect; inspect.enable()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4012,
  "fields": {
    "question": 1003,
    "text": "import signal; signal.enable()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4013,
  "fields": {
    "question": 1004,
    "text": "tracemalloc.start()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4014,
  "fields": {
    "question": 1004,
    "text": "gc.track()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4015,
  "fields": {
    "question": 1004,
    "text": "resource.enable()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4016,
  "fields": {
    "question": 1004,
    "text": "memoryview.start()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4017,
  "fields": {
    "question": 1005,
    "text": "args",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4018,
  "fields": {
    "question": 1005,
    "text": "params",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4019,
  "fields": {
    "question": 1005,
    "text": "argv",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4020,
  "fields": {
    "question": 1005,
    "text": "showargs",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4021,
  "fields": {
    "question": 1006,
    "text": "if **name** == '**main**':",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4022,
  "fields": {
    "question": 1006,
    "text": "if **debug**:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4023,
  "fields": {
    "question": 1006,
    "text": "if **package** is None:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4024,
  "fields": {
    "question": 1006,
    "text": "if **loader** is None:",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4025,
  "fields": {
    "question": 1007,
    "text": "inspect.getsource(func)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4026,
  "fields": {
    "question": 1007,
    "text": "sys.getsource(func)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4027,
  "fields": {
    "question": 1007,
    "text": "ast.source(func)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4028,
  "fields": {
    "question": 1007,
    "text": "codecs.getsource(func)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4029,
  "fields": {
    "question": 1008,
    "text": "出力のレベル・フォーマット・出力先を設定で切り替えられる",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4030,
  "fields": {
    "question": 1008,
    "text": "実行速度が常に速い",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4031,
  "fields": {
    "question": 1008,
    "text": "例外を自動修復する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4032,
  "fields": {
    "question": 1008,
    "text": "最適化オプションで自動的に削除される",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4033,
  "fields": {
    "question": 1009,
    "text": "contextlib.redirect_stdout(io.StringIO()) を使う",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4034,
  "fields": {
    "question": 1009,
    "text": "sys.stdout を常時 None にする",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4035,
  "fields": {
    "question": 1009,
    "text": "print をモンキーパッチして戻さない",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4036,
  "fields": {
    "question": 1009,
    "text": "subprocess 経由で再実行する",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4037,
  "fields": {
    "question": 1010,
    "text": "assert 条件式",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4038,
  "fields": {
    "question": 1010,
    "text": "print('debug')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4039,
  "fields": {
    "question": 1010,
    "text": "raise SystemExit()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4040,
  "fields": {
    "question": 1010,
    "text": "warnings.warn('debug')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4041,
  "fields": {
    "question": 1011,
    "text": "hashlib",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4042,
  "fields": {
    "question": 1011,
    "text": "random",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4043,
  "fields": {
    "question": 1011,
    "text": "zlib",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4044,
  "fields": {
    "question": 1011,
    "text": "marshal",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4045,
  "fields": {
    "question": 1012,
    "text": "secrets",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4046,
  "fields": {
    "question": 1012,
    "text": "random",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4047,
  "fields": {
    "question": 1012,
    "text": "uuid",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4048,
  "fields": {
    "question": 1012,
    "text": "itertools",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4049,
  "fields": {
    "question": 1013,
    "text": "hmac.new(key, msg, hashlib.sha256).hexdigest()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4050,
  "fields": {
    "question": 1013,
    "text": "hashlib.sha256(key + msg).hexdigest()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4051,
  "fields": {
    "question": 1013,
    "text": "secrets.token_hex(len(msg))",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4052,
  "fields": {
    "question": 1013,
    "text": "base64.b64encode(msg)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4053,
  "fields": {
    "question": 1014,
    "text": "hashlib.pbkdf2_hmac('sha256', password=b'pw', salt=b's', iterations=100_000)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4054,
  "fields": {
    "question": 1014,
    "text": "hashlib.pbkdf2('sha256', b'pw', b's', 100_000)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4055,
  "fields": {
    "question": 1014,
    "text": "hmac.derive('sha256', b'pw', b's', 100_000)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4056,
  "fields": {
    "question": 1014,
    "text": "secrets.pbkdf2(b'pw', b's', 100_000)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4057,
  "fields": {
    "question": 1015,
    "text": "hashlib.scrypt(password=b'pw', salt=b's', n=2**14, r=8, p=1)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4058,
  "fields": {
    "question": 1015,
    "text": "hashlib.scrypt(b'pw', b's')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4059,
  "fields": {
    "question": 1015,
    "text": "hmac.scrypt(b'pw', b's', 100_000)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4060,
  "fields": {
    "question": 1015,
    "text": "secrets.scrypt('pw')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4061,
  "fields": {
    "question": 1016,
    "text": "hmac.compare_digest(a, b)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4062,
  "fields": {
    "question": 1016,
    "text": "a == b",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4063,
  "fields": {
    "question": 1016,
    "text": "hashlib.sha256(a).hexdigest() == hashlib.sha256(b).hexdigest()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4064,
  "fields": {
    "question": 1016,
    "text": "secrets.compare(a, b)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4065,
  "fields": {
    "question": 1017,
    "text": "hashlib.blake2b(b'msg', key=b'k').hexdigest()",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4066,
  "fields": {
    "question": 1017,
    "text": "hashlib.blake2b(b'k'+b'msg').hexdigest()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4067,
  "fields": {
    "question": 1017,
    "text": "hmac.new(b'k', b'msg', hashlib.blake2b()).hexdigest()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4068,
  "fields": {
    "question": 1017,
    "text": "secrets.blake2(b'msg', key=b'k')",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4069,
  "fields": {
    "question": 1018,
    "text": "base64.b64encode",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4070,
  "fields": {
    "question": 1018,
    "text": "hashlib.sha256",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4071,
  "fields": {
    "question": 1018,
    "text": "hmac.new(...)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4072,
  "fields": {
    "question": 1018,
    "text": "hashlib.pbkdf2_hmac",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4073,
  "fields": {
    "question": 1019,
    "text": "secrets.token_urlsafe(32)",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4074,
  "fields": {
    "question": 1019,
    "text": "random.token(32)",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4075,
  "fields": {
    "question": 1019,
    "text": "uuid.uuid4().hex[:32]",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4076,
  "fields": {
    "question": 1019,
    "text": "os.urandom(32).decode()",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4077,
  "fields": {
    "question": 1020,
    "text": "MD5",
    "is_correct": true
  }
},
{
  "model": "exam.choice",
  "pk": 4078,
  "fields": {
    "question": 1020,
    "text": "SHA-256",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4079,
  "fields": {
    "question": 1020,
    "text": "SHA3-256",
    "is_correct": false
  }
},
{
  "model": "exam.choice",
  "pk": 4080,
  "fields": {
    "question": 1020,
    "text": "BLAKE2b",
    "is_correct": false
  }
},
{
  "model": "exam.attempt",
  "pk": 62,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 821,
    "is_correct": true,
    "answered_at": "2025-09-27T16:51:09.300Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 63,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 821,
    "is_correct": true,
    "answered_at": "2025-09-27T16:51:13.285Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 64,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 889,
    "is_correct": false,
    "answered_at": "2025-09-27T17:07:57.202Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 65,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 889,
    "is_correct": false,
    "answered_at": "2025-09-27T17:08:02.034Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 66,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 914,
    "is_correct": false,
    "answered_at": "2025-09-27T17:08:04.700Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 67,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 914,
    "is_correct": false,
    "answered_at": "2025-09-27T17:08:10.984Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 68,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 591,
    "is_correct": false,
    "answered_at": "2025-09-27T17:08:13.634Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 69,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 591,
    "is_correct": false,
    "answered_at": "2025-09-27T17:08:16.084Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 70,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 654,
    "is_correct": true,
    "answered_at": "2025-09-27T17:08:19.068Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 71,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 654,
    "is_correct": true,
    "answered_at": "2025-09-27T17:08:29.317Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 72,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 657,
    "is_correct": true,
    "answered_at": "2025-09-27T17:10:37.801Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 73,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 657,
    "is_correct": true,
    "answered_at": "2025-09-27T17:10:47.751Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 74,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 858,
    "is_correct": true,
    "answered_at": "2025-09-27T17:10:52.367Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 75,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 603,
    "is_correct": true,
    "answered_at": "2025-09-27T17:12:12.518Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 76,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 610,
    "is_correct": true,
    "answered_at": "2025-09-28T03:07:09.123Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 77,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 610,
    "is_correct": true,
    "answered_at": "2025-09-28T03:07:10.752Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 78,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 937,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:13.070Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 79,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 937,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:14.321Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 80,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 651,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:16.253Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 81,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 651,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:17.387Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 82,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 990,
    "is_correct": true,
    "answered_at": "2025-09-28T03:07:20.319Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 83,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 990,
    "is_correct": true,
    "answered_at": "2025-09-28T03:07:22.287Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 84,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 995,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:24.836Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 85,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 995,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:26.037Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 86,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 737,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:28.037Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 87,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 737,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:29.502Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 88,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 635,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:32.018Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 89,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 635,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:32.985Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 90,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 786,
    "is_correct": true,
    "answered_at": "2025-09-28T03:07:35.385Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 91,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 786,
    "is_correct": true,
    "answered_at": "2025-09-28T03:07:36.403Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 92,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 617,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:38.751Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 93,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 617,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:39.818Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 94,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 580,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:44.585Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 95,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 580,
    "is_correct": false,
    "answered_at": "2025-09-28T03:07:45.735Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 96,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 964,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:44.448Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 97,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 964,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:46.930Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 98,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 825,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:49.531Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 99,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 825,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:50.494Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 100,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 667,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:53.264Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 101,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 667,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:54.199Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 102,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 916,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:56.250Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 103,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 916,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:57.079Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 104,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 725,
    "is_correct": false,
    "answered_at": "2025-09-28T03:08:59.614Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 105,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 725,
    "is_correct": false,
    "answered_at": "2025-09-28T03:09:00.560Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 106,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 687,
    "is_correct": false,
    "answered_at": "2025-09-28T03:09:03.113Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 107,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 687,
    "is_correct": false,
    "answered_at": "2025-09-28T03:09:04.297Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 108,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 852,
    "is_correct": false,
    "answered_at": "2025-09-28T03:11:54.086Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 109,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 852,
    "is_correct": false,
    "answered_at": "2025-09-28T03:14:13.780Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 110,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 946,
    "is_correct": false,
    "answered_at": "2025-09-28T03:14:19.010Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 111,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 946,
    "is_correct": false,
    "answered_at": "2025-09-28T03:14:23.409Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 112,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 894,
    "is_correct": false,
    "answered_at": "2025-09-28T03:14:27.009Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 113,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 894,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:03.077Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 114,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 652,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:05.460Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 115,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 652,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:06.726Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 116,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 820,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:09.743Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 117,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 820,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:10.742Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 118,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 765,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:13.743Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 119,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 765,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:14.692Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 120,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 688,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:17.175Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 121,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 688,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:18.393Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 122,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 922,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:20.459Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 123,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 922,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:21.608Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 124,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 644,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:23.742Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 125,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 644,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:24.592Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 126,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 783,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:26.941Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 127,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 783,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:28.424Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 128,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 649,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:30.908Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 129,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 649,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:32.209Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 130,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 723,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:34.674Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 131,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 723,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:35.658Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 132,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 756,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:37.622Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 133,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 756,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:38.791Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 134,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1015,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:40.941Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 135,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1015,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:42.059Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 136,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 850,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:44.456Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 137,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 850,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:45.657Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 138,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 830,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:48.290Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 139,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 830,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:49.473Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 140,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 604,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:51.807Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 141,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 604,
    "is_correct": false,
    "answered_at": "2025-09-28T03:15:53.091Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 142,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 752,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:56.987Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 143,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 752,
    "is_correct": true,
    "answered_at": "2025-09-28T03:15:58.124Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 144,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 978,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:00.374Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 145,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 978,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:01.306Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 146,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 879,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:03.673Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 147,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 879,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:04.673Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 148,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 975,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:07.189Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 149,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 975,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:08.439Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 150,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 691,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:10.839Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 151,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 691,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:11.956Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 152,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 908,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:15.138Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 153,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 908,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:16.339Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 154,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 890,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:19.006Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 155,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 890,
    "is_correct": false,
    "answered_at": "2025-09-28T03:16:20.154Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 156,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1009,
    "is_correct": true,
    "answered_at": "2025-09-28T03:29:36.403Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 157,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 958,
    "is_correct": false,
    "answered_at": "2025-09-28T03:30:26.702Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 158,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 958,
    "is_correct": false,
    "answered_at": "2025-09-28T03:31:06.215Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 159,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 800,
    "is_correct": false,
    "answered_at": "2025-09-28T03:31:22.046Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 160,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 800,
    "is_correct": false,
    "answered_at": "2025-09-28T03:31:26.014Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 161,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 640,
    "is_correct": false,
    "answered_at": "2025-09-28T03:31:30.013Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 162,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 937,
    "is_correct": true,
    "answered_at": "2025-09-30T01:02:42.514Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 163,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 937,
    "is_correct": true,
    "answered_at": "2025-09-30T01:03:09.023Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 164,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 978,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:11.313Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 165,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 978,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:13.543Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 166,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 913,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:17.052Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 167,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 913,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:17.991Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 168,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 894,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:20.286Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 169,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 894,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:21.633Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 170,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 635,
    "is_correct": true,
    "answered_at": "2025-09-30T01:03:24.495Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 171,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 635,
    "is_correct": true,
    "answered_at": "2025-09-30T01:03:25.937Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 172,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 907,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:28.148Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 173,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 907,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:32.409Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 174,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 585,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:34.298Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 175,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 585,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:35.485Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 176,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 612,
    "is_correct": true,
    "answered_at": "2025-09-30T01:03:39.397Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 177,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 612,
    "is_correct": true,
    "answered_at": "2025-09-30T01:03:48.073Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 178,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 856,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:50.761Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 179,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 856,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:51.998Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 180,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 715,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:54.900Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 181,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 715,
    "is_correct": false,
    "answered_at": "2025-09-30T01:03:56.674Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 182,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 925,
    "is_correct": false,
    "answered_at": "2025-09-30T01:04:00.500Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 183,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 925,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:14.279Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 184,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 617,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:16.931Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 185,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 617,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:24.536Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 186,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 876,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:28.800Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 187,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 876,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:30.553Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 188,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 736,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:32.379Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 189,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 736,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:33.048Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 190,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 776,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:35.103Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 191,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 776,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:35.838Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 192,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 948,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:38.893Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 193,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 948,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:40.001Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 194,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 844,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:42.210Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 195,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 844,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:43.179Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 196,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 677,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:45.337Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 197,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 677,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:46.636Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 198,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 613,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:49.072Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 199,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 613,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:49.707Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 200,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 634,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:52.152Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 201,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 634,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:52.807Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 202,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 808,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:55.027Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 203,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 808,
    "is_correct": true,
    "answered_at": "2025-09-30T01:06:55.699Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 204,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 606,
    "is_correct": false,
    "answered_at": "2025-09-30T01:06:57.709Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 205,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 606,
    "is_correct": false,
    "answered_at": "2025-09-30T01:07:00.339Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 206,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 745,
    "is_correct": false,
    "answered_at": "2025-09-30T01:07:02.888Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 207,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 745,
    "is_correct": false,
    "answered_at": "2025-09-30T02:06:29.809Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 208,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 686,
    "is_correct": false,
    "answered_at": "2025-09-30T02:06:39.282Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 209,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 686,
    "is_correct": false,
    "answered_at": "2025-09-30T02:06:41.041Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 210,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1013,
    "is_correct": true,
    "answered_at": "2025-09-30T02:06:45.110Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 211,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 614,
    "is_correct": false,
    "answered_at": "2025-09-30T02:20:20.455Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 212,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 614,
    "is_correct": false,
    "answered_at": "2025-09-30T02:20:23.593Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 213,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 696,
    "is_correct": false,
    "answered_at": "2025-09-30T02:20:25.337Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 214,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 696,
    "is_correct": false,
    "answered_at": "2025-09-30T02:20:29.236Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 215,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 632,
    "is_correct": false,
    "answered_at": "2025-09-30T02:20:31.025Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 216,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 632,
    "is_correct": false,
    "answered_at": "2025-09-30T02:20:31.636Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 217,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 963,
    "is_correct": false,
    "answered_at": "2025-09-30T02:20:33.718Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 218,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 963,
    "is_correct": false,
    "answered_at": "2025-09-30T02:20:34.296Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 219,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 960,
    "is_correct": true,
    "answered_at": "2025-09-30T02:20:36.129Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 220,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 960,
    "is_correct": true,
    "answered_at": "2025-09-30T02:37:13.016Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 221,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 698,
    "is_correct": false,
    "answered_at": "2025-09-30T02:37:18.063Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 222,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 698,
    "is_correct": false,
    "answered_at": "2025-09-30T02:38:19.433Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 223,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 698,
    "is_correct": false,
    "answered_at": "2025-09-30T02:38:21.374Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 224,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-09-30T02:38:25.175Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 225,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-09-30T02:38:47.443Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 226,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 936,
    "is_correct": false,
    "answered_at": "2025-09-30T02:38:51.539Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 227,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 936,
    "is_correct": false,
    "answered_at": "2025-09-30T02:38:58.306Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 228,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 993,
    "is_correct": false,
    "answered_at": "2025-09-30T02:38:59.853Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 229,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 993,
    "is_correct": false,
    "answered_at": "2025-09-30T02:51:17.806Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 230,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 774,
    "is_correct": false,
    "answered_at": "2025-09-30T02:51:22.728Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 231,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 774,
    "is_correct": false,
    "answered_at": "2025-09-30T02:52:35.187Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 232,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1015,
    "is_correct": false,
    "answered_at": "2025-09-30T02:52:38.680Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 233,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1015,
    "is_correct": false,
    "answered_at": "2025-09-30T02:52:48.315Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 234,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 801,
    "is_correct": false,
    "answered_at": "2025-09-30T02:52:52.967Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 235,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 801,
    "is_correct": false,
    "answered_at": "2025-09-30T02:53:00.779Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 236,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 667,
    "is_correct": false,
    "answered_at": "2025-09-30T02:53:02.632Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 237,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 667,
    "is_correct": false,
    "answered_at": "2025-09-30T02:53:08.093Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 238,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 761,
    "is_correct": false,
    "answered_at": "2025-09-30T02:53:10.034Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 239,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 761,
    "is_correct": false,
    "answered_at": "2025-09-30T02:57:38.927Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 240,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 647,
    "is_correct": false,
    "answered_at": "2025-09-30T02:57:42.172Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 241,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 647,
    "is_correct": false,
    "answered_at": "2025-09-30T02:58:26.753Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 242,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 915,
    "is_correct": true,
    "answered_at": "2025-09-30T02:58:33.085Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 243,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 915,
    "is_correct": true,
    "answered_at": "2025-09-30T03:12:53.650Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 244,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 826,
    "is_correct": false,
    "answered_at": "2025-09-30T03:12:56.789Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 245,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 826,
    "is_correct": false,
    "answered_at": "2025-09-30T03:12:57.768Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 246,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 681,
    "is_correct": false,
    "answered_at": "2025-09-30T03:13:10.189Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 247,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 681,
    "is_correct": false,
    "answered_at": "2025-09-30T03:13:11.406Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 248,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 748,
    "is_correct": false,
    "answered_at": "2025-09-30T03:16:21.050Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 249,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 748,
    "is_correct": false,
    "answered_at": "2025-09-30T03:16:48.597Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 250,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 917,
    "is_correct": false,
    "answered_at": "2025-09-30T03:16:51.785Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 251,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 917,
    "is_correct": false,
    "answered_at": "2025-09-30T03:16:53.742Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 252,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 947,
    "is_correct": true,
    "answered_at": "2025-09-30T03:16:55.203Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 253,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 947,
    "is_correct": true,
    "answered_at": "2025-09-30T03:18:03.573Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 254,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 596,
    "is_correct": false,
    "answered_at": "2025-09-30T03:18:07.638Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 255,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 596,
    "is_correct": false,
    "answered_at": "2025-09-30T03:18:08.730Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 256,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 637,
    "is_correct": true,
    "answered_at": "2025-09-30T03:18:10.768Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 257,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 637,
    "is_correct": true,
    "answered_at": "2025-09-30T03:19:34.411Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 258,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 829,
    "is_correct": true,
    "answered_at": "2025-09-30T04:14:42.864Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 259,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 829,
    "is_correct": true,
    "answered_at": "2025-09-30T04:15:27.367Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 260,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 936,
    "is_correct": false,
    "answered_at": "2025-09-30T04:15:37.535Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 261,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 936,
    "is_correct": false,
    "answered_at": "2025-09-30T04:15:40.025Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 262,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 655,
    "is_correct": false,
    "answered_at": "2025-09-30T04:15:41.516Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 263,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 655,
    "is_correct": false,
    "answered_at": "2025-09-30T04:15:42.307Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 264,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 675,
    "is_correct": true,
    "answered_at": "2025-09-30T04:15:43.811Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 265,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 675,
    "is_correct": true,
    "answered_at": "2025-09-30T04:16:26.078Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 266,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 998,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:27.995Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 267,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 998,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:31.434Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 268,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 903,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:32.893Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 269,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 903,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:33.679Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 270,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 973,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:35.242Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 271,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 973,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:37.002Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 272,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 892,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:38.724Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 273,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 892,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:39.354Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 274,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 706,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:40.509Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 275,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 706,
    "is_correct": false,
    "answered_at": "2025-09-30T04:16:41.587Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 276,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 715,
    "is_correct": true,
    "answered_at": "2025-09-30T04:16:43.097Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 277,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 715,
    "is_correct": true,
    "answered_at": "2025-09-30T04:19:28.700Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 278,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 631,
    "is_correct": false,
    "answered_at": "2025-09-30T04:19:33.880Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 279,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 631,
    "is_correct": false,
    "answered_at": "2025-09-30T04:19:35.855Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 280,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 691,
    "is_correct": true,
    "answered_at": "2025-09-30T04:19:38.249Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 281,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 691,
    "is_correct": true,
    "answered_at": "2025-09-30T04:21:24.212Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 282,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 737,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:28.159Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 283,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 737,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:30.562Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 284,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 855,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:32.025Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 285,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 855,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:34.595Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 286,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 771,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:35.916Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 287,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 771,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:37.476Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 288,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 716,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:38.694Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 289,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 716,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:40.101Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 290,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 670,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:41.734Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 291,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 670,
    "is_correct": false,
    "answered_at": "2025-09-30T04:21:43.032Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 292,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 861,
    "is_correct": true,
    "answered_at": "2025-09-30T04:21:44.796Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 293,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 861,
    "is_correct": true,
    "answered_at": "2025-09-30T04:24:31.426Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 294,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 582,
    "is_correct": false,
    "answered_at": "2025-09-30T04:24:34.743Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 295,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 582,
    "is_correct": false,
    "answered_at": "2025-09-30T04:24:35.739Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 296,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 873,
    "is_correct": true,
    "answered_at": "2025-09-30T04:25:58.249Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 297,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 873,
    "is_correct": true,
    "answered_at": "2025-09-30T04:25:59.245Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 298,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 824,
    "is_correct": false,
    "answered_at": "2025-09-30T04:26:11.725Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 299,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 824,
    "is_correct": false,
    "answered_at": "2025-09-30T04:26:14.195Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 300,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1010,
    "is_correct": false,
    "answered_at": "2025-09-30T04:26:44.288Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 301,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1010,
    "is_correct": false,
    "answered_at": "2025-09-30T04:26:45.762Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 302,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 736,
    "is_correct": false,
    "answered_at": "2025-09-30T04:30:49.629Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 303,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 736,
    "is_correct": false,
    "answered_at": "2025-09-30T04:30:50.782Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 304,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1015,
    "is_correct": false,
    "answered_at": "2025-09-30T04:30:52.649Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 305,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1015,
    "is_correct": false,
    "answered_at": "2025-09-30T04:30:53.732Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 306,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 738,
    "is_correct": false,
    "answered_at": "2025-09-30T04:30:56.947Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 307,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 738,
    "is_correct": false,
    "answered_at": "2025-09-30T04:30:58.501Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 308,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 623,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:00.410Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 309,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 623,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:01.128Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 310,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 643,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:05.260Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 311,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 643,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:06.002Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 312,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 635,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:09.123Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 313,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 635,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:14.529Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 314,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 783,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:16.249Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 315,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 783,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:17.360Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 316,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 955,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:19.375Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 317,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 955,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:20.713Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 318,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 974,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:22.859Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 319,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 974,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:24.066Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 320,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 610,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:26.411Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 321,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 610,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:27.855Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 322,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:30.088Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 323,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:31.301Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 324,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 696,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:33.251Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 325,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 696,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:34.686Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 326,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 928,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:36.400Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 327,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 928,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:38.214Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 328,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 786,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:40.335Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 329,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 786,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:41.889Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 330,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 704,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:43.657Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 331,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 704,
    "is_correct": false,
    "answered_at": "2025-09-30T04:31:45.520Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 332,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 754,
    "is_correct": true,
    "answered_at": "2025-09-30T04:31:47.309Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 333,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 754,
    "is_correct": true,
    "answered_at": "2025-09-30T04:51:44.519Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 334,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 714,
    "is_correct": true,
    "answered_at": "2025-09-30T04:51:52.286Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 335,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 714,
    "is_correct": true,
    "answered_at": "2025-09-30T04:51:54.003Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 336,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1008,
    "is_correct": false,
    "answered_at": "2025-09-30T04:51:55.885Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 337,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1008,
    "is_correct": false,
    "answered_at": "2025-09-30T04:51:57.391Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 338,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 896,
    "is_correct": false,
    "answered_at": "2025-09-30T04:51:58.677Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 339,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 896,
    "is_correct": false,
    "answered_at": "2025-09-30T04:52:00.085Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 340,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 652,
    "is_correct": false,
    "answered_at": "2025-09-30T04:52:02.462Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 341,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 652,
    "is_correct": false,
    "answered_at": "2025-09-30T04:52:03.343Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 342,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 934,
    "is_correct": false,
    "answered_at": "2025-09-30T04:52:05.016Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 343,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 934,
    "is_correct": false,
    "answered_at": "2025-09-30T04:52:07.482Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 344,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 718,
    "is_correct": false,
    "answered_at": "2025-09-30T04:52:29.961Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 345,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 718,
    "is_correct": false,
    "answered_at": "2025-09-30T04:52:32.197Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 346,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 813,
    "is_correct": true,
    "answered_at": "2025-09-30T04:52:34.935Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 347,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 813,
    "is_correct": true,
    "answered_at": "2025-09-30T05:10:49.113Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 348,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 854,
    "is_correct": false,
    "answered_at": "2025-09-30T05:10:53.298Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 349,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 854,
    "is_correct": false,
    "answered_at": "2025-09-30T05:10:54.376Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 350,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 951,
    "is_correct": false,
    "answered_at": "2025-09-30T05:10:55.651Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 351,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 951,
    "is_correct": false,
    "answered_at": "2025-09-30T05:10:56.355Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 352,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 633,
    "is_correct": false,
    "answered_at": "2025-09-30T05:10:57.659Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 353,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 633,
    "is_correct": false,
    "answered_at": "2025-09-30T05:10:58.236Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 354,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 841,
    "is_correct": false,
    "answered_at": "2025-09-30T05:10:59.775Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 355,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 841,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:00.757Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 356,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 978,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:02.464Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 357,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 978,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:03.459Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 358,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 883,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:05.162Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 359,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 883,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:09.506Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 360,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 929,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:11.130Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 361,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 929,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:11.866Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 362,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 586,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:14.007Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 363,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 586,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:14.565Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 364,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 847,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:16.340Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 365,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 847,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:16.970Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 366,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 803,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:18.608Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 367,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 803,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:19.476Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 368,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 904,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:21.011Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 369,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 904,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:21.821Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 370,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 607,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:24.009Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 371,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 607,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:24.859Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 372,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 680,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:26.253Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 373,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 680,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:27.108Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 374,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 690,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:28.640Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 375,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 690,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:29.717Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 376,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1010,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:31.587Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 377,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1010,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:32.570Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 378,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 764,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:34.533Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 379,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 764,
    "is_correct": false,
    "answered_at": "2025-09-30T05:11:35.577Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 380,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 872,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:37.464Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 381,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 872,
    "is_correct": true,
    "answered_at": "2025-09-30T05:11:38.442Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 382,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 902,
    "is_correct": false,
    "answered_at": "2025-09-30T05:18:38.666Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 383,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 902,
    "is_correct": false,
    "answered_at": "2025-09-30T05:18:54.589Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 384,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 933,
    "is_correct": true,
    "answered_at": "2025-09-30T05:19:24.706Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 385,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 933,
    "is_correct": true,
    "answered_at": "2025-09-30T05:23:42.767Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 386,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1020,
    "is_correct": false,
    "answered_at": "2025-09-30T05:25:20.934Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 387,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1020,
    "is_correct": false,
    "answered_at": "2025-09-30T05:25:49.192Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 388,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1020,
    "is_correct": false,
    "answered_at": "2025-09-30T05:25:51.110Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 389,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-09-30T05:25:52.983Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 390,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-09-30T05:26:35.022Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 391,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 884,
    "is_correct": false,
    "answered_at": "2025-09-30T05:26:40.331Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 392,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 884,
    "is_correct": false,
    "answered_at": "2025-09-30T05:26:53.876Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 393,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 883,
    "is_correct": true,
    "answered_at": "2025-09-30T05:26:57.472Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 394,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 883,
    "is_correct": true,
    "answered_at": "2025-09-30T05:26:59.807Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 395,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 710,
    "is_correct": false,
    "answered_at": "2025-09-30T05:27:02.042Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 396,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 710,
    "is_correct": false,
    "answered_at": "2025-09-30T05:27:19.954Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 397,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 930,
    "is_correct": false,
    "answered_at": "2025-09-30T05:27:23.195Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 398,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 930,
    "is_correct": false,
    "answered_at": "2025-09-30T05:28:59.229Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 399,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 724,
    "is_correct": false,
    "answered_at": "2025-09-30T05:29:02.318Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 400,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 724,
    "is_correct": false,
    "answered_at": "2025-09-30T05:29:06.128Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 401,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 852,
    "is_correct": false,
    "answered_at": "2025-09-30T05:29:08.306Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 402,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 852,
    "is_correct": false,
    "answered_at": "2025-09-30T05:29:09.863Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 403,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 755,
    "is_correct": false,
    "answered_at": "2025-09-30T05:29:13.410Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 404,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 587,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:39.822Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 405,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 587,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:41.928Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 406,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 873,
    "is_correct": true,
    "answered_at": "2025-09-30T05:35:43.253Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 407,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 873,
    "is_correct": true,
    "answered_at": "2025-09-30T05:35:46.071Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 408,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 758,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:47.340Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 409,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 758,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:48.351Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 410,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 829,
    "is_correct": true,
    "answered_at": "2025-09-30T05:35:49.773Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 411,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 829,
    "is_correct": true,
    "answered_at": "2025-09-30T05:35:50.420Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 412,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 920,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:51.765Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 413,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 920,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:52.386Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 414,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 974,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:53.708Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 415,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 974,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:54.468Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 416,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 783,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:55.540Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 417,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 783,
    "is_correct": false,
    "answered_at": "2025-09-30T05:35:56.102Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 418,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 637,
    "is_correct": true,
    "answered_at": "2025-09-30T05:35:57.227Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 419,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 637,
    "is_correct": true,
    "answered_at": "2025-09-30T05:36:05.813Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 420,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 898,
    "is_correct": false,
    "answered_at": "2025-09-30T05:36:07.282Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 421,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 898,
    "is_correct": false,
    "answered_at": "2025-09-30T05:36:08.171Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 422,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 826,
    "is_correct": false,
    "answered_at": "2025-09-30T05:36:09.526Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 423,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 826,
    "is_correct": false,
    "answered_at": "2025-09-30T05:36:10.340Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 424,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1006,
    "is_correct": false,
    "answered_at": "2025-09-30T05:36:11.843Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 425,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1006,
    "is_correct": false,
    "answered_at": "2025-09-30T05:36:13.214Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 426,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 689,
    "is_correct": true,
    "answered_at": "2025-09-30T05:36:15.033Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 427,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 689,
    "is_correct": true,
    "answered_at": "2025-09-30T05:37:10.045Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 428,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 723,
    "is_correct": false,
    "answered_at": "2025-09-30T05:37:13.991Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 429,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 723,
    "is_correct": false,
    "answered_at": "2025-09-30T05:37:24.218Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 430,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 999,
    "is_correct": false,
    "answered_at": "2025-09-30T05:37:26.355Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 431,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 999,
    "is_correct": false,
    "answered_at": "2025-09-30T05:37:34.548Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 432,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 667,
    "is_correct": false,
    "answered_at": "2025-09-30T05:37:36.382Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 433,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 667,
    "is_correct": false,
    "answered_at": "2025-09-30T05:38:22.390Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 434,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 784,
    "is_correct": false,
    "answered_at": "2025-09-30T05:38:55.540Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 435,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 784,
    "is_correct": false,
    "answered_at": "2025-09-30T05:39:32.862Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 436,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 864,
    "is_correct": false,
    "answered_at": "2025-09-30T05:39:39.709Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 437,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 864,
    "is_correct": false,
    "answered_at": "2025-09-30T05:39:41.749Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 438,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 668,
    "is_correct": true,
    "answered_at": "2025-09-30T05:39:51.993Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 439,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 668,
    "is_correct": true,
    "answered_at": "2025-09-30T05:40:34.041Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 440,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 746,
    "is_correct": false,
    "answered_at": "2025-09-30T05:40:43.226Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 441,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 746,
    "is_correct": false,
    "answered_at": "2025-09-30T05:40:52.558Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 442,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 730,
    "is_correct": false,
    "answered_at": "2025-09-30T05:40:54.681Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 443,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 730,
    "is_correct": false,
    "answered_at": "2025-09-30T05:41:16.418Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 444,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 943,
    "is_correct": false,
    "answered_at": "2025-09-30T05:41:18.639Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 445,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 943,
    "is_correct": false,
    "answered_at": "2025-09-30T05:41:47.187Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 446,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 661,
    "is_correct": false,
    "answered_at": "2025-09-30T05:41:49.090Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 447,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 661,
    "is_correct": false,
    "answered_at": "2025-09-30T05:41:52.545Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 448,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 867,
    "is_correct": false,
    "answered_at": "2025-09-30T05:42:11.895Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 449,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 867,
    "is_correct": false,
    "answered_at": "2025-09-30T05:42:14.620Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 450,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 927,
    "is_correct": false,
    "answered_at": "2025-09-30T05:43:08.227Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 451,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 927,
    "is_correct": false,
    "answered_at": "2025-09-30T05:43:25.294Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 452,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 959,
    "is_correct": true,
    "answered_at": "2025-09-30T05:43:31.804Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 453,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 959,
    "is_correct": true,
    "answered_at": "2025-09-30T05:43:59.440Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 454,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 611,
    "is_correct": false,
    "answered_at": "2025-09-30T05:44:45.030Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 455,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 611,
    "is_correct": false,
    "answered_at": "2025-09-30T05:44:56.125Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 456,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 641,
    "is_correct": false,
    "answered_at": "2025-09-30T05:45:16.983Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 457,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 641,
    "is_correct": false,
    "answered_at": "2025-09-30T05:46:47.542Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 458,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1019,
    "is_correct": true,
    "answered_at": "2025-09-30T05:47:03.473Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 459,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1019,
    "is_correct": true,
    "answered_at": "2025-09-30T05:47:47.524Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 460,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 626,
    "is_correct": false,
    "answered_at": "2025-09-30T05:47:50.883Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 461,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 626,
    "is_correct": false,
    "answered_at": "2025-09-30T05:48:07.785Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 462,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 794,
    "is_correct": true,
    "answered_at": "2025-09-30T05:54:24.207Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 463,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 794,
    "is_correct": true,
    "answered_at": "2025-09-30T05:54:30.474Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 464,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 905,
    "is_correct": false,
    "answered_at": "2025-09-30T05:54:33.778Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 465,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 905,
    "is_correct": false,
    "answered_at": "2025-09-30T05:54:35.798Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 466,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 768,
    "is_correct": true,
    "answered_at": "2025-09-30T05:54:39.487Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 467,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 768,
    "is_correct": true,
    "answered_at": "2025-09-30T05:55:47.786Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 468,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 938,
    "is_correct": false,
    "answered_at": "2025-09-30T05:55:50.952Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 469,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 938,
    "is_correct": false,
    "answered_at": "2025-09-30T05:55:52.385Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 470,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 698,
    "is_correct": true,
    "answered_at": "2025-09-30T05:55:53.785Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 471,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 698,
    "is_correct": true,
    "answered_at": "2025-09-30T05:56:10.574Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 472,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 707,
    "is_correct": false,
    "answered_at": "2025-09-30T05:56:12.844Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 473,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 707,
    "is_correct": false,
    "answered_at": "2025-09-30T05:56:13.719Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 474,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 598,
    "is_correct": false,
    "answered_at": "2025-09-30T05:56:15.447Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 475,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 598,
    "is_correct": false,
    "answered_at": "2025-09-30T05:56:16.294Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 476,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 877,
    "is_correct": true,
    "answered_at": "2025-09-30T05:56:17.726Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 477,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 877,
    "is_correct": true,
    "answered_at": "2025-09-30T05:56:18.944Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 478,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 984,
    "is_correct": false,
    "answered_at": "2025-09-30T05:56:21.048Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 479,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 984,
    "is_correct": false,
    "answered_at": "2025-09-30T05:56:22.005Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 480,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 593,
    "is_correct": true,
    "answered_at": "2025-09-30T05:56:24.017Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 481,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 593,
    "is_correct": true,
    "answered_at": "2025-09-30T05:56:24.776Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 482,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 743,
    "is_correct": false,
    "answered_at": "2025-09-30T05:56:26.648Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 483,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 743,
    "is_correct": false,
    "answered_at": "2025-09-30T05:56:27.333Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 484,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 670,
    "is_correct": false,
    "answered_at": "2025-09-30T06:14:15.292Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 485,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 670,
    "is_correct": false,
    "answered_at": "2025-09-30T06:14:18.327Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 486,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 834,
    "is_correct": true,
    "answered_at": "2025-09-30T06:14:27.491Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 487,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 834,
    "is_correct": true,
    "answered_at": "2025-09-30T06:14:28.241Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 488,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 626,
    "is_correct": false,
    "answered_at": "2025-09-30T06:14:37.504Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 489,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 626,
    "is_correct": false,
    "answered_at": "2025-09-30T06:14:38.017Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 490,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 931,
    "is_correct": false,
    "answered_at": "2025-09-30T06:14:42.528Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 491,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 931,
    "is_correct": false,
    "answered_at": "2025-09-30T06:14:42.930Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 492,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 714,
    "is_correct": true,
    "answered_at": "2025-09-30T06:15:12.357Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 493,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 714,
    "is_correct": true,
    "answered_at": "2025-09-30T06:16:51.021Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 494,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1011,
    "is_correct": false,
    "answered_at": "2025-09-30T06:16:55.121Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 495,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1011,
    "is_correct": false,
    "answered_at": "2025-09-30T06:16:58.660Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 496,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 599,
    "is_correct": false,
    "answered_at": "2025-09-30T06:17:00.009Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 497,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 599,
    "is_correct": false,
    "answered_at": "2025-09-30T06:17:13.849Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 498,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 981,
    "is_correct": false,
    "answered_at": "2025-09-30T06:17:15.338Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 499,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 981,
    "is_correct": false,
    "answered_at": "2025-09-30T06:17:42.286Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 500,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 762,
    "is_correct": false,
    "answered_at": "2025-09-30T06:17:44.511Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 501,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 762,
    "is_correct": false,
    "answered_at": "2025-09-30T06:17:49.745Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 502,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 990,
    "is_correct": false,
    "answered_at": "2025-09-30T06:17:51.664Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 503,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 990,
    "is_correct": false,
    "answered_at": "2025-09-30T06:19:39.785Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 504,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 901,
    "is_correct": true,
    "answered_at": "2025-09-30T06:19:42.203Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 505,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 901,
    "is_correct": true,
    "answered_at": "2025-09-30T06:20:51.921Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 506,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 817,
    "is_correct": false,
    "answered_at": "2025-09-30T06:20:54.184Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 507,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 817,
    "is_correct": false,
    "answered_at": "2025-09-30T06:21:33.122Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 508,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-09-30T06:21:35.377Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 509,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 668,
    "is_correct": true,
    "answered_at": "2025-09-30T06:21:50.928Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 510,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 668,
    "is_correct": true,
    "answered_at": "2025-09-30T06:21:52.163Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 511,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 696,
    "is_correct": false,
    "answered_at": "2025-09-30T06:21:54.466Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 512,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 669,
    "is_correct": false,
    "answered_at": "2025-09-30T06:37:34.826Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 513,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 669,
    "is_correct": false,
    "answered_at": "2025-09-30T06:37:56.111Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 514,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 979,
    "is_correct": false,
    "answered_at": "2025-09-30T06:38:16.998Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 515,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 979,
    "is_correct": false,
    "answered_at": "2025-09-30T06:38:44.069Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 516,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 657,
    "is_correct": false,
    "answered_at": "2025-09-30T06:38:46.449Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 517,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 865,
    "is_correct": true,
    "answered_at": "2025-09-30T06:41:48.401Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 518,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 865,
    "is_correct": true,
    "answered_at": "2025-09-30T06:42:58.214Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 519,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 851,
    "is_correct": true,
    "answered_at": "2025-09-30T06:42:59.679Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 520,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 851,
    "is_correct": true,
    "answered_at": "2025-09-30T06:43:00.530Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 521,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 827,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:01.700Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 522,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 827,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:03.124Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 523,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 999,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:04.854Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 524,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 999,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:05.694Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 525,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 637,
    "is_correct": true,
    "answered_at": "2025-09-30T06:43:07.303Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 526,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 637,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:13.013Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 527,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 591,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:15.186Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 528,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 591,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:17.941Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 529,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 579,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:20.458Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 530,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 579,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:34.160Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 531,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 650,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:35.660Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 532,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 650,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:36.954Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 533,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 946,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:38.280Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 534,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 946,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:39.124Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 535,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 669,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:40.270Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 536,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 669,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:41.024Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 537,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 898,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:42.142Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 538,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 898,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:42.951Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 539,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 853,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:44.268Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 540,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 853,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:44.970Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 541,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 840,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:46.554Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 542,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 840,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:47.565Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 543,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 879,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:52.606Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 544,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 879,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:56.199Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 545,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 896,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:57.332Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 546,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 896,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:58.209Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 547,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1011,
    "is_correct": false,
    "answered_at": "2025-09-30T06:43:59.482Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 548,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1011,
    "is_correct": false,
    "answered_at": "2025-09-30T06:44:00.206Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 549,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 944,
    "is_correct": false,
    "answered_at": "2025-09-30T06:44:01.346Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 550,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 944,
    "is_correct": false,
    "answered_at": "2025-09-30T06:47:51.218Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 551,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 962,
    "is_correct": false,
    "answered_at": "2025-09-30T06:47:53.076Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 552,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 962,
    "is_correct": false,
    "answered_at": "2025-09-30T06:47:55.362Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 553,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 759,
    "is_correct": false,
    "answered_at": "2025-09-30T06:47:56.590Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 554,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 759,
    "is_correct": false,
    "answered_at": "2025-09-30T06:47:58.052Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 555,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 704,
    "is_correct": false,
    "answered_at": "2025-09-30T06:47:59.809Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 556,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 704,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:01.445Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 557,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 600,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:02.970Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 558,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 600,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:03.697Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 559,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 651,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:05.151Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 560,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 651,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:05.862Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 561,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 702,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:07.192Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 562,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 702,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:08.173Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 563,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 927,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:09.809Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 564,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 927,
    "is_correct": false,
    "answered_at": "2025-09-30T06:48:10.516Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 565,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 721,
    "is_correct": true,
    "answered_at": "2025-09-30T06:48:12.057Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 566,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 721,
    "is_correct": true,
    "answered_at": "2025-09-30T06:48:52.842Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 567,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 672,
    "is_correct": false,
    "answered_at": "2025-09-30T06:49:21.067Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 568,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 672,
    "is_correct": false,
    "answered_at": "2025-09-30T06:52:39.975Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 569,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 883,
    "is_correct": true,
    "answered_at": "2025-09-30T06:52:43.069Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 570,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 883,
    "is_correct": true,
    "answered_at": "2025-09-30T06:52:44.034Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 571,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1009,
    "is_correct": false,
    "answered_at": "2025-09-30T06:52:45.700Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 572,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1009,
    "is_correct": false,
    "answered_at": "2025-09-30T06:52:46.333Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 573,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 651,
    "is_correct": false,
    "answered_at": "2025-09-30T06:53:11.754Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 574,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 651,
    "is_correct": false,
    "answered_at": "2025-09-30T06:53:24.786Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 575,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 898,
    "is_correct": false,
    "answered_at": "2025-09-30T06:53:26.491Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 576,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 898,
    "is_correct": false,
    "answered_at": "2025-09-30T06:55:06.165Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 577,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1017,
    "is_correct": true,
    "answered_at": "2025-09-30T06:55:08.034Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 578,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1017,
    "is_correct": true,
    "answered_at": "2025-09-30T06:55:17.059Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 579,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 721,
    "is_correct": true,
    "answered_at": "2025-09-30T06:55:19.129Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 580,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 721,
    "is_correct": true,
    "answered_at": "2025-09-30T06:55:20.556Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 581,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 914,
    "is_correct": false,
    "answered_at": "2025-09-30T06:56:03.347Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 582,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 914,
    "is_correct": false,
    "answered_at": "2025-09-30T06:56:04.977Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 583,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 936,
    "is_correct": false,
    "answered_at": "2025-09-30T06:56:07.887Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 584,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 936,
    "is_correct": false,
    "answered_at": "2025-09-30T06:56:09.877Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 585,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 985,
    "is_correct": false,
    "answered_at": "2025-09-30T06:56:11.050Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 586,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 994,
    "is_correct": false,
    "answered_at": "2025-09-30T06:56:29.743Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 587,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 994,
    "is_correct": false,
    "answered_at": "2025-09-30T06:56:31.487Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 588,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 706,
    "is_correct": false,
    "answered_at": "2025-09-30T06:56:32.620Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 589,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 768,
    "is_correct": false,
    "answered_at": "2025-10-01T04:21:12.811Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 590,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 768,
    "is_correct": false,
    "answered_at": "2025-10-01T04:21:21.822Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 591,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 883,
    "is_correct": true,
    "answered_at": "2025-10-01T04:21:30.373Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 592,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 883,
    "is_correct": true,
    "answered_at": "2025-10-01T04:21:35.565Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 593,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 752,
    "is_correct": false,
    "answered_at": "2025-10-01T04:21:38.248Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 594,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 752,
    "is_correct": false,
    "answered_at": "2025-10-01T04:21:45.057Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 595,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 793,
    "is_correct": false,
    "answered_at": "2025-10-01T04:21:47.326Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 596,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 793,
    "is_correct": false,
    "answered_at": "2025-10-01T04:21:55.375Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 597,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 587,
    "is_correct": true,
    "answered_at": "2025-10-01T04:21:58.431Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 598,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 587,
    "is_correct": true,
    "answered_at": "2025-10-01T04:22:13.074Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 599,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 669,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:15.781Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 600,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 669,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:19.050Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 601,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 878,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:21.223Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 602,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 878,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:26.946Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 603,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 852,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:28.784Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 604,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 852,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:31.809Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 605,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 942,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:34.589Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 606,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 942,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:37.066Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 607,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 978,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:40.041Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 608,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 978,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:43.565Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 609,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 761,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:47.218Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 610,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 761,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:50.153Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 611,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 813,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:52.702Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 612,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 813,
    "is_correct": false,
    "answered_at": "2025-10-01T04:22:58.209Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 613,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 703,
    "is_correct": true,
    "answered_at": "2025-10-01T04:23:00.570Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 614,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 703,
    "is_correct": true,
    "answered_at": "2025-10-01T04:23:05.970Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 615,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 717,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:08.420Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 616,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 717,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:11.382Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 617,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 640,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:13.588Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 618,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 640,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:21.062Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 619,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 932,
    "is_correct": true,
    "answered_at": "2025-10-01T04:23:22.988Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 620,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 932,
    "is_correct": true,
    "answered_at": "2025-10-01T04:23:25.277Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 621,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 969,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:27.184Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 622,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 969,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:33.610Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 623,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 658,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:35.590Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 624,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 658,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:56.302Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 625,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 753,
    "is_correct": false,
    "answered_at": "2025-10-01T04:23:58.441Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 626,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 753,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:01.832Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 627,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 993,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:04.416Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 628,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 993,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:08.131Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 629,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 927,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:10.302Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 630,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 927,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:11.724Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 631,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 787,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:14.497Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 632,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 787,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:16.953Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 633,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 908,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:18.623Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 634,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 908,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:20.605Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 635,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 864,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:25.233Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 636,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 864,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:29.717Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 637,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 596,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:32.459Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 638,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 596,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:34.655Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 639,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 695,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:37.520Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 640,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 695,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:39.455Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 641,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 670,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:41.965Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 642,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 670,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:43.787Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 643,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 1019,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:45.935Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 644,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 1019,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:47.707Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 645,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 961,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:50.045Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 646,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 961,
    "is_correct": false,
    "answered_at": "2025-10-01T04:24:51.715Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 647,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 1001,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:54.100Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 648,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 1001,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:56.010Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 649,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 892,
    "is_correct": true,
    "answered_at": "2025-10-01T04:24:58.812Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 650,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 892,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:00.667Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 651,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 718,
    "is_correct": false,
    "answered_at": "2025-10-01T04:25:03.164Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 652,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 718,
    "is_correct": false,
    "answered_at": "2025-10-01T04:25:05.622Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 653,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 673,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:07.668Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 654,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 673,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:09.200Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 655,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 796,
    "is_correct": false,
    "answered_at": "2025-10-01T04:25:11.240Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 656,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 796,
    "is_correct": false,
    "answered_at": "2025-10-01T04:25:12.875Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 657,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 865,
    "is_correct": false,
    "answered_at": "2025-10-01T04:25:15.450Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 658,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 865,
    "is_correct": false,
    "answered_at": "2025-10-01T04:25:17.061Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 659,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 951,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:19.710Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 660,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 951,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:21.680Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 661,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 694,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:24.196Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 662,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 694,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:26.259Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 663,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-10-01T04:25:28.371Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 664,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 665,
    "is_correct": false,
    "answered_at": "2025-10-01T04:25:34.563Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 665,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 607,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:36.695Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 666,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 607,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:38.784Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 667,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 617,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:41.640Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 668,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 617,
    "is_correct": true,
    "answered_at": "2025-10-01T04:25:46.139Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 669,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 958,
    "is_correct": false,
    "answered_at": "2025-10-01T04:33:03.680Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 670,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 847,
    "is_correct": false,
    "answered_at": "2025-10-01T06:05:43.835Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 671,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 847,
    "is_correct": false,
    "answered_at": "2025-10-01T06:05:48.036Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 672,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 635,
    "is_correct": false,
    "answered_at": "2025-10-01T06:05:50.058Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 673,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 635,
    "is_correct": false,
    "answered_at": "2025-10-01T06:05:52.246Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 674,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 723,
    "is_correct": false,
    "answered_at": "2025-10-01T06:05:54.028Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 675,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 723,
    "is_correct": false,
    "answered_at": "2025-10-01T06:05:56.428Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 676,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 809,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:07.996Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 677,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 809,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:09.812Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 678,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 633,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:11.224Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 679,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 633,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:12.031Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 680,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 593,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:13.255Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 681,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 593,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:15.460Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 682,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 696,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:17.171Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 683,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 696,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:18.199Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 684,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 812,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:19.208Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 685,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 812,
    "is_correct": false,
    "answered_at": "2025-10-01T06:06:20.340Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 686,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 737,
    "is_correct": true,
    "answered_at": "2025-10-01T06:06:21.510Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 687,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 976,
    "is_correct": false,
    "answered_at": "2025-10-01T06:45:32.351Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 688,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 954,
    "is_correct": true,
    "answered_at": "2025-10-01T06:45:55.407Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 689,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 933,
    "is_correct": false,
    "answered_at": "2025-10-01T06:46:15.555Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 690,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 647,
    "is_correct": true,
    "answered_at": "2025-10-02T00:51:42.508Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 691,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 647,
    "is_correct": true,
    "answered_at": "2025-10-02T00:51:44.089Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 692,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 918,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:47.307Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 693,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 918,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:49.073Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 694,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 618,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:51.111Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 695,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 618,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:51.948Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 696,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 663,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:53.212Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 697,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 663,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:54.110Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 698,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 714,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:55.995Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 699,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 714,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:57.546Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 700,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 916,
    "is_correct": false,
    "answered_at": "2025-10-02T00:51:58.957Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 701,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 916,
    "is_correct": false,
    "answered_at": "2025-10-02T00:52:00.554Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 702,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 595,
    "is_correct": false,
    "answered_at": "2025-10-02T00:52:24.040Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 703,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 595,
    "is_correct": false,
    "answered_at": "2025-10-02T00:52:26.582Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 704,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 969,
    "is_correct": true,
    "answered_at": "2025-10-02T00:52:27.635Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 705,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 969,
    "is_correct": true,
    "answered_at": "2025-10-02T00:58:12.305Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 706,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 876,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:14.126Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 707,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 876,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:17.754Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 708,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 983,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:19.715Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 709,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 983,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:21.177Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 710,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 608,
    "is_correct": true,
    "answered_at": "2025-10-02T00:58:22.364Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 711,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 608,
    "is_correct": true,
    "answered_at": "2025-10-02T00:58:23.982Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 712,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 757,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:25.619Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 713,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 757,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:28.577Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 714,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1001,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:29.914Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 715,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 1001,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:31.784Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 716,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 716,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:39.286Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 717,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 716,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:40.636Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 718,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 979,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:45.521Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 719,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 979,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:46.593Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 720,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 667,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:49.285Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 721,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 667,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:52.404Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 722,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 766,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:53.954Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 723,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 766,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:54.894Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 724,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 899,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:56.126Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 725,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 899,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:57.155Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 726,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 912,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:58.294Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 727,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 912,
    "is_correct": false,
    "answered_at": "2025-10-02T00:58:58.987Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 728,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 858,
    "is_correct": true,
    "answered_at": "2025-10-02T00:59:00.140Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 729,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 689,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:07.205Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 730,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 689,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:13.436Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 731,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 1006,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:21.118Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 732,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 1006,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:24.759Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 733,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 773,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:28.917Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 734,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 773,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:31.370Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 735,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 603,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:34.646Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 736,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 603,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:36.726Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 737,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 787,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:39.897Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 738,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 787,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:41.699Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 739,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 631,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:44.556Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 740,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 631,
    "is_correct": false,
    "answered_at": "2025-10-02T01:08:46.410Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 741,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 932,
    "is_correct": true,
    "answered_at": "2025-10-02T01:08:49.935Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 742,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 932,
    "is_correct": true,
    "answered_at": "2025-10-02T01:10:04.794Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 743,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 701,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:08.196Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 744,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 701,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:09.629Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 745,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 889,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:12.254Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 746,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 889,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:13.772Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 747,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 1020,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:24.191Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 748,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 1020,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:27.359Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 749,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 696,
    "is_correct": true,
    "answered_at": "2025-10-02T01:10:35.207Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 750,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 696,
    "is_correct": true,
    "answered_at": "2025-10-02T01:10:37.525Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 751,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 903,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:40.317Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 752,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 903,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:42.122Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 753,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 948,
    "is_correct": true,
    "answered_at": "2025-10-02T01:10:45.193Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 754,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 948,
    "is_correct": true,
    "answered_at": "2025-10-02T01:10:47.333Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 755,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 993,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:50.864Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 756,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 993,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:53.353Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 757,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 794,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:55.837Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 758,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 794,
    "is_correct": false,
    "answered_at": "2025-10-02T01:10:58.014Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 759,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 617,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:00.603Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 760,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 617,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:01.825Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 761,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 919,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:04.355Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 762,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 919,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:07.121Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 763,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 769,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:09.668Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 764,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 769,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:11.494Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 765,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 664,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:13.968Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 766,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 664,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:15.850Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 767,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 636,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:18.586Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 768,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 636,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:20.722Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 769,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 624,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:23.266Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 770,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 624,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:24.219Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 771,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 720,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:25.969Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 772,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 720,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:26.778Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 773,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 989,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:28.326Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 774,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 989,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:29.155Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 775,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 737,
    "is_correct": true,
    "answered_at": "2025-10-02T01:11:30.624Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 776,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 737,
    "is_correct": true,
    "answered_at": "2025-10-02T01:11:31.421Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 777,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 900,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:32.845Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 778,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 900,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:33.611Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 779,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 822,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:35.126Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 780,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 822,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:35.944Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 781,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 760,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:37.674Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 782,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 760,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:38.429Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 783,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 983,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:40.253Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 784,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 983,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:41.167Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 785,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 861,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:44.024Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 786,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 861,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:44.972Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 787,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 730,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:46.528Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 788,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 730,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:47.331Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 789,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 658,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:49.071Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 790,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 658,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:49.961Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 791,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 951,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:51.901Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 792,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 951,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:52.656Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 793,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 838,
    "is_correct": true,
    "answered_at": "2025-10-02T01:11:55.625Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 794,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 838,
    "is_correct": true,
    "answered_at": "2025-10-02T01:11:57.562Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 795,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 607,
    "is_correct": false,
    "answered_at": "2025-10-02T01:11:59.740Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 796,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 607,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:00.816Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 797,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 796,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:04.672Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 798,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 796,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:05.888Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 799,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 585,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:09.759Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 800,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 585,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:10.751Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 801,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 970,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:13.748Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 802,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 970,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:15.017Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 803,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 646,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:16.829Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 804,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 646,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:17.937Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 805,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 747,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:24.424Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 806,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 747,
    "is_correct": false,
    "answered_at": "2025-10-02T01:12:25.416Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 807,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 884,
    "is_correct": true,
    "answered_at": "2025-10-02T01:12:27.844Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 808,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 884,
    "is_correct": true,
    "answered_at": "2025-10-02T01:12:28.775Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 809,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 773,
    "is_correct": false,
    "answered_at": "2025-10-02T01:17:45.155Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 810,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 703,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:00.805Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 811,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 773,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:03.199Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 812,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 899,
    "is_correct": true,
    "answered_at": "2025-10-02T01:18:06.794Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 813,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 703,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:13.519Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 814,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 805,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:15.516Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 815,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 899,
    "is_correct": true,
    "answered_at": "2025-10-02T01:18:18.770Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 816,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 746,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:20.883Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 817,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 805,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:23.806Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 818,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 781,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:25.326Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 819,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 746,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:28.761Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 820,
  "fields": {
    "user": [
      "guest"
    ],
    "question": 712,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:31.409Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 821,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 781,
    "is_correct": false,
    "answered_at": "2025-10-02T01:18:34.525Z",
    "mode": "mock",
    "box": 0
  }
},
{
  "model": "exam.attempt",
  "pk": 822,
  "fields": {
    "user": [
      "admin"
    ],
    "question": 639,
    "is_correct": true,
    "answered_at": "2025-10-02T01:18:35.801Z",
    "mode": "mock",
    "box": 0
  }
}
]
